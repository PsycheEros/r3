System.register([], function (exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    function getAffectedSquares(grid, position, color) {
        if (!grid.boundsCheck(position)) {
            return [];
        }
        const square = grid.get(position);
        if (!square || !square.empty || !square.enabled) {
            return [];
        }
        function direction({ x, y }, delta) {
            const squares = [];
            for (;;) {
                x += delta.x;
                y += delta.y;
                if (!grid.boundsCheck({ x, y })) {
                    return [];
                }
                const square = grid.get({ x, y });
                if (!square || square.empty || !square.enabled) {
                    return [];
                }
                if (square.color === color) {
                    return squares;
                }
                squares.push(square);
            }
        }
        const squares = [square];
        for (const delta of directions) {
            squares.splice(squares.length, 0, ...direction(position, delta));
        }
        if (squares.length <= 1) {
            return [];
        }
        return squares;
    }
    var directions, Rules;
    return {
        setters: [],
        execute: function () {
            directions = [
                { x: 0, y: -1 },
                { x: 1, y: -1 },
                { x: 1, y: 0 },
                { x: 1, y: 1 },
                { x: 0, y: 1 },
                { x: -1, y: 1 },
                { x: -1, y: 0 },
                { x: -1, y: -1 }
            ];
            Rules = class Rules {
                isValid(grid, position, color) {
                    return getAffectedSquares(grid, position, color).length > 0;
                }
                getValidMoves(grid, color) {
                    const squares = [];
                    for (const square of grid) {
                        if (square && this.isValid(grid, square.position, color)) {
                            squares.push(square);
                        }
                    }
                    return squares;
                }
                isGameOver(grid, colors) {
                    for (const color of colors) {
                        if (this.getValidMoves(grid, color).length > 0) {
                            return false;
                        }
                    }
                    return true;
                }
                makeMove(grid, position, color) {
                    const squares = getAffectedSquares(grid, position, color);
                    for (const square of squares) {
                        square.color = color;
                    }
                    return squares.length;
                }
                getScore(grid, color) {
                    let score = 0;
                    for (const square of grid) {
                        if (square && square.enabled && square.color === color) {
                            ++score;
                        }
                    }
                    return score;
                }
            };
            exports_1("default", Rules);
        }
    };
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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T0FBTyxHQUFHLGtCQUFrQixDQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFFLENBQUM7b0JBQzVELEdBQUcsQ0FBQSxDQUFFLE1BQU0sTUFBTSxJQUFJLE9BQVEsQ0FBQyxDQUFDLENBQUM7d0JBQy9CLE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO29CQUN0QixDQUFDO29CQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO2dCQUN2QixDQUFDO2dCQUVNLFFBQVEsQ0FBRSxJQUFrQixFQUFFLEtBQWE7b0JBQ2pELElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztvQkFDZCxHQUFHLENBQUEsQ0FBRSxNQUFNLE1BQU0sSUFBSSxJQUFLLENBQUMsQ0FBQyxDQUFDO3dCQUM1QixFQUFFLENBQUEsQ0FBRSxNQUFNLElBQUksTUFBTSxDQUFDLE9BQU8sSUFBSSxNQUFNLENBQUMsS0FBSyxLQUFLLEtBQU0sQ0FBQyxDQUFDLENBQUM7NEJBQ3pELEVBQUUsS0FBSyxDQUFDO3dCQUNULENBQUM7b0JBQ0YsQ0FBQztvQkFDRCxNQUFNLENBQUMsS0FBSyxDQUFDO2dCQUNkLENBQUM7YUFDRCxDQUFBOztRQUNELENBQUMiLCJmaWxlIjoicnVsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgR3JpZCBmcm9tICcuL2dyaWQnO1xyXG5pbXBvcnQgU3F1YXJlIGZyb20gJy4vc3F1YXJlJztcclxuXHJcbmNvbnN0IGRpcmVjdGlvbnM6IFBvaW50W10gPSBbXHJcblx0eyB4OiAgMCwgeTogLTEgfSxcclxuXHR7IHg6ICAxLCB5OiAtMSB9LFxyXG5cdHsgeDogIDEsIHk6ICAwIH0sXHJcblx0eyB4OiAgMSwgeTogIDEgfSxcclxuXHR7IHg6ICAwLCB5OiAgMSB9LFxyXG5cdHsgeDogLTEsIHk6ICAxIH0sXHJcblx0eyB4OiAtMSwgeTogIDAgfSxcclxuXHR7IHg6IC0xLCB5OiAtMSB9XHJcbl07XHJcblxyXG5mdW5jdGlvbiBnZXRBZmZlY3RlZFNxdWFyZXMoIGdyaWQ6IEdyaWQ8U3F1YXJlPiwgcG9zaXRpb246IFBvaW50LCBjb2xvcjogbnVtYmVyICk6IFNxdWFyZVtdIHtcclxuXHRpZiggIWdyaWQuYm91bmRzQ2hlY2soIHBvc2l0aW9uICkgKSB7IHJldHVybiBbXTsgfVxyXG5cdGNvbnN0IHNxdWFyZSA9IGdyaWQuZ2V0KCBwb3NpdGlvbiApO1xyXG5cdGlmKCAhc3F1YXJlIHx8ICFzcXVhcmUuZW1wdHkgfHwgIXNxdWFyZS5lbmFibGVkICkgeyByZXR1cm4gW107IH1cclxuXHRmdW5jdGlvbiBkaXJlY3Rpb24oIHsgeCwgeSB9OiBQb2ludCwgZGVsdGE6IFBvaW50ICk6IFNxdWFyZVtdIHtcclxuXHRcdGNvbnN0IHNxdWFyZXMgPSBbXSBhcyBTcXVhcmVbXTtcclxuXHRcdGZvciggOyA7ICkge1xyXG5cdFx0XHR4ICs9IGRlbHRhLng7XHJcblx0XHRcdHkgKz0gZGVsdGEueTtcclxuXHRcdFx0aWYoICFncmlkLmJvdW5kc0NoZWNrKCB7IHgsIHkgfSApICkgeyByZXR1cm4gW107IH1cclxuXHRcdFx0Y29uc3Qgc3F1YXJlID0gZ3JpZC5nZXQoIHsgeCwgeSB9ICk7XHJcblx0XHRcdGlmKCAhc3F1YXJlIHx8IHNxdWFyZS5lbXB0eSB8fCAhc3F1YXJlLmVuYWJsZWQgKSB7IHJldHVybiBbXTsgfVxyXG5cdFx0XHRpZiggc3F1YXJlLmNvbG9yID09PSBjb2xvciApIHsgcmV0dXJuIHNxdWFyZXM7IH1cclxuXHRcdFx0c3F1YXJlcy5wdXNoKCBzcXVhcmUgKTtcclxuXHRcdH1cclxuXHR9XHJcblx0Y29uc3Qgc3F1YXJlcyA9IFsgc3F1YXJlIF07XHJcblx0Zm9yKCBjb25zdCBkZWx0YSBvZiBkaXJlY3Rpb25zICkge1xyXG5cdFx0c3F1YXJlcy5zcGxpY2UoIHNxdWFyZXMubGVuZ3RoLCAwLCAuLi5kaXJlY3Rpb24oIHBvc2l0aW9uLCBkZWx0YSApICk7XHJcblx0fVxyXG5cdGlmKCBzcXVhcmVzLmxlbmd0aCA8PSAxICkgeyByZXR1cm4gW107IH1cclxuXHRyZXR1cm4gc3F1YXJlcztcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUnVsZXMge1xyXG5cdHB1YmxpYyBpc1ZhbGlkKCBncmlkOiBHcmlkPFNxdWFyZT4sIHBvc2l0aW9uOiBQb2ludCwgY29sb3I6IG51bWJlciApIHtcclxuXHRcdHJldHVybiBnZXRBZmZlY3RlZFNxdWFyZXMoIGdyaWQsIHBvc2l0aW9uLCBjb2xvciApLmxlbmd0aCA+IDA7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0VmFsaWRNb3ZlcyggZ3JpZDogR3JpZDxTcXVhcmU+LCBjb2xvcjogbnVtYmVyICkge1xyXG5cdFx0Y29uc3Qgc3F1YXJlcyA9IFtdIGFzIFNxdWFyZVtdO1xyXG5cdFx0Zm9yKCBjb25zdCBzcXVhcmUgb2YgZ3JpZCApIHtcclxuXHRcdFx0aWYoIHNxdWFyZSAmJiB0aGlzLmlzVmFsaWQoIGdyaWQsIHNxdWFyZS5wb3NpdGlvbiwgY29sb3IgKSApIHsgc3F1YXJlcy5wdXNoKCBzcXVhcmUgKTsgfVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHNxdWFyZXM7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgaXNHYW1lT3ZlciggZ3JpZDogR3JpZDxTcXVhcmU+LCBjb2xvcnM6IG51bWJlcltdICkge1xyXG5cdFx0Zm9yKCBjb25zdCBjb2xvciBvZiBjb2xvcnMgKSB7XHJcblx0XHRcdGlmKCB0aGlzLmdldFZhbGlkTW92ZXMoIGdyaWQsIGNvbG9yICkubGVuZ3RoID4gMCApIHsgcmV0dXJuIGZhbHNlOyB9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBtYWtlTW92ZSggZ3JpZDogR3JpZDxTcXVhcmU+LCBwb3NpdGlvbjogUG9pbnQsIGNvbG9yOiBudW1iZXIgKSB7XHJcblx0XHRjb25zdCBzcXVhcmVzID0gZ2V0QWZmZWN0ZWRTcXVhcmVzKCBncmlkLCBwb3NpdGlvbiwgY29sb3IgKTtcclxuXHRcdGZvciggY29uc3Qgc3F1YXJlIG9mIHNxdWFyZXMgKSB7XHJcblx0XHRcdHNxdWFyZS5jb2xvciA9IGNvbG9yO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHNxdWFyZXMubGVuZ3RoO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldFNjb3JlKCBncmlkOiBHcmlkPFNxdWFyZT4sIGNvbG9yOiBudW1iZXIgKSB7XHJcblx0XHRsZXQgc2NvcmUgPSAwO1xyXG5cdFx0Zm9yKCBjb25zdCBzcXVhcmUgb2YgZ3JpZCApIHtcclxuXHRcdFx0aWYoIHNxdWFyZSAmJiBzcXVhcmUuZW5hYmxlZCAmJiBzcXVhcmUuY29sb3IgPT09IGNvbG9yICkge1xyXG5cdFx0XHRcdCsrc2NvcmU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiBzY29yZTtcclxuXHR9XHJcbn1cclxuIl19
