{"version":3,"sources":["../../ts/client/canvas.ts"],"names":[],"mappings":";;;;;;;YAAA,SAAA;gBACC,YAAuC,MAAyB;oBAAzB,WAAM,GAAN,MAAM,CAAmB;gBAAI,CAAC;gBAIrE,IAAW,KAAK;oBACf,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;oBACxB,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;gBACrB,CAAC;gBAED,IAAW,KAAK,CAAE,KAAa;oBAC9B,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;oBACxB,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;gBACtB,CAAC;gBAED,IAAW,MAAM;oBAChB,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;oBACxB,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;gBACtB,CAAC;gBAED,IAAW,MAAM,CAAE,KAAa;oBAC/B,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;oBACxB,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC;gBACvB,CAAC;gBAEM,cAAc,CAAE,EAAE,CAAC,EAAE,CAAC,EAAS;oBACrC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,EACrC,IAAI,GAAG,MAAM,CAAC,qBAAqB,EAAE,CAAC;oBACvC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAE,GAAG,CAAE,KAAK,GAAG,IAAI,CAAC,KAAK,CAAE,EAAE,CAAC,EAAE,CAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAE,GAAG,CAAE,MAAM,GAAG,IAAI,CAAC,MAAM,CAAE,EAAE,CAAC;gBAC1G,CAAC;gBAEM,cAAc,CAAE,EAAE,CAAC,EAAE,CAAC,EAAS;oBACrC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,EACrC,IAAI,GAAG,MAAM,CAAC,qBAAqB,EAAE,CAAC;oBACvC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,GAAG,CAAE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAE,CAAE,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAE,CAAC,GAAG,CAAE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAE,CAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAC1G,CAAC;aACD,CAAA;iCAEc,MAAM;QACrB,CAAC","file":"canvas.js","sourcesContent":["abstract class Canvas {\r\n\tprotected constructor( public readonly canvas: HTMLCanvasElement ) {}\r\n\r\n\tpublic abstract clear(): void;\r\n\r\n\tpublic get width() {\r\n\t\tconst { canvas } = this;\r\n\t\treturn canvas.width;\r\n\t}\r\n\r\n\tpublic set width( value: number ) {\r\n\t\tconst { canvas } = this;\r\n\t\tcanvas.width = value;\r\n\t}\r\n\r\n\tpublic get height() {\r\n\t\tconst { canvas } = this;\r\n\t\treturn canvas.height;\r\n\t}\r\n\r\n\tpublic set height( value: number ) {\r\n\t\tconst { canvas } = this;\r\n\t\tcanvas.height = value;\r\n\t}\r\n\r\n\tpublic screenToCanvas( { x, y }: Point ): Point {\r\n\t\tconst { canvas, width, height } = this,\r\n\t\t\trect = canvas.getBoundingClientRect();\r\n\t\treturn { x: ( x - rect.left ) * ( width / rect.width ), y: ( y - rect.top ) * ( height / rect.height ) };\r\n\t}\r\n\r\n\tpublic canvasToScreen( { x, y }: Point ): Point {\r\n\t\tconst { canvas, width, height } = this,\r\n\t\t\trect = canvas.getBoundingClientRect();\r\n\t\treturn { x: ( x * ( rect.width / width ) ) + rect.left, y: ( y * ( rect.height / height ) ) + rect.top };\r\n\t}\r\n}\r\n\r\nexport default Canvas;\r\n"]}