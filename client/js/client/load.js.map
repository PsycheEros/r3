{"version":3,"sources":["../../ts/client/load.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,kBAA0B,GAAW;QACpC,MAAM,CAAC,IAAI,OAAO,CAAU,CAAE,OAAO,EAAE,MAAM;YAC5C,MAAM,GAAG,GAAG,IAAI,cAAc,CAAC;YAC/B,GAAG,CAAC,kBAAkB,GAAG;gBACxB,EAAE,CAAA,CAAE,GAAG,CAAC,UAAU,KAAK,CAAE,CAAC,CAAC,CAAC;oBAAC,MAAM,CAAC;gBAAC,CAAC;gBACtC,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,GAAG,CAAC;gBACnC,EAAE,CAAA,CAAE,CAAC,IAAI,CAAC,IAAI,CAAE,MAAM,CAAE,MAAM,CAAE,CAAG,CAAC,CAAC,CAAC;oBACrC,MAAM,CAAE,IAAI,KAAK,CAAE,GAAG,MAAM,IAAI,UAAU,KAAK,GAAG,EAAE,CAAE,CAAE,CAAC;oBACzD,MAAM,CAAC;gBACR,CAAC;gBACD,OAAO,CAAE,GAAG,CAAC,YAAY,CAAE,CAAC;YAC7B,CAAC,CAAC;YACF,GAAG,CAAC,OAAO,GAAG,QAAQ,MAAM,CAAE,kBAAkB,GAAG,EAAE,CAAE,CAAC,CAAC,CAAC,CAAC;YAC3D,GAAG,CAAC,IAAI,CAAE,KAAK,EAAE,GAAG,CAAE,CAAC;YACvB,GAAG,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;QAClB,CAAC,CAAE,CAAC;IACL,CAAC;IAED,kBAAgC,GAAW;;YAC1C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAE,MAAM,QAAQ,CAAE,GAAG,CAAE,CAAE,CAAC;QAC5C,CAAC;KAAA;IAED,mBAA2B,GAAW;QACrC,MAAM,CAAC,IAAI,OAAO,CAAoB,CAAE,OAAO,EAAE,MAAM;YACtD,MAAM,GAAG,GAAG,IAAI,KAAK,CAAC;YACtB,GAAG,CAAC,MAAM,GAAG,QAAQ,OAAO,CAAE,GAAG,CAAE,CAAC,CAAC,CAAC,CAAC;YACvC,GAAG,CAAC,OAAO,GAAG,QAAQ,MAAM,CAAE,IAAI,KAAK,CAAE,kBAAkB,GAAG,EAAE,CAAE,CAAE,CAAC,CAAC,CAAC,CAAC;YACxE,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,CAAC,CAAE,CAAC;IACL,CAAC;;;;;;;QACD,CAAC","file":"load.js","sourcesContent":["export function loadText( url: string ) {\r\n\treturn new Promise<string>( ( resolve, reject ) => {\r\n\t\tconst xhr = new XMLHttpRequest;\r\n\t\txhr.onreadystatechange = () => {\r\n\t\t\tif( xhr.readyState !== 4 ) { return; }\r\n\t\t\tconst { status, statusText } = xhr;\r\n\t\t\tif( !/^2/.test( String( status ) ) ) {\r\n\t\t\t\treject( new Error( `${status} ${statusText}: ${url}` ) );\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tresolve( xhr.responseText );\r\n\t\t};\r\n\t\txhr.onerror = () => { reject( `Failed to load ${url}` ); };\r\n\t\txhr.open( 'GET', url );\r\n\t\txhr.send( null );\r\n\t} );\r\n}\r\n\r\nexport async function loadJson( url: string ) {\r\n\treturn JSON.parse( await loadText( url ) );\r\n}\r\n\r\nexport function loadImage( url: string ) {\r\n\treturn new Promise<HTMLImageElement>( ( resolve, reject ) => {\r\n\t\tconst img = new Image;\r\n\t\timg.onload = () => { resolve( img ); };\r\n\t\timg.onerror = () => { reject( new Error( `Failed to load ${url}` ) ); };\r\n\t\timg.src = url;\r\n\t} );\r\n}\r\n"]}