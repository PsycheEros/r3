{"version":3,"sources":["../../ts/shared/grid.ts"],"names":[],"mappings":";;;IAAA,kBAAsB,IAAa,EAAE,EAAE,CAAC,EAAE,CAAC,EAAS;QACnD,EAAE,CAAA,CAAE,CAAC,MAAM,CAAC,aAAa,CAAE,CAAC,CAAE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAE,CAAC,CAAG,CAAC,CAAC,CAAC;YAC/D,MAAM,IAAI,KAAK,CAAE,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAE,CAAC;QAChD,CAAC;QACD,EAAE,CAAA,CAAE,CAAC,IAAI,CAAC,WAAW,CAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAG,CAAC,CAAC,CAAC;YACpC,MAAM,IAAI,KAAK,CAAE,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAE,CAAC;QACpD,CAAC;IACF,CAAC;;;;;YAED,OAAA;gBACC,YAAoC,KAAa,EAAkB,MAAc;oBAA7C,UAAK,GAAL,KAAK,CAAQ;oBAAkB,WAAM,GAAN,MAAM,CAAQ;oBA8BzE,SAAI,GAAG,IAAI,GAAG,EAAa,CAAC;gBA9BiD,CAAC;gBAE/E,WAAW,CAAE,EAAE,CAAC,EAAE,CAAC,EAAS;oBAClC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;oBAC/B,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;gBACpD,CAAC;gBAEM,GAAG,CAAE,EAAE,CAAC,EAAE,CAAC,EAAS;oBAC1B,QAAQ,CAAE,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC;oBAC3B,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC;oBACvC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC;gBAC7B,CAAC;gBAEM,GAAG,CAAE,EAAE,CAAC,EAAE,CAAC,EAAS,EAAE,KAAQ;oBACpC,QAAQ,CAAE,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC;oBAC3B,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC;oBACvC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAE,GAAG,EAAE,KAAK,CAAE,CAAC;gBAC7B,CAAC;gBAEM,CAAC,MAAM,CAAC,QAAQ,CAAC;oBACvB;wBACC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;wBAC/B,GAAG,CAAA,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,EAAE,CAAC;4BAC9B,GAAG,CAAA,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAG,CAAC,EAAG,CAAC;gCACnC,MAAM,IAAI,CAAC,GAAG,CAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC;4BAC5B,CAAC;oBACF,CAAC;oBACD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAE,IAAI,CAAmC,CAAC;gBAC/D,CAAC;aAGD,CAAA;;QACD,CAAC","file":"grid.js","sourcesContent":["function validate<T>( grid: Grid<T>, { x, y }: Point ) {\r\n\tif( !Number.isSafeInteger( x ) || !Number.isSafeInteger( y ) ) {\r\n\t\tthrow new Error( `(${x}, ${y}) is not valid` );\r\n\t}\r\n\tif( !grid.boundsCheck( { x, y } ) ) {\r\n\t\tthrow new Error( `(${x}, ${y}) is out of bounds` );\r\n\t}\r\n}\r\n\r\nexport default class Grid<T> {\r\n\tpublic constructor( public readonly width: number, public readonly height: number ) {}\r\n\r\n\tpublic boundsCheck( { x, y }: Point ) {\r\n\t\tconst { width, height } = this;\r\n\t\treturn x >= 0 && x < width && y >= 0 && y < height;\r\n\t}\r\n\r\n\tpublic get( { x, y }: Point ) {\r\n\t\tvalidate( this, { x, y } );\r\n\t\tconst key = JSON.stringify( { x, y } );\r\n\t\treturn this.data.get( key );\r\n\t}\r\n\r\n\tpublic set( { x, y }: Point, value: T ) {\r\n\t\tvalidate( this, { x, y } );\r\n\t\tconst key = JSON.stringify( { x, y } );\r\n\t\tthis.data.set( key, value );\r\n\t}\r\n\r\n\tpublic [Symbol.iterator]() {\r\n\t\tfunction *iterator( this: Grid<T> ) {\r\n\t\t\tconst { width, height } = this;\r\n\t\t\tfor( let x = 0; x < width; ++x )\r\n\t\t\tfor( let y = 0; y < height; ++ y ) {\r\n\t\t\t\tyield this.get( { x, y } );\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn iterator.call( this ) as IterableIterator<T|undefined>;\r\n\t}\r\n\r\n\tprivate data = new Map<string, T>();\r\n}\r\n"]}