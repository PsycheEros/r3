{"version":3,"sources":["../../ts/shared/board.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;YAIA,QAAA;gBACC,YAAoC,KAAa,EAAkB,MAAc;oBAA7C,UAAK,GAAL,KAAK,CAAQ;oBAAkB,WAAM,GAAN,MAAM,CAAQ;oBAChF,MAAM,IAAI,GAAG,IAAI,cAAI,CAAU,KAAK,EAAE,MAAM,CAAE,EAC7C,UAAU,GAAS,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAC5C,UAAU,GAAS,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAC1C,MAAM,GAAG,IAAI,gBAAM,CAClB,CAAC,EACD,CAAC,EACD,KAAK,GAAG,CAAE,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAE,GAAG,UAAU,CAAC,KAAK,EAClE,MAAM,GAAG,CAAE,UAAU,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAE,GAAG,UAAU,CAAC,MAAM,CACtE,CAAC;oBACH,GAAG,CAAA,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,EAAE,CAAC;wBAC9B,GAAG,CAAA,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAG,CAAC;4BAClC,MAAM,QAAQ,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,EACxB,MAAM,GAAG,IAAI,gBAAM,CAClB,CAAC,GAAG,CAAE,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAE,GAAG,UAAU,CAAC,KAAK,EAC9D,CAAC,GAAG,CAAE,UAAU,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAE,GAAG,UAAU,CAAC,MAAM,EACjE,UAAU,CAAC,KAAK,EAChB,UAAU,CAAC,MAAM,CACjB,CAAC;4BACH,IAAI,CAAC,GAAG,CAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,gBAAM,CAAE,QAAQ,EAAE,MAAM,CAAE,CAAE,CAAC;wBACtD,CAAC;oBACD,MAAM,CAAC,MAAM,CAAE,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAE,CAAC;gBACzC,CAAC;gBAEM,KAAK;oBACX,GAAG,CAAA,CAAE,MAAM,MAAM,IAAI,IAAK,CAAC,CAAC,CAAC;wBAC5B,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;wBACtB,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;oBACrB,CAAC;gBACF,CAAC;gBAEM,CAAC,MAAM,CAAC,QAAQ,CAAC;oBACvB,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;oBACtB,MAAM,CAAC,IAAI,CAAE,MAAM,CAAC,QAAQ,CAAE,EAA8B,CAAC;gBAC9D,CAAC;gBAEM,OAAO,CAAE,EAAS;oBACxB,GAAG,CAAA,CAAE,MAAM,MAAM,IAAI,IAAK,CAAC,CAAC,CAAC;wBAC5B,EAAE,CAAA,CAAE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAE,EAAE,CAAG,CAAC,CAAC,CAAC;4BAClC,MAAM,CAAC,MAAM,CAAC;wBACf,CAAC;oBACF,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBACb,CAAC;aAID,CAAA;;QACD,CAAC","file":"board.js","sourcesContent":["import Grid from './grid';\r\nimport Bounds from './bounds';\r\nimport Square from './square';\r\n\r\nexport default class Board {\r\n\tpublic constructor( public readonly width: number, public readonly height: number ) {\r\n\t\tconst grid = new Grid<Square>( width, height ),\r\n\t\t\tsquareSize: Size = { width: 64, height: 64 },\r\n\t\t\tgutterSize: Size = { width: 4, height: 4 },\r\n\t\t\tbounds = new Bounds(\r\n\t\t\t\t0,\r\n\t\t\t\t0,\r\n\t\t\t\twidth * ( squareSize.width + gutterSize.width ) + gutterSize.width,\r\n\t\t\t\theight * ( squareSize.height + gutterSize.height ) + gutterSize.height\r\n\t\t\t);\r\n\t\tfor( let x = 0; x < width; ++x )\r\n\t\tfor( let y = 0; y < height; ++y ) {\r\n\t\t\tconst position = { x, y },\r\n\t\t\t\tbounds = new Bounds(\r\n\t\t\t\t\tx * ( squareSize.width + gutterSize.width ) + gutterSize.width,\r\n\t\t\t\t\ty * ( squareSize.height + gutterSize.height ) + gutterSize.height,\r\n\t\t\t\t\tsquareSize.width,\r\n\t\t\t\t\tsquareSize.height\r\n\t\t\t\t);\r\n\t\t\tgrid.set( { x, y }, new Square( position, bounds ) );\r\n\t\t}\r\n\t\tObject.assign( this, { grid, bounds } );\r\n\t}\r\n\r\n\tpublic reset() {\r\n\t\tfor( const square of this ) {\r\n\t\t\tsquare.enabled = true;\r\n\t\t\tsquare.color = null;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic [Symbol.iterator]() {\r\n\t\tconst { grid } = this;\r\n\t\treturn grid[ Symbol.iterator ]() as IterableIterator<Square>;\r\n\t}\r\n\r\n\tpublic hitTest( pt: Point ): Square|null {\r\n\t\tfor( const square of this ) {\r\n\t\t\tif( square.bounds.hitTest( pt ) ) {\r\n\t\t\t\treturn square;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic bounds: Bounds;\r\n\tpublic grid: Grid<Square>;\r\n}\r\n"]}