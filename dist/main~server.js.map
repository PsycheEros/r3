{"version":3,"sources":["webpack:///./src/server/main.ts","webpack:///./src/server/metadata.field.ts","webpack:///./src/server/game.entity.ts","webpack:///./src/server/user.entity.ts","webpack:///./src/server/game-state.entity.ts","webpack:///./src/server/room.entity.ts","webpack:///./src/server/login.entity.ts","webpack:///./src/server/session.entity.ts","webpack:///./src/server/app.ts","webpack:///./src/validation.ts","webpack:///./src/server/point.field.ts","webpack:///./src/server/size.field.ts","webpack:///./src/rule-sets.ts","webpack:///./src/board.ts","webpack:///./src/grid.ts","webpack:///./src/bounds.ts","webpack:///./src/square.ts","webpack:///./src/server/socket.ts","webpack:///./src/server/health.endpoint.ts","webpack:///./src/server/security.ts"],"names":["__webpack_require__","_typeorm","_rxjs","_operators","_rxjs2","_validation","_game","_gameState","_login","_room","_session","_user","_ruleSets","_socket","_config","_colors","_security","_v","_interopRequireDefault","_moment","_assert","getSocket","sessionId","Object","entries","io","of","connected","filter","id","socket","map","async","getJoinedRoomIds","manager","findByIds","RoomEntity","keys","rooms","room","joinRoom","roomId","Promise","resolve","reject","join","err","flushJoinedRooms","flushUpdate","nick","findOne","SessionEntity","select","statusMessage","roomIds","to","emit","flushRooms","find","toRoom","leaveRoom","leave","message","transaction","game","GameEntity","gameId","relations","toGame","newGame","ruleSet","rules","ruleSetMap","get","default","gameEntity","create","colors","mask","v","size","_objectSpread","save","saveGameStates","update","all","gameStates","gs","index","gameState","GameStateEntity","turn","data","String","lastMove","m","fn","createConnection","connectionOptions","entities","LoginEntity","UserEntity","interval","duration","cleanup","checkSeconds","asMilliseconds","subscribe","removed","in","clients","length","expires","isSameOrBefore","console","log","remove","add","expireSeconds","fromNow","toDate","cleanupRooms","connections","fromNodeEvent","disconnecting","pipe","take","disconnected","handleCallbackEvent","eventName","result","Subject","takeUntil","mergeMap","value","callback","tap","[object Object]","error","onErrorResumeNext","delete","commands","help","isValidNick","Error","previousNick","session","existingSession","count","existingUser","userId","nicks","s","sort","position","roomEntity","prevGameState","slice","nextGameState","makeMove","isGameOver","scores","Array","from","_","color","displayName","score","getScore","c1","c2","r1","compareScores","localeCompare","bestScore","winners","startsWith","raw","cmd","params","trim","split","hasOwnProperty","includes","ex","command","user","chatMessage","name","password","isValidRoomName","passwordHash","hashPassword","createRoom","checkPassword","MetadataField","__decorate","CreateDateColumn","Date","UpdateDateColumn","_metadata","_lodash","_size","sortBy","parseInt","x","y","PrimaryGeneratedColumn","Column","OneToMany","cascade","SizeField","OneToOne","nullable","exports","Entity","unique","login","JoinColumn","_point","PrimaryColumn","type","ManyToOne","PointFieldNull","hasPassword","Index","userEntity","sessions","_expressCsp","_path","_compression","_http","_shutDown","app","_express","key","appSettings","set","use","static","__dirname","extend","cspPolicy","json","server","Server","listen","shutDown","address","port","process","pid","shuttingDown","close","validation","maxNickLength","test","roomName","maxRoomNameLength","PointField","SizeFieldNull","directions","getAffectedSquares","board","boundsCheck","square","empty","enabled","direction","delta","squares","push","RulesStandard","this","boardSize","freeze","width","height","_board","Board","fromGame","score1","score2","points","point","isValid","getValidMoves","prevTurn","prevIndex","getData","i","t","reset","getMask","rulesStandard","rulesReversed","ruleSets","Map","_bounds","_square","bounds","Bounds","grid","_grid","Grid","squareSize","gutterSize","Square","assign","sq","zip","setData","setMask","Symbol","iterator","pt","hitTest","validate","Number","isSafeInteger","JSON","stringify","call","left","top","bottom","right","center","n","ne","e","se","sw","w","nw","_ioredis","_app","pub","redis","db","dropBufferSupport","quit","engine","adapter","pubClient","subClient","req","res","writeHead","end","salt","_util","promisify","_bcryptNodejs","genSalt","hash","compare"],"mappings":"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","file":"main~server.js","sourcesContent":["import './error-handler';\nimport './polyfills';\n\nimport { createConnection, EntityManager } from 'typeorm';\nimport { Subject, interval, of } from 'rxjs';\nimport { onErrorResumeNext, mergeMap, take, tap, takeUntil } from 'rxjs/operators';\nimport { fromNodeEvent } from './rxjs';\nimport { isValidNick, isValidRoomName } from 'src/validation';\nimport { GameEntity } from './game.entity';\nimport { GameStateEntity } from './game-state.entity';\nimport { LoginEntity } from './login.entity';\nimport { RoomEntity } from './room.entity';\nimport { SessionEntity } from './session.entity';\nimport { UserEntity } from './user.entity';\nimport { ruleSetMap } from 'src/rule-sets';\nimport { io } from './socket';\nimport { connectionOptions, cleanup as cleanupConfig } from 'data/config.yaml';\nimport { colors } from 'data/colors.yaml';\nimport { hashPassword, checkPassword } from './security';\n\nimport uuid from 'uuid/v4';\nimport moment from 'moment';\nimport assert from 'assert';\n\ntype CallbackEvent<T = {}, U = {}> = [ T, ( error: Error|null, value: U|null ) => void ];\n\n\n\nfunction getSocket( sessionId: string ) {\n\treturn Object.entries( io.of( '/' ).connected )\n\t.filter( ( [ id, socket ] ) => id === sessionId )\n\t.map( ( [ id, socket ] ) => socket )[ 0 ]\n\t|| null;\n}\n\nasync function getJoinedRoomIds( manager: EntityManager, sessionId: string ) {\n\tconst socket = getSocket( sessionId );\n\tif( !socket ) return [];\n\tconst rooms = await manager.findByIds( RoomEntity, Object.keys( socket.rooms ) );\n\treturn rooms.map( room => room.id );\n}\n\nasync function joinRoom( manager: EntityManager, roomId: string, sessionId: string ) {\n\tconst socket = getSocket( sessionId );\n\tawait new Promise( ( resolve, reject ) => {\n\t\tsocket.join( roomId, err => {\n\t\t\tif( err ) { reject( err ); }\n\t\t\telse { resolve(); }\n\t\t} );\n\t} );\n\tawait flushJoinedRooms( manager, sessionId );\n\tawait flushUpdate( manager, roomId, sessionId );\n\tconst { nick } = await manager.findOne( SessionEntity, sessionId, { select: [ 'nick' ] } );\n\tawait statusMessage( roomId, `${nick} has joined the room.` );\n}\n\nasync function flushJoinedRooms( manager: EntityManager, sessionId: string ) {\n\tconst roomIds = await getJoinedRoomIds( manager, sessionId );\n\tio.to( sessionId ).emit( 'joinedRooms', roomIds );\n}\n\nasync function flushRooms( manager: EntityManager, sessionId?: string ) {\n\tconst rooms = ( await manager.find( RoomEntity ) ).map( RoomEntity.toRoom );\n\tconst emitter = sessionId ? io.to( sessionId ) : io;\n\temitter.emit( 'rooms', rooms );\n}\n\nasync function leaveRoom( manager: EntityManager, sessionId: string, roomId: string ) {\n\tconst socket = getSocket( sessionId );\n\tawait new Promise( ( resolve, reject ) => {\n\t\tsocket.leave( roomId, err => {\n\t\t\tif( err ) {\n\t\t\t\treject( err );\n\t\t\t} else {\n\t\t\t\tresolve();\n\t\t\t}\n\t\t} );\n\t} );\n\tawait flushJoinedRooms( manager, sessionId );\n\tconst { nick } = await manager.findOne( SessionEntity, sessionId, { select: [ 'nick' ] } );\n\tawait statusMessage( roomId, `${nick} has left the room.` );\n}\n\nfunction statusMessage( message: string, roomId: string, sessionId?: string ) {\n\tio.to( sessionId || roomId ).emit( 'message', { roomId, message } );\n\treturn true;\n}\n\nfunction chatMessage( user: string, message: string, roomId: string ) {\n\tio.to( roomId ).emit( 'message', { roomId, user, message } );\n\treturn true;\n}\n\nasync function flushUpdate( manager: EntityManager, roomId: string, sessionId?: string ) {\n\tawait transaction( manager, async manager => {\n\t\tconst room = await manager.findOne( RoomEntity, roomId);\n\t\tif( !room ) return;\n\t\tconst game = await manager.findOne( GameEntity, room.gameId, { relations: [ 'gameStates' ] } );\n\t\tif( !game ) return;\n\t\tio.to( sessionId || room.id ).emit( 'update', GameEntity.toGame( game ) );\n\t} );\n}\n\nasync function cleanupRooms( manager: EntityManager ) {\n\tawait transaction( manager, async manager => {\n\t\tlet removed = 0;\n\t\tawait Promise.all(\n\t\t\t( await manager.find( RoomEntity, { select: [ 'id', 'expires' ] } ) )\n\t\t\t.map( async room => {\n\t\t\t\tconst clients = await new Promise<string[]>( ( resolve, reject ) => {\n\t\t\t\t\tio.in( room.id ).clients( ( err, clients ) => {\n\t\t\t\t\t\tif( err ) reject( err );\n\t\t\t\t\t\telse resolve( clients );\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t\tif( clients.length === 0 ) {\n\t\t\t\t\tif( room.expires ) {\n\t\t\t\t\t\tif( moment( room.expires ).isSameOrBefore() ) {\n\t\t\t\t\t\t\tconsole.log( `Deleting room ${room.id}...` );\n\t\t\t\t\t\t\tawait manager.remove( room );\n\t\t\t\t\t\t\t++removed;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst expires = moment().add( cleanupConfig.rooms.expireSeconds, 's' );\n\t\t\t\t\t\tconsole.log( `Queuing room ${room.id} for deletion ${expires.fromNow()}...` );\n\t\t\t\t\t\troom.expires = expires.toDate();\n\t\t\t\t\t\tawait manager.save( room );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} )\n\t\t);\n\t\tif( removed ) await flushRooms( manager );\n\t} );\n}\n\nasync function newGame( manager: EntityManager, roomId: string, ruleSet: RuleSet ) {\n\tstatusMessage( 'New game', roomId );\n\tconst rules = ruleSetMap.get( ruleSet );\n\treturn await transaction( manager, async manager => {\n\t\tconst game = rules.newGame( uuid() );\n\t\tconst gameEntity = await manager.create( GameEntity, {\n\t\t\tid: game.gameId,\n\t\t\tcolors: [ ...game.colors ],\n\t\t\tmask: game.mask.map( v => v ? '1' : '0' ).join( '' ),\n\t\t\tsize: { ...game.size },\n\t\t\truleSet: game.ruleSet\n\t\t} );\n\t\tawait manager.save( gameEntity );\n\t\tawait saveGameStates( manager, game );\n\t\tawait manager.update( RoomEntity, roomId, { gameId: gameEntity.id } );\n\t\tflushRooms( manager );\n\t\tflushUpdate( manager, roomId );\n\t\treturn game;\n\t} );\n}\n\nasync function saveGameStates( manager: EntityManager, game: Game ) {\n\treturn await transaction( manager, async manager => {\n\t\tawait Promise.all(\n\t\t\tgame.gameStates.map( async ( gs, index ) => {\n\t\t\t\tlet gameState = await manager.findOne( GameStateEntity, { gameId: game.gameId, index } );\n\t\t\t\tif( !gameState ) gameState = await manager.create( GameStateEntity, { gameId: game.gameId, index } );\n\t\t\t\tgameState.turn = gs.turn;\n\t\t\t\tgameState.data = gs.data.map( v => ( v == null ) ? 'x' : String(v) );\n\t\t\t\tgameState.lastMove = { ...gs.lastMove };\n\t\t\t\tawait manager.save( gameState );\n\t\t\t} )\n\t\t);\n\t} );\n}\n\nconst transaction = ( () => {\n\tlet m: EntityManager = null;\n\treturn ( <T>( manager: EntityManager, fn: ( manager: EntityManager ) => Promise<T> ) => {\n\t\tassert( manager );\n\t\tif( m ) {\n\t\t\treturn fn( m );\n\t\t} else {\n\t\t\treturn manager.transaction<T>( async manager => {\n\t\t\t\tm = manager;\n\t\t\t\ttry {\n\t\t\t\t\treturn await fn( m );\n\t\t\t\t} finally {\n\t\t\t\t\tm = null;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t} );\n} )();\n\nasync function createRoom( manager: EntityManager, sessionId: string, name: string, password: string ) {\n\tif( !isValidRoomName( name ) ) throw new Error( 'Invalid room name.' );\n\treturn await transaction( manager, async manager => {\n\t\tconst roomEntity =\n\t\t\tawait manager.create( RoomEntity, {\n\t\t\t\tname,\n\t\t\t\tpasswordHash: await hashPassword( password )\n\t\t\t} );\n\t\tawait manager.save( roomEntity );\n\t\tawait joinRoom( manager, roomEntity.id, sessionId );\n\t\tawait newGame( manager, roomEntity.id, RuleSet.standard );\n\t\treturn roomEntity;\n\t} );\n}\n\nasync function makeMove( manager: EntityManager, roomId: string, position: Point ) {\n\treturn await transaction( manager, async manager => {\n\t\tconst roomEntity = await manager.findOne( RoomEntity, roomId );\n\t\tconst gameEntity = await manager.findOne( GameEntity, roomEntity.gameId, { relations: [ 'gameStates' ] } );\n\t\tconst rules = ruleSetMap.get( gameEntity.ruleSet );\n\t\tlet game = GameEntity.toGame( gameEntity );\n\t\tconst prevGameState = game.gameStates.slice( -1 )[ 0 ];\n\t\tconst nextGameState = rules.makeMove( game, prevGameState, position );\n\t\tif( !nextGameState ) {\n\t\t\treturn false;\n\t\t}\n\t\tgame = {\n\t\t\t...game,\n\t\t\tgameStates: [ ...game.gameStates, nextGameState ]\n\t\t};\n\t\tawait saveGameStates( manager, game );\n\t\tif( rules.isGameOver( game, nextGameState ) ) {\n\t\t\tconst scores =\n\t\t\tArray.from( { length: rules.colors } )\n\t\t\t.map( ( _, color ) => ( {\n\t\t\t\tcolor: colors[ game.colors[ color ] ].displayName,\n\t\t\t\tscore: rules.getScore( game, nextGameState, color )\n\t\t\t} ) );\n\t\t\tscores.sort( ( c1, c2 ) => {\n\t\t\t\tconst r1 = rules.compareScores( c1.score, c2.score );\n\t\t\t\treturn ( r1 === 0 ) ? c1.color.localeCompare( c2.color ) : r1;\n\t\t\t} );\n\t\t\tconst bestScore = scores[ 0 ].score;\n\t\t\tconst winners = scores.filter( ( { score } ) => rules.compareScores( score, bestScore ) );\n\t\t\tlet message: string;\n\t\t\tif( winners.length !== 1 ) {\n\t\t\t\tmessage = 'Draw game.';\n\t\t\t} else {\n\t\t\t\tmessage = `${winners[ 0 ].color} wins.`;\n\t\t\t}\n\t\t\tawait statusMessage( `${message}:\\n${scores.map(({color, score})=>`${color}: ${score}`).join('\\n')}`, roomId );\n\t\t}\n\t\tawait flushUpdate( manager, roomId );\n\t\treturn true;\n\t} );\n}\n\n( async () => {\n\ttry {\n\t\tconst { manager } = await createConnection( {\n\t\t\t...connectionOptions,\n\t\t\tentities: [ GameEntity, GameStateEntity, LoginEntity, RoomEntity, SessionEntity, UserEntity ]\n\t\t} );\n\n\t\tinterval( moment.duration( cleanupConfig.rooms.checkSeconds, 's' ).asMilliseconds() )\n\t\t.subscribe( async () => {\n\t\t\tcleanupRooms( manager );\n\t\t} );\n\n\t\tlet connections = 0;\n\n\t\tfromNodeEvent<SocketIO.Socket>( io, 'connection' )\n\t\t.subscribe( async socket => {\n\t\t\tconsole.log( `User connected, ${++connections} connected, ${socket.id}` );\n\n\t\t\tconst disconnecting = fromNodeEvent( socket, 'disconnecting' ).pipe( take( 1 ) );\n\t\t\tconst disconnected = fromNodeEvent( socket, 'disconnect' ).pipe( take( 1 ) );\n\n\t\t\tfunction handleCallbackEvent<T extends object = {}, U = {}>( eventName: string, fn: ( value: T & { manager: EntityManager } ) => PromiseLike<U|void> ) {\n\t\t\t\tconst result = new Subject<U>();\n\t\t\t\tfromNodeEvent<CallbackEvent<T, U>>( socket, eventName )\n\t\t\t\t.pipe(\n\t\t\t\t\ttakeUntil( disconnected ),\n\t\t\t\t\tmergeMap<CallbackEvent<T, U>, {}>( ( [ value, callback ] ) =>\n\t\t\t\t\t\tof( value )\n\t\t\t\t\t\t.pipe(\n\t\t\t\t\t\t\tmergeMap( value => transaction( manager, async manager => fn( { manager, ...( value as any ) } ) ) ),\n\t\t\t\t\t\t\ttap( {\n\t\t\t\t\t\t\t\tnext( value ) {\n\t\t\t\t\t\t\t\t\tcallback( null, ( value == null ) ? {} as any : value );\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terror( err ) {\n\t\t\t\t\t\t\t\t\tconsole.error( err );\n\t\t\t\t\t\t\t\t\tcallback( ( err == null ) ? {} : err.message, null );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} ),\n\t\t\t\t\t\t\tonErrorResumeNext()\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t\t.subscribe( result );\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tconst sessionId = socket.id;\n\t\t\tawait manager.save(\n\t\t\t\tawait manager.create( SessionEntity, { id: sessionId, nick: 'Guest' } )\n\t\t\t);\n\n\t\t\tdisconnecting.subscribe( async () => {\n\t\t\t\tawait transaction( manager, async manager => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst roomIds = await getJoinedRoomIds( manager, sessionId );\n\t\t\t\t\t\tif( roomIds.length > 0 ) {\n\t\t\t\t\t\t\tconst { nick } = await manager.findOne( SessionEntity, sessionId, { select: [ 'nick' ] } );\n\t\t\t\t\t\t\tawait Promise.all(\n\t\t\t\t\t\t\t\troomIds.map( roomId => statusMessage( `${nick} has disconnected.`, roomId ) )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tmanager.delete( SessionEntity, sessionId );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\tdisconnected.subscribe( async () => {\n\t\t\t\tconsole.log( `User disconnected, ${--connections} connected` );\n\t\t\t} );\n\n\n\t\t\tconst commands = {\n\t\t\t\tasync help( roomId: string ) {\n\t\t\t\t\tawait statusMessage( `Available commands:\n/?\n/help\n/nick <name>\n/quit\n/who\n`, roomId, sessionId );\n\t\t\t\t},\n\t\t\t\tasync '?'( roomId: string ) {\n\t\t\t\t\tawait commands.help( roomId );\n\t\t\t\t},\n\t\t\t\tasync nick( roomId: string, nick: string ) {\n\t\t\t\t\tif( !isValidNick( nick ) ) throw new Error( 'Invalid nick.' );\n\n\t\t\t\t\tlet previousNick: string;\n\t\t\t\t\tawait transaction( manager, async manager => {\n\t\t\t\t\t\tconst session = await manager.findOne( SessionEntity, sessionId );\n\t\t\t\t\t\tconst existingSession = ( await manager.count( SessionEntity, { nick } ) ) > 0;\n\t\t\t\t\t\tconst existingUser = ( await manager.count( UserEntity, { nick } ) ) > 0;\n\t\t\t\t\t\tif( existingSession || existingUser ) {\n\t\t\t\t\t\t\tthrow new Error( 'Nick is already in use.' );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpreviousNick = session.nick;\n\t\t\t\t\t\tsession.nick = nick;\n\t\t\t\t\t\tif( session.userId ) {\n\t\t\t\t\t\t\tawait manager.update( UserEntity, session.userId, { nick } );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tawait manager.save( session );\n\t\t\t\t\t} );\n\n\t\t\t\t\tawait statusMessage( `${previousNick} is now known as ${nick}.`, roomId );\n\t\t\t\t},\n\t\t\t\tasync quit( roomId: string ) {\n\t\t\t\t\tawait leaveRoom( manager, sessionId, roomId );\n\t\t\t\t},\n\t\t\t\tasync who( roomId: string ) {\n\t\t\t\t\tconst clients = await new Promise<string[]>( ( resolve, reject ) => {\n\t\t\t\t\t\tio.in( roomId ).clients( ( err, clients ) => {\n\t\t\t\t\t\t\tif( err ) reject( err );\n\t\t\t\t\t\t\telse resolve( clients );\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t\tconst sessions = await manager.findByIds( SessionEntity, clients );\n\t\t\t\t\tconst nicks = sessions.map( s => s.nick ).sort();\n\t\t\t\t\tawait statusMessage( `Users in room:\\n${nicks.join('\\n')}`, roomId, sessionId );\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tasync function command( roomId: string, raw: string ) {\n\t\t\t\tconst [ cmd, ...params ] = raw.trim().split( /\\s+/g );\n\t\t\t\ttry {\n\t\t\t\t\tif( !commands.hasOwnProperty( cmd ) ) throw new Error( 'Unknown command.' );\n\t\t\t\t\tconst joinedRoomIds = await getJoinedRoomIds( manager, sessionId );\n\t\t\t\t\tif( !joinedRoomIds.includes( roomId ) ) throw new Error( 'Not in room.' );\n\t\t\t\t\tawait commands[ cmd ]( roomId, ...params );\n\t\t\t\t} catch( ex ) {\n\t\t\t\t\tif( ex && ex.message ) {\n\t\t\t\t\t\tawait statusMessage( ex.message, roomId, sessionId );\n\t\t\t\t\t}\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thandleCallbackEvent<{ roomId: string; position: Point; }>( 'makeMove', async ( { roomId, position } ) => {\n\t\t\t\tif( !await makeMove( manager, roomId, position ) ) throw new Error( 'Failed to make move.' );\n\t\t\t} );\n\n\t\t\thandleCallbackEvent<{ roomId: string; ruleSet: RuleSet }>( 'newGame', async ( { roomId, ruleSet } ) => {\n\t\t\t\tconst game = await newGame( manager, roomId, ruleSet );\n\t\t\t\tif( !game ) throw new Error( 'Failed to create game.' );\n\t\t\t\treturn { game };\n\t\t\t} );\n\n\t\t\thandleCallbackEvent<{ roomId: string; message: string; }>( 'sendMessage', async ( { roomId, message } ) => {\n\t\t\t\tif( message.startsWith( '/' ) ) {\n\t\t\t\t\tawait command( roomId, message.slice( 1 ) );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst { nick } = await manager.findOne( SessionEntity, sessionId, { select: [ 'nick' ] } );\n\t\t\t\tif( !await chatMessage( nick, message, roomId ) ) throw new Error( 'Failed to send message.' );\n\t\t\t} );\n\n\t\t\thandleCallbackEvent<{ name: string; password: string; }>( 'createRoom', async ( { manager, name, password } ) => {\n\t\t\t\tconst roomEntity = await createRoom( manager, sessionId, name, password );\n\t\t\t\treturn RoomEntity.toRoom( roomEntity );\n\t\t\t} );\n\n\t\t\thandleCallbackEvent<{ roomId: string; password: string; }>( 'joinRoom', async ( { manager, roomId, password } ) => {\n\t\t\t\tconst roomEntity = await manager.findOne( RoomEntity, roomId );\n\t\t\t\tif( !roomEntity ) throw new Error( 'Failed to join room.' );\n\t\t\t\tif( roomEntity.passwordHash ) {\n\t\t\t\t\tif( !password ) throw new Error( 'Room requires a password.' );\n\t\t\t\t\tif( !await checkPassword( password, roomEntity.passwordHash ) ) throw new Error( 'Incorrect password.' );\n\t\t\t\t}\n\t\t\t\tmanager.update( RoomEntity, roomId, { expires: null } );\n\t\t\t\tawait joinRoom( manager, roomId, sessionId );\n\t\t\t\treturn RoomEntity.toRoom( roomEntity );\n\t\t\t} );\n\n\t\t\thandleCallbackEvent<{ roomId: string; }>( 'leaveRoom', async ( { manager, roomId } ) => {\n\t\t\t\tawait leaveRoom( manager, sessionId, roomId );\n\t\t\t} );\n\n\t\t\tflushRooms( manager, sessionId );\n\t\t} );\n\t} catch( ex ) {\n\t\tconsole.error( ex );\n\t}\n} )();\n","import { CreateDateColumn, UpdateDateColumn } from 'typeorm';\n\nexport class MetadataField {\n\t@CreateDateColumn( { select: false } )\n\tpublic created: Date;\n\n\t@UpdateDateColumn( { select: false } )\n\tpublic updated: Date;\n}\n","import { Entity, PrimaryGeneratedColumn, OneToOne, OneToMany, Column, CreateDateColumn, UpdateDateColumn } from 'typeorm';\nimport { GameStateEntity } from './game-state.entity';\nimport { RoomEntity } from './room.entity';\nimport { MetadataField } from './metadata.field';\nimport { sortBy } from 'lodash';\nimport { SizeField } from 'server/size.field';\n\n@Entity( 'Game' )\nexport class GameEntity {\n\t@PrimaryGeneratedColumn( 'uuid' )\n\tpublic id: string;\n\n\t@Column( () => MetadataField )\n\tpublic meta: MetadataField;\n\n\t@Column( 'simple-array' )\n\tpublic colors: string[];\n\n\t@OneToMany( () => GameStateEntity, gameState => gameState.game, {\n\t\tcascade: true\n\t} )\n\tpublic gameStates: GameStateEntity[];\n\n\t@Column( () => SizeField )\n\tpublic size: SizeField;\n\n\t@Column()\n\tpublic mask: string;\n\n\t@OneToOne( () => RoomEntity, { nullable: true } )\n\tpublic room: RoomEntity;\n\n\t@Column()\n\tpublic ruleSet: RuleSet;\n\n\tstatic toGame( gameEntity: GameEntity ): Game {\n\t\tconst gameStates = sortBy( gameEntity.gameStates, gs => gs.index );\n\t\treturn {\n\t\t\tgameId: gameEntity.id,\n\t\t\tsize: { ...gameEntity.size },\n\t\t\tcolors: [ ...gameEntity.colors ],\n\t\t\tmask: gameEntity.mask.split( '' ).map( m => m === '1' ),\n\t\t\truleSet: gameEntity.ruleSet,\n\t\t\tgameStates: gameStates.map( gs => ( {\n\t\t\t\tindex: gs.index,\n\t\t\t\tturn: gs.turn,\n\t\t\t\tdata: gs.data.map( v => ( v === 'x' ) ? null : parseInt( v, 10 ) ),\n\t\t\t\tlastMove: ( gs.lastMove.x == null || gs.lastMove.y == null ) ? null : { ...gs.lastMove }\n\t\t\t} ) )\n\t\t};\n\t}\n}\n","import { Entity, Column, PrimaryGeneratedColumn, OneToMany, OneToOne, JoinColumn, CreateDateColumn } from 'typeorm';\nimport { LoginEntity } from './login.entity';\nimport { SessionEntity } from './session.entity';\nimport { MetadataField } from 'server/metadata.field';\n\n@Entity( 'User' )\nexport class UserEntity {\n\t@PrimaryGeneratedColumn( 'uuid' )\n\tpublic id: string;\n\n\t@Column( () => MetadataField )\n\tpublic meta: MetadataField;\n\n\t@Column( { unique: true } )\n\tpublic nick: string;\n\n\t@OneToMany( () => SessionEntity, session => session.user )\n\tpublic sessions: SessionEntity[];\n\n\t@OneToOne( () => LoginEntity, login => login.user, {\n\t\tcascade: true\n\t} )\n\t@JoinColumn()\n\tpublic login: LoginEntity;\n}\n","import { Entity, Column, PrimaryColumn, ManyToOne, CreateDateColumn } from 'typeorm';\nimport { GameEntity } from './game.entity';\nimport { PointFieldNull } from './point.field';\nimport { MetadataField } from './metadata.field';\n\n@Entity( 'GameState' )\nexport class GameStateEntity {\n\t@PrimaryColumn( 'uuid' )\n\tpublic gameId: string;\n\n\t@PrimaryColumn( { type: 'integer' } )\n\tpublic index: number;\n\n\t@Column( () => MetadataField )\n\tpublic meta: MetadataField;\n\n\t@ManyToOne( () => GameEntity, game => game.gameStates )\n\tpublic game: GameEntity;\n\n\t@Column( { type: 'integer', nullable: true } )\n\tpublic turn: number|null;\n\n\t@Column( () => PointFieldNull )\n\tpublic lastMove: PointFieldNull;\n\n\t@Column( { type: 'simple-array' } )\n\tpublic data: string[];\n}\n","import { Entity, Column, PrimaryGeneratedColumn, OneToOne, JoinColumn, JoinTable, CreateDateColumn } from 'typeorm';\nimport { GameEntity } from './game.entity';\nimport { MetadataField } from 'server/metadata.field';\n\n@Entity( 'Room' )\nexport class RoomEntity {\n\t@PrimaryGeneratedColumn( 'uuid' )\n\tpublic id: string;\n\n\t@Column( () => MetadataField )\n\tpublic meta: MetadataField;\n\n\t@Column()\n\tpublic name: string;\n\n\t@Column( { nullable: true } )\n\tpublic expires: Date;\n\n\t@Column()\n\tpublic passwordHash: string;\n\n\t@Column( 'uuid', { nullable: true} )\n\tpublic gameId: string;\n\n\t@OneToOne( () => GameEntity, { nullable: true } )\n\t@JoinColumn()\n\tpublic game: GameEntity;\n\n\tpublic static toRoom( roomEntity: RoomEntity ) {\n\t\treturn { roomId: roomEntity.id, gameId: roomEntity.gameId, name: roomEntity.name, hasPassword: !!roomEntity.passwordHash };\n\t}\n}\n","import { Entity, Index, Column, PrimaryGeneratedColumn, OneToOne, CreateDateColumn } from 'typeorm';\nimport { UserEntity } from './user.entity';\nimport { MetadataField } from 'server/metadata.field';\n\n@Entity( 'Login' )\nexport class LoginEntity {\n\t@PrimaryGeneratedColumn( 'uuid' )\n\tpublic id: string;\n\n\t@Column( () => MetadataField )\n\tpublic meta: MetadataField;\n\n\t@Column()\n\t@Index( { unique: true } )\n\tpublic username: string;\n\n\t@Column()\n\tpublic passwordHash: string;\n\n\t@OneToOne( () => UserEntity, user => user.login )\n\tpublic user: UserEntity;\n\n\t@Column( 'uuid', { nullable: true } )\n\tpublic userId: string;\n}\n","import { Entity, Column, PrimaryColumn, ManyToMany, ManyToOne, CreateDateColumn } from 'typeorm';\nimport { UserEntity } from './user.entity';\nimport { MetadataField } from 'server/metadata.field';\n\n@Entity( 'Session' )\nexport class SessionEntity {\n\t@PrimaryColumn( 'uuid' )\n\tpublic id: string;\n\n\t@Column( () => MetadataField )\n\tpublic meta: MetadataField;\n\n\t@Column()\n\tpublic nick: string;\n\n\t@ManyToOne( () => UserEntity, userEntity => userEntity.sessions )\n\tpublic user: UserEntity;\n\n\t@Column( 'uuid', { nullable: true } )\n\tpublic userId: string;\n}\n","import express from 'express';\nimport csp from 'express-csp';\nimport path from 'path';\nimport compression from 'compression';\nimport { Server } from 'http';\nimport { AddressInfo } from 'net';\nimport { appSettings, cspPolicy } from 'data/config.yaml';\nimport { shutDown, shuttingDown } from './shut-down';\nimport './health.endpoint';\n\nexport const app = express();\nfor( const [ key, value ] of Object.entries( appSettings ) ) {\n\tapp.set( key, value );\n}\napp.use( compression(), express.static( path.join( __dirname, 'www' ) ) );\ncsp.extend( app, cspPolicy );\napp.use( require( 'body-parser' ).json() );\n\nexport const server = new Server( app );\n\nserver.listen( app.get( 'port' ), app.get( 'host' ), err => {\n\tif( err ) {\n\t\tconsole.error( err );\n\t\tshutDown();\n\t\treturn;\n\t}\n\tconst { address, port } = server.address() as AddressInfo;\n\tconsole.log( `Process ${process.pid} listening at ${address}:${port}...` );\n} );\n\nshuttingDown.subscribe( () => {\n\tserver.close( () => {} );\n} );\n","import { validation as config } from 'data/config.yaml';\n\nexport function isValidNick( nick: string ) {\n\tif( !nick ) return false;\n\tif( nick.length > config.maxNickLength ) return false;\n\treturn /^[_a-z][-_a-z0-9]+[_a-z0-9]+/i.test( nick );\n}\n\nexport function isValidRoomName( roomName: string ) {\n\tif( !roomName ) return false;\n\tif( roomName.length > config.maxRoomNameLength ) return false;\n\treturn true;\n}\n","import { Column } from 'typeorm';\n\nexport class PointField {\n\t@Column( { type: 'integer' } )\n\tpublic x: number;\n\n\t@Column( { type: 'integer' } )\n\tpublic y: number;\n}\n\nexport class PointFieldNull {\n\t@Column( { type: 'integer', nullable: true } )\n\tpublic x: number;\n\n\t@Column( { type: 'integer', nullable: true } )\n\tpublic y: number;\n}\n","import { Column } from 'typeorm';\n\nexport class SizeField {\n\t@Column( { type: 'integer' } )\n\tpublic width: number;\n\n\t@Column( { type: 'integer' } )\n\tpublic height: number;\n}\n\nexport class SizeFieldNull {\n\t@Column( { type: 'integer', nullable: true } )\n\tpublic width: number;\n\n\t@Column( { type: 'integer', nullable: true } )\n\tpublic height: number;\n}\n","import { Board } from './board';\nimport { Square } from './square';\n\nconst directions: ReadonlyArray<Point> = [\n\t{ x:  0, y: -1 },\n\t{ x:  1, y: -1 },\n\t{ x:  1, y:  0 },\n\t{ x:  1, y:  1 },\n\t{ x:  0, y:  1 },\n\t{ x: -1, y:  1 },\n\t{ x: -1, y:  0 },\n\t{ x: -1, y: -1 }\n];\n\nfunction getAffectedSquares( board: Board, position: Point, color: number ): Square[] {\n\tif( !board.boundsCheck( position ) ) { return []; }\n\tconst square = board.get( position );\n\tif( !square || !square.empty || !square.enabled ) { return []; }\n\tfunction direction( { x, y }: Point, delta: Point ): Square[] {\n\t\tconst squares = [] as Square[];\n\t\tfor( ; ; ) {\n\t\t\tx += delta.x;\n\t\t\ty += delta.y;\n\t\t\tif( !board.boundsCheck( { x, y } ) ) { return []; }\n\t\t\tconst square = board.get( { x, y } );\n\t\t\tif( !square || square.empty || !square.enabled ) { return []; }\n\t\t\tif( square.color === color ) { return squares; }\n\t\t\tsquares.push( square );\n\t\t}\n\t}\n\tlet squares = [ square ];\n\tfor( const delta of directions ) {\n\t\tsquares = [ ...squares, ...direction( position, delta ) ];\n\t}\n\tif( squares.length <= 1 ) { return []; }\n\treturn squares;\n}\n\nclass RulesStandard implements Rules {\n\tpublic readonly name: string = 'Standard';\n\tpublic readonly ruleSet: RuleSet = RuleSet.standard;\n\tpublic readonly colors: number = 2;\n\tpublic readonly boardSize: Readonly<Size> = Object.freeze( { width: 8, height: 8 } );\n\n\tpublic isValid( game: Game, gameState: GameState, position: Point, color: number ) {\n\t\treturn getAffectedSquares( Board.fromGame( game, gameState ), position, color ).length > 0;\n\t}\n\n\tpublic compareScores( score1: number, score2: number ) {\n\t\treturn score1 - score2;\n\t}\n\n\tpublic getValidMoves( game: Game, gameState: GameState, color: number ) {\n\t\tconst points = [] as Point[];\n\t\tconst { size: { width, height } } = game;\n\t\tfor( let x = 0; x < width; ++x ) {\n\t\tfor( let y = 0; y < height; ++y ) {\n\t\t\tconst point = { x, y };\n\t\t\tif( this.isValid( game, gameState, point, color ) ) points.push( point );\n\t\t}\n\t\t}\n\t\treturn points;\n\t}\n\n\tpublic isGameOver( game: Game, gameState: GameState ) {\n\t\tconst { colors } = this;\n\t\tfor( let color = 0; color < colors; ++color ) {\n\t\t\tif( this.getValidMoves( game, gameState, color ).length > 0 ) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic makeMove( game: Game, gameState: GameState, position: Readonly<Point> ) {\n\t\tconst { turn: prevTurn, index: prevIndex } = gameState;\n\t\tconst board = Board.fromGame( game, gameState );\n\t\tconst squares = getAffectedSquares( board, position, prevTurn );\n\t\tif( squares.length === 0 ) return null;\n\t\tfor( const square of squares ) {\n\t\t\tsquare.color = prevTurn;\n\t\t}\n\t\tconst index = prevIndex + 1;\n\t\tconst lastMove = Object.freeze( { ...position } );\n\t\tconst data = board.getData();\n\t\tconst { colors } = this;\n\t\tlet turn: number|null = null;\n\t\tfor( let i = 0; i < colors; ++i ) {\n\t\t\tconst t = ( prevTurn + 1 + i ) % colors;\n\t\t\tif( this.getValidMoves( game, { turn: t, index, data, lastMove }, t ).length > 0 ) {\n\t\t\t\tturn = t;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn { turn, index, data, lastMove };\n\t}\n\n\tpublic getScore( game: Game, gameState: GameState, color: number ) {\n\t\tconst board = Board.fromGame( game, gameState );\n\t\tlet score = 0;\n\t\tfor( const square of board ) {\n\t\t\tif( square && square.enabled && square.color === color ) {\n\t\t\t\t++score;\n\t\t\t}\n\t\t}\n\t\treturn score;\n\t}\n\n\tpublic newGame( gameId: string ) {\n\t\tconst { boardSize } = this;\n\n\t\tconst board = new Board;\n\t\tboard.reset( boardSize );\n\t\t// TODO: center? gets ugly with an odd dimension\n\t\tboard.get( { x: 3, y: 3 } ).color = 0;\n\t\tboard.get( { x: 4, y: 3 } ).color = 1;\n\t\tboard.get( { x: 3, y: 4 } ).color = 1;\n\t\tboard.get( { x: 4, y: 4 } ).color = 0;\n\t\tconst gameStates = [ {\n\t\t\tturn: 0,\n\t\t\tindex: 0,\n\t\t\tdata: board.getData(),\n\t\t\tlastMove: null\n\t\t} as GameState ];\n\t\treturn {\n\t\t\tgameId,\n\t\t\truleSet: this.ruleSet,\n\t\t\tmask: board.getMask(),\n\t\t\tcolors: Object.freeze( [ 'black', 'white' ] ),\n\t\t\tsize: Object.freeze( { ...boardSize } ),\n\t\t\tgameStates: Object.freeze( gameStates )\n\t\t};\n\t}\n}\n\nclass RulesReversed extends RulesStandard {\n\tpublic readonly name: string = 'Reversed';\n\tpublic readonly ruleSet: RuleSet = RuleSet.reversed;\n\n\tpublic compareScores( score1: number, score2: number ) {\n\t\treturn score2 - score1;\n\t}\n}\n\nexport const rulesStandard = new RulesStandard;\nexport const rulesReversed = new RulesReversed;\nexport const ruleSets = [ rulesStandard, rulesReversed ] as Rules[];\nexport const ruleSetMap = new Map<RuleSet, Rules>();\nfor( const ruleSet of ruleSets ) {\n\truleSetMap.set( ruleSet.ruleSet, ruleSet );\n}\n","import { Grid } from 'src/grid';\nimport { Bounds } from 'src/bounds';\nimport { Square } from 'src/square';\nimport { zip } from 'lodash';\n\nexport class Board {\n\tpublic reset( { width, height }: Readonly<Size> ) {\n\t\tconst grid = new Grid<Square>( width, height ),\n\t\t\tsquareSize: Size = { width: 64, height: 64 },\n\t\t\tgutterSize: Size = { width: 6, height: 6 },\n\t\t\tbounds = new Bounds(\n\t\t\t\t0.5,\n\t\t\t\t0.5,\n\t\t\t\t1 + width * ( squareSize.width + gutterSize.width ) + gutterSize.width,\n\t\t\t\t1 + height * ( squareSize.height + gutterSize.height ) + gutterSize.height\n\t\t\t);\n\t\tfor( let x = 0; x < width; ++x ) {\n\t\tfor( let y = 0; y < height; ++y ) {\n\t\t\tconst position = { x, y },\n\t\t\t\tbounds = new Bounds(\n\t\t\t\t\t0.5 + x * ( squareSize.width + gutterSize.width ) + gutterSize.width,\n\t\t\t\t\t0.5 + y * ( squareSize.height + gutterSize.height ) + gutterSize.height,\n\t\t\t\t\t0.5 + squareSize.width,\n\t\t\t\t\t0.5 + squareSize.height\n\t\t\t\t);\n\t\t\tgrid.set( { x, y }, new Square( position, bounds ) );\n\t\t} }\n\t\tObject.assign( this, { grid, bounds } );\n\t}\n\n\tpublic get width() {\n\t\tconst { grid: { width } } = this;\n\t\treturn width;\n\t}\n\n\tpublic get height() {\n\t\tconst { grid: { height } } = this;\n\t\treturn height;\n\t}\n\n\tpublic get( { x, y }: Point ) {\n\t\tconst { grid } = this;\n\t\treturn grid.get( { x, y } )!;\n\t}\n\n\tpublic boundsCheck( { x, y }: Point ) {\n\t\tconst { grid } = this;\n\t\treturn grid.boundsCheck( { x, y } )!;\n\t}\n\n\tpublic getData() {\n\t\treturn Object.freeze( Array.from( this.grid ).map( sq => sq.empty ? null : sq.color ) );\n\t}\n\n\tpublic setData( data: ReadonlyArray<number> ) {\n\t\tfor( const [ color, square ] of zip( data, Array.from( this.grid ) ) ) {\n\t\t\tsquare.color = color;\n\t\t}\n\t}\n\n\tpublic getGameState( index: number ) {\n\t\treturn {\n\t\t\tindex,\n\n\t\t\tdata: this.getData()\n\t\t} as GameState;\n\t}\n\n\tpublic getMask() {\n\t\treturn Object.freeze( Array.from( this.grid ).map( sq => sq.enabled ) );\n\t}\n\n\tpublic setMask( mask: ReadonlyArray<boolean> ) {\n\t\tfor( const [ enabled, square ] of zip( mask, Array.from( this.grid ) ) ) {\n\t\t\tsquare.enabled = enabled;\n\t\t}\n\t}\n\n\tpublic static fromGame( game: Game, gameState: GameState ) {\n\t\tconst board = new Board;\n\t\tboard.reset( game.size );\n\t\tboard.setData( gameState.data );\n\t\tboard.setMask( game.mask );\n\t\treturn board;\n\t}\n\n\tpublic [Symbol.iterator]() {\n\t\tconst { grid } = this;\n\t\treturn grid[ Symbol.iterator ]() as IterableIterator<Square>;\n\t}\n\n\tpublic hitTest( pt: Point ): Square|null {\n\t\tfor( const square of this ) {\n\t\t\tif( square.bounds.hitTest( pt ) ) {\n\t\t\t\treturn square;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic bounds = new Bounds( 0, 0, 0, 0 );\n\tprivate grid = new Grid<Square>( 0, 0 );\n}\n","function validate<T>( grid: Grid<T>, { x, y }: Point ) {\n\tif( !Number.isSafeInteger( x ) || !Number.isSafeInteger( y ) ) {\n\t\tthrow new Error( `(${x}, ${y}) is not valid` );\n\t}\n\tif( !grid.boundsCheck( { x, y } ) ) {\n\t\tthrow new Error( `(${x}, ${y}) is out of bounds` );\n\t}\n}\n\nexport class Grid<T> {\n\tpublic constructor( public readonly width: number, public readonly height: number ) {}\n\n\tpublic boundsCheck( { x, y }: Point ) {\n\t\tconst { width, height } = this;\n\t\treturn x >= 0 && x < width && y >= 0 && y < height;\n\t}\n\n\tpublic get( { x, y }: Point ) {\n\t\tvalidate( this, { x, y } );\n\t\tconst key = JSON.stringify( { x, y } );\n\t\treturn this.data.get( key );\n\t}\n\n\tpublic set( { x, y }: Point, value: T ) {\n\t\tvalidate( this, { x, y } );\n\t\tconst key = JSON.stringify( { x, y } );\n\t\tthis.data.set( key, value );\n\t}\n\n\tpublic [Symbol.iterator]() {\n\t\tfunction *iterator( this: Grid<T> ) {\n\t\t\tconst { width, height } = this;\n\t\t\tfor( let x = 0; x < width; ++x ) {\n\t\t\tfor( let y = 0; y < height; ++ y ) {\n\t\t\t\tyield this.get( { x, y } );\n\t\t\t} }\n\t\t}\n\t\treturn iterator.call( this ) as IterableIterator<T|undefined>;\n\t}\n\n\tprivate data = new Map<string, T>();\n}\n","export class Bounds {\n\tpublic constructor(\n\t\tpublic readonly left: number,\n\t\tpublic readonly top: number,\n\t\tpublic readonly width: number,\n\t\tpublic readonly height: number\n\t) {}\n\n\tpublic get bottom() {\n\t\tconst { top, height } = this;\n\t\treturn top + height;\n\t}\n\n\tpublic get right() {\n\t\tconst { left, width } = this;\n\t\treturn left + width;\n\t}\n\n\tpublic get center() {\n\t\tconst { left, top, width, height } = this,\n\t\t\tx = left + width * .5,\n\t\t\ty = top + height * .5;\n\t\treturn { x, y };\n\t}\n\n\tpublic get n() {\n\t\tconst { left, top, width } = this,\n\t\t\tx = left + width * .5,\n\t\t\ty = top;\n\t\treturn { x, y };\n\t}\n\n\tpublic get ne() {\n\t\tconst { left, top, width } = this,\n\t\t\tx = left + width,\n\t\t\ty = top;\n\t\treturn { x, y };\n\t}\n\n\tpublic get e() {\n\t\tconst { left, top, width, height } = this,\n\t\t\tx = left + width,\n\t\t\ty = top + height * .5;\n\t\treturn { x, y };\n\t}\n\n\tpublic get se() {\n\t\tconst { left, top, width, height } = this,\n\t\t\tx = left + width,\n\t\t\ty = top + height;\n\t\treturn { x, y };\n\t}\n\n\tpublic get s() {\n\t\tconst { left, top, width, height } = this,\n\t\t\tx = left + width * .5,\n\t\t\ty = top + height;\n\t\treturn { x, y };\n\t}\n\n\tpublic get sw() {\n\t\tconst { left, top, height } = this,\n\t\t\tx = left,\n\t\t\ty = top + height;\n\t\treturn { x, y };\n\t}\n\n\tpublic get w() {\n\t\tconst { left, top, height } = this,\n\t\t\tx = left,\n\t\t\ty = top + height * .5;\n\t\treturn { x, y };\n\t}\n\n\tpublic get nw() {\n\t\tconst { left, top } = this,\n\t\t\tx = left,\n\t\t\ty = top;\n\t\treturn { x, y };\n\t}\n\n\tpublic hitTest( { x, y }: Point ) {\n\t\tconst { top, right, bottom, left } = this;\n\t\treturn x >= left && x <= right\n\t\t\t&& y >= top && y <= bottom;\n\t}\n}\n","import { Bounds } from 'src/bounds';\n\nexport class Square {\n\tpublic constructor(\n\t\tpublic readonly position: Point,\n\t\tpublic readonly bounds: Bounds\n\t) {}\n\n\tpublic enabled = true;\n\tpublic color: number|null = null;\n\n\tpublic get empty() { return this.color === null; }\n}\n","import { redis as redisConfig } from 'data/config.yaml';\nimport Redis from 'ioredis';\nimport adapter from 'socket.io-redis';\nimport uuid from 'uuid/v4';\nimport { shutDown, shuttingDown } from './shut-down';\nimport { server } from './app';\n\nconst pub = new Redis( { ...redisConfig, db: 0, dropBufferSupport: true } );\nconst redis = new Redis( { ...redisConfig, db: 0 } );\n\nshuttingDown.subscribe( async () => {\n\tawait Promise.all( [\n\t\tpub.quit(),\n\t\tredis.quit()\n\t] );\n} );\n\nexport const io = require( 'socket.io' )( server ) as SocketIO.Server & NodeJS.EventEmitter;\n\nio.engine[ 'generateId' ] = uuid;\n\nio.adapter( adapter( { pubClient: pub, subClient: redis } ) );\n","import { app } from './app';\n\napp.get( '/health', ( req, res ) => {\n\tres.writeHead( 200 );\n\tres.end();\n} );\n","import { compare, genSalt, hash } from 'bcrypt-nodejs';\nimport { promisify } from 'util';\n\nexport async function hashPassword( password: string ) {\n\tif( !password ) return '';\n\tconst salt = await promisify( genSalt )( null );\n\tconst passwordHash = await promisify( hash )( password, salt, null );\n\treturn passwordHash;\n}\n\nexport async function checkPassword( password: string, passwordHash: string ) {\n\t// if a password is specified but hash is empty, go ahead and compare anyway to prevent timing attacks\n\tif( !password && !passwordHash ) return true;\n\tconst result = await promisify( compare )( password, passwordHash );\n\treturn result;\n}\n"],"sourceRoot":""}