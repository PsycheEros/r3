{"version":3,"sources":["webpack:///./src/server/main.ts","webpack:///./src/server/metadata.field.ts","webpack:///./src/server/game.entity.ts","webpack:///./src/server/user.entity.ts","webpack:///./src/server/game-state.entity.ts","webpack:///./src/server/room.entity.ts","webpack:///./src/server/login.entity.ts","webpack:///./src/server/session.entity.ts","webpack:///./src/validation.ts","webpack:///./src/server/point.field.ts","webpack:///./src/server/size.field.ts","webpack:///./src/rule-sets.ts","webpack:///./src/board.ts","webpack:///./src/grid.ts","webpack:///./src/bounds.ts","webpack:///./src/square.ts","webpack:///./src/server/app.ts","webpack:///./src/server/security.ts"],"names":["__webpack_require__","_typeorm","_rxjs","_operators","_rxjs2","_validation","_game","_gameState","_login","_room","_session","_user","_ruleSets","_app","_config","_colors","_security","_v","_interopRequireDefault","_moment","_assert","OPENSHIFT_REDIS_HOST","OPENSHIFT_REDIS_PASSWORD","OPENSHIFT_REDIS_PORT","process","env","server","Server","app","io","engine","default","redis","createClient","adapter","pub","auth_pass","sub","return_buffers","pubClient","subClient","getSocket","sessionId","Object","entries","of","connected","filter","id","socket","map","async","getJoinedRoomIds","manager","findByIds","RoomEntity","keys","rooms","room","joinRoom","roomId","Promise","resolve","reject","join","err","flushJoinedRooms","flushUpdate","nick","findOne","SessionEntity","select","statusMessage","roomIds","to","emit","flushRooms","find","toRoom","leaveRoom","leave","message","transaction","game","GameEntity","gameId","relations","toGame","newGame","ruleSet","rules","ruleSetMap","get","gameEntity","create","colors","mask","v","size","_objectSpread","save","saveGameStates","update","all","gameStates","gs","index","gameState","GameStateEntity","turn","data","String","lastMove","m","fn","createConnection","connectionOptions","entities","LoginEntity","UserEntity","interval","duration","cleanup","checkSeconds","asMilliseconds","subscribe","removed","in","clients","length","expires","isSameOrBefore","console","log","remove","add","expireSeconds","fromNow","toDate","cleanupRooms","connections","fromNodeEvent","disconnecting","pipe","take","disconnected","handleCallbackEvent","eventName","result","Subject","takeUntil","mergeMap","value","callback","tap","[object Object]","error","onErrorResumeNext","delete","commands","help","isValidNick","Error","previousNick","session","existingSession","count","existingUser","userId","nicks","s","sort","position","roomEntity","prevGameState","slice","nextGameState","makeMove","isGameOver","scores","Array","from","_","color","displayName","score","getScore","c1","c2","r1","compareScores","localeCompare","bestScore","winners","startsWith","raw","cmd","params","trim","split","hasOwnProperty","includes","ex","command","user","chatMessage","name","password","isValidRoomName","passwordHash","hashPassword","createRoom","checkPassword","listen","address","port","pid","MetadataField","__decorate","CreateDateColumn","Date","UpdateDateColumn","_metadata","_lodash","_size","sortBy","parseInt","x","y","PrimaryGeneratedColumn","Column","OneToMany","cascade","SizeField","OneToOne","nullable","exports","Entity","unique","login","JoinColumn","_point","PrimaryColumn","type","ManyToOne","PointFieldNull","hasPassword","Index","userEntity","sessions","validation","maxNickLength","test","roomName","maxRoomNameLength","PointField","SizeFieldNull","directions","getAffectedSquares","board","boundsCheck","square","empty","enabled","direction","delta","squares","push","RulesStandard","this","boardSize","freeze","width","height","_board","Board","fromGame","score1","score2","points","point","isValid","getValidMoves","prevTurn","prevIndex","getData","i","t","reset","getMask","rulesStandard","rulesReversed","ruleSets","Map","set","_bounds","_square","bounds","Bounds","grid","_grid","Grid","squareSize","gutterSize","Square","assign","sq","zip","setData","setMask","Symbol","iterator","pt","hitTest","validate","Number","isSafeInteger","key","JSON","stringify","call","left","top","bottom","right","center","n","ne","e","se","sw","w","nw","_expressCsp","_path","_compression","_express","appSettings","use","static","__dirname","extend","cspPolicy","json","req","res","writeHead","end","salt","_util","promisify","_bcryptNodejs","genSalt","hash","compare"],"mappings":"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","file":"main~server.js","sourcesContent":["import './error-handler';\nimport './polyfills';\n\nimport { createConnection, EntityManager, DeepPartial } from 'typeorm';\nimport { Subject, interval, of } from 'rxjs';\nimport { onErrorResumeNext, mergeMap, take, tap, takeUntil } from 'rxjs/operators';\nimport { fromNodeEvent } from './rxjs';\nimport { isValidNick, isValidRoomName } from 'src/validation';\nimport { GameEntity } from './game.entity';\nimport { GameStateEntity } from './game-state.entity';\nimport { LoginEntity } from './login.entity';\nimport { RoomEntity } from './room.entity';\nimport { SessionEntity } from './session.entity';\nimport { UserEntity } from './user.entity';\nimport { ruleSetMap } from 'src/rule-sets';\nimport { app } from './app';\nimport { connectionOptions, cleanup as cleanupConfig } from 'data/config.yaml';\nimport { colors } from 'data/colors.yaml';\nimport { hashPassword, checkPassword } from './security';\n\nimport uuid from 'uuid/v4';\nimport moment from 'moment';\nimport assert from 'assert';\n\nconst { OPENSHIFT_REDIS_HOST,\n\t\tOPENSHIFT_REDIS_PASSWORD,\n\t\tOPENSHIFT_REDIS_PORT\n} = process.env;\n\ntype CallbackEvent<T = {}, U = {}> = [ T, ( error: Error|null, value: U|null ) => void ];\n\nconst server = require( 'http' ).Server( app ),\n\tio = require( 'socket.io' )( server ) as SocketIO.Server & NodeJS.EventEmitter;\n\nio.engine[ 'generateId' ] = uuid;\n\nif( OPENSHIFT_REDIS_HOST ) {\n\tconst redis = require( 'redis' ).createClient,\n\t\tadapter = require( 'socket.io-redis' ),\n\t\tpub = redis( OPENSHIFT_REDIS_PORT, OPENSHIFT_REDIS_HOST, { auth_pass: OPENSHIFT_REDIS_PASSWORD } ),\n\t\tsub = redis( OPENSHIFT_REDIS_PORT, OPENSHIFT_REDIS_HOST, { return_buffers: true, auth_pass: OPENSHIFT_REDIS_PASSWORD } );\n\n\tio.adapter( adapter( { pubClient: pub, subClient: sub } ) );\n}\n\nfunction getSocket( sessionId: string ) {\n\treturn Object.entries( io.of( '/' ).connected )\n\t.filter( ( [ id, socket ] ) => id === sessionId )\n\t.map( ( [ id, socket ] ) => socket )[ 0 ]\n\t|| null;\n}\n\nasync function getJoinedRoomIds( manager: EntityManager, sessionId: string ) {\n\tconst socket = getSocket( sessionId );\n\tif( !socket ) return [];\n\tconst rooms = await manager.findByIds( RoomEntity, Object.keys( socket.rooms ) );\n\treturn rooms.map( room => room.id );\n}\n\nasync function joinRoom( manager: EntityManager, roomId: string, sessionId: string ) {\n\tconst socket = getSocket( sessionId );\n\tawait new Promise( ( resolve, reject ) => {\n\t\tsocket.join( roomId, err => {\n\t\t\tif( err ) { reject( err ); }\n\t\t\telse { resolve(); }\n\t\t} );\n\t} );\n\tawait flushJoinedRooms( manager, sessionId );\n\tawait flushUpdate( manager, roomId, sessionId );\n\tconst { nick } = await manager.findOne( SessionEntity, sessionId, { select: [ 'nick' ] } );\n\tawait statusMessage( roomId, `${nick} has joined the room.` );\n}\n\nasync function flushJoinedRooms( manager: EntityManager, sessionId: string ) {\n\tconst roomIds = await getJoinedRoomIds( manager, sessionId );\n\tio.to( sessionId ).emit( 'joinedRooms', roomIds );\n}\n\nasync function flushRooms( manager: EntityManager, sessionId?: string ) {\n\tconst rooms = ( await manager.find( RoomEntity ) ).map( RoomEntity.toRoom );\n\tconst emitter = sessionId ? io.to( sessionId ) : io;\n\temitter.emit( 'rooms', rooms );\n}\n\nasync function leaveRoom( manager: EntityManager, sessionId: string, roomId: string ) {\n\tconst socket = getSocket( sessionId );\n\tawait new Promise( ( resolve, reject ) => {\n\t\tsocket.leave( roomId, err => {\n\t\t\tif( err ) {\n\t\t\t\treject( err );\n\t\t\t} else {\n\t\t\t\tresolve();\n\t\t\t}\n\t\t} );\n\t} );\n\tawait flushJoinedRooms( manager, sessionId );\n\tconst { nick } = await manager.findOne( SessionEntity, sessionId, { select: [ 'nick' ] } );\n\tawait statusMessage( roomId, `${nick} has left the room.` );\n}\n\nfunction statusMessage( message: string, roomId: string, sessionId?: string ) {\n\tio.to( sessionId || roomId ).emit( 'message', { roomId, message } );\n\treturn true;\n}\n\nfunction chatMessage( user: string, message: string, roomId: string ) {\n\tio.to( roomId ).emit( 'message', { roomId, user, message } );\n\treturn true;\n}\n\nasync function flushUpdate( manager: EntityManager, roomId: string, sessionId?: string ) {\n\tawait transaction( manager, async manager => {\n\t\tconst room = await manager.findOne( RoomEntity, roomId);\n\t\tif( !room ) return;\n\t\tconst game = await manager.findOne( GameEntity, room.gameId, { relations: [ 'gameStates' ] } );\n\t\tif( !game ) return;\n\t\tio.to( sessionId || room.id ).emit( 'update', GameEntity.toGame( game ) );\n\t} );\n}\n\nasync function cleanupRooms( manager: EntityManager ) {\n\tawait transaction( manager, async manager => {\n\t\tlet removed = 0;\n\t\tawait Promise.all(\n\t\t\t( await manager.find( RoomEntity, { select: [ 'id', 'expires' ] } ) )\n\t\t\t.map( async room => {\n\t\t\t\tconst clients = await new Promise<string[]>( ( resolve, reject ) => {\n\t\t\t\t\tio.in( room.id ).clients( ( err, clients ) => {\n\t\t\t\t\t\tif( err ) reject( err );\n\t\t\t\t\t\telse resolve( clients );\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t\tif( clients.length === 0 ) {\n\t\t\t\t\tif( room.expires ) {\n\t\t\t\t\t\tif( moment( room.expires ).isSameOrBefore() ) {\n\t\t\t\t\t\t\tconsole.log( `Deleting room ${room.id}...` );\n\t\t\t\t\t\t\tawait manager.remove( room );\n\t\t\t\t\t\t\t++removed;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst expires = moment().add( cleanupConfig.rooms.expireSeconds, 's' );\n\t\t\t\t\t\tconsole.log( `Queuing room ${room.id} for deletion ${expires.fromNow()}...` );\n\t\t\t\t\t\troom.expires = expires.toDate();\n\t\t\t\t\t\tawait manager.save( room );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} )\n\t\t);\n\t\tif( removed ) await flushRooms( manager );\n\t} );\n}\n\nasync function newGame( manager: EntityManager, roomId: string, ruleSet: RuleSet ) {\n\tstatusMessage( 'New game', roomId );\n\tconst rules = ruleSetMap.get( ruleSet );\n\treturn await transaction( manager, async manager => {\n\t\tconst game = rules.newGame( uuid() );\n\t\tconst gameEntity = await manager.create( GameEntity, {\n\t\t\tid: game.gameId,\n\t\t\tcolors: [ ...game.colors ],\n\t\t\tmask: game.mask.map( v => v ? '1' : '0' ).join( '' ),\n\t\t\tsize: { ...game.size },\n\t\t\truleSet: game.ruleSet\n\t\t} );\n\t\tawait manager.save( gameEntity );\n\t\tawait saveGameStates( manager, game );\n\t\tawait manager.update( RoomEntity, roomId, { gameId: gameEntity.id } );\n\t\tflushRooms( manager );\n\t\tflushUpdate( manager, roomId );\n\t\treturn game;\n\t} );\n}\n\nasync function saveGameStates( manager: EntityManager, game: Game ) {\n\treturn await transaction( manager, async manager => {\n\t\tawait Promise.all(\n\t\t\tgame.gameStates.map( async ( gs, index ) => {\n\t\t\t\tlet gameState = await manager.findOne( GameStateEntity, { gameId: game.gameId, index } );\n\t\t\t\tif( !gameState ) gameState = await manager.create( GameStateEntity, { gameId: game.gameId, index } );\n\t\t\t\tgameState.turn = gs.turn;\n\t\t\t\tgameState.data = gs.data.map( v => ( v == null ) ? 'x' : String(v) );\n\t\t\t\tgameState.lastMove = { ...gs.lastMove };\n\t\t\t\tawait manager.save( gameState );\n\t\t\t} )\n\t\t);\n\t} );\n}\n\nconst transaction = ( () => {\n\tlet m: EntityManager = null;\n\treturn ( <T>( manager: EntityManager, fn: ( manager: EntityManager ) => Promise<T> ) => {\n\t\tassert( manager );\n\t\tif( m ) {\n\t\t\treturn fn( m );\n\t\t} else {\n\t\t\treturn manager.transaction<T>( async manager => {\n\t\t\t\tm = manager;\n\t\t\t\ttry {\n\t\t\t\t\treturn await fn( m );\n\t\t\t\t} finally {\n\t\t\t\t\tm = null;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t} );\n} )();\n\nasync function createRoom( manager: EntityManager, sessionId: string, name: string, password: string ) {\n\tif( !isValidRoomName( name ) ) throw new Error( 'Invalid room name.' );\n\treturn await transaction( manager, async manager => {\n\t\tconst roomEntity =\n\t\t\tawait manager.create( RoomEntity, {\n\t\t\t\tname,\n\t\t\t\tpasswordHash: await hashPassword( password )\n\t\t\t} );\n\t\tawait manager.save( roomEntity );\n\t\tawait joinRoom( manager, roomEntity.id, sessionId );\n\t\tawait newGame( manager, roomEntity.id, RuleSet.standard );\n\t\treturn roomEntity;\n\t} );\n}\n\nasync function makeMove( manager: EntityManager, roomId: string, position: Point ) {\n\treturn await transaction( manager, async manager => {\n\t\tconst roomEntity = await manager.findOne( RoomEntity, roomId );\n\t\tconst gameEntity = await manager.findOne( GameEntity, roomEntity.gameId, { relations: [ 'gameStates' ] } );\n\t\tconst rules = ruleSetMap.get( gameEntity.ruleSet );\n\t\tlet game = GameEntity.toGame( gameEntity );\n\t\tconst prevGameState = game.gameStates.slice( -1 )[ 0 ];\n\t\tconst nextGameState = rules.makeMove( game, prevGameState, position );\n\t\tif( !nextGameState ) {\n\t\t\treturn false;\n\t\t}\n\t\tgame = {\n\t\t\t...game,\n\t\t\tgameStates: [ ...game.gameStates, nextGameState ]\n\t\t};\n\t\tawait saveGameStates( manager, game );\n\t\tif( rules.isGameOver( game, nextGameState ) ) {\n\t\t\tconst scores =\n\t\t\tArray.from( { length: rules.colors } )\n\t\t\t.map( ( _, color ) => ( {\n\t\t\t\tcolor: colors[ game.colors[ color ] ].displayName,\n\t\t\t\tscore: rules.getScore( game, nextGameState, color )\n\t\t\t} ) );\n\t\t\tscores.sort( ( c1, c2 ) => {\n\t\t\t\tconst r1 = rules.compareScores( c1.score, c2.score );\n\t\t\t\treturn ( r1 === 0 ) ? c1.color.localeCompare( c2.color ) : r1;\n\t\t\t} );\n\t\t\tconst bestScore = scores[ 0 ].score;\n\t\t\tconst winners = scores.filter( ( { score } ) => rules.compareScores( score, bestScore ) );\n\t\t\tlet message: string;\n\t\t\tif( winners.length !== 1 ) {\n\t\t\t\tmessage = 'Draw game.';\n\t\t\t} else {\n\t\t\t\tmessage = `${winners[ 0 ].color} wins.`;\n\t\t\t}\n\t\t\tawait statusMessage( `${message}:\\n${scores.map(({color, score})=>`${color}: ${score}`).join('\\n')}`, roomId );\n\t\t}\n\t\tawait flushUpdate( manager, roomId );\n\t\treturn true;\n\t} );\n}\n\n( async () => {\n\ttry {\n\t\tconst { manager } = await createConnection( {\n\t\t\t...connectionOptions,\n\t\t\tentities: [ GameEntity, GameStateEntity, LoginEntity, RoomEntity, SessionEntity, UserEntity ]\n\t\t} );\n\n\t\tinterval( moment.duration( cleanupConfig.rooms.checkSeconds, 's' ).asMilliseconds() )\n\t\t.subscribe( async () => {\n\t\t\tcleanupRooms( manager );\n\t\t} );\n\n\t\tlet connections = 0;\n\n\t\tfromNodeEvent<SocketIO.Socket>( io, 'connection' )\n\t\t.subscribe( async socket => {\n\t\t\tconsole.log( `User connected, ${++connections} connected, ${socket.id}` );\n\n\t\t\tconst disconnecting = fromNodeEvent( socket, 'disconnecting' ).pipe( take( 1 ) );\n\t\t\tconst disconnected = fromNodeEvent( socket, 'disconnect' ).pipe( take( 1 ) );\n\n\t\t\tfunction handleCallbackEvent<T extends object = {}, U = {}>( eventName: string, fn: ( value: T & { manager: EntityManager } ) => PromiseLike<U|void> ) {\n\t\t\t\tconst result = new Subject<U>();\n\t\t\t\tfromNodeEvent<CallbackEvent<T, U>>( socket, eventName )\n\t\t\t\t.pipe(\n\t\t\t\t\ttakeUntil( disconnected ),\n\t\t\t\t\tmergeMap<CallbackEvent<T, U>, {}>( ( [ value, callback ] ) =>\n\t\t\t\t\t\tof( value )\n\t\t\t\t\t\t.pipe(\n\t\t\t\t\t\t\tmergeMap( value => transaction( manager, async manager => fn( { manager, ...( value as any ) } ) ) ),\n\t\t\t\t\t\t\ttap( {\n\t\t\t\t\t\t\t\tnext( value ) {\n\t\t\t\t\t\t\t\t\tcallback( null, ( value == null ) ? {} as any : value );\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terror( err ) {\n\t\t\t\t\t\t\t\t\tconsole.error( err );\n\t\t\t\t\t\t\t\t\tcallback( ( err == null ) ? {} : err.message, null );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} ),\n\t\t\t\t\t\t\tonErrorResumeNext()\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t\t.subscribe( result );\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tconst sessionId = socket.id;\n\t\t\tawait manager.save(\n\t\t\t\tawait manager.create( SessionEntity, { id: sessionId, nick: 'Guest' } )\n\t\t\t);\n\n\t\t\tdisconnecting.subscribe( async () => {\n\t\t\t\tawait transaction( manager, async manager => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst roomIds = await getJoinedRoomIds( manager, sessionId );\n\t\t\t\t\t\tif( roomIds.length > 0 ) {\n\t\t\t\t\t\t\tconst { nick } = await manager.findOne( SessionEntity, sessionId, { select: [ 'nick' ] } );\n\t\t\t\t\t\t\tawait Promise.all(\n\t\t\t\t\t\t\t\troomIds.map( roomId => statusMessage( `${nick} has disconnected.`, roomId ) )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tmanager.delete( SessionEntity, sessionId );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\tdisconnected.subscribe( async () => {\n\t\t\t\tconsole.log( `User disconnected, ${--connections} connected` );\n\t\t\t} );\n\n\n\t\t\tconst commands = {\n\t\t\t\tasync help( roomId: string ) {\n\t\t\t\t\tawait statusMessage( `Available commands:\n/?\n/help\n/nick <name>\n/quit\n/who\n`, roomId, sessionId );\n\t\t\t\t},\n\t\t\t\tasync '?'( roomId: string ) {\n\t\t\t\t\tawait commands.help( roomId );\n\t\t\t\t},\n\t\t\t\tasync nick( roomId: string, nick: string ) {\n\t\t\t\t\tif( !isValidNick( nick ) ) throw new Error( 'Invalid nick.' );\n\n\t\t\t\t\tlet previousNick: string;\n\t\t\t\t\tawait transaction( manager, async manager => {\n\t\t\t\t\t\tconst session = await manager.findOne( SessionEntity, sessionId );\n\t\t\t\t\t\tconst existingSession = ( await manager.count( SessionEntity, { nick } ) ) > 0;\n\t\t\t\t\t\tconst existingUser = ( await manager.count( UserEntity, { nick } ) ) > 0;\n\t\t\t\t\t\tif( existingSession || existingUser ) {\n\t\t\t\t\t\t\tthrow new Error( 'Nick is already in use.' );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpreviousNick = session.nick;\n\t\t\t\t\t\tsession.nick = nick;\n\t\t\t\t\t\tif( session.userId ) {\n\t\t\t\t\t\t\tawait manager.update( UserEntity, session.userId, { nick } );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tawait manager.save( session );\n\t\t\t\t\t} );\n\n\t\t\t\t\tawait statusMessage( `${previousNick} is now known as ${nick}.`, roomId );\n\t\t\t\t},\n\t\t\t\tasync quit( roomId: string ) {\n\t\t\t\t\tawait leaveRoom( manager, sessionId, roomId );\n\t\t\t\t},\n\t\t\t\tasync who( roomId: string ) {\n\t\t\t\t\tconst clients = await new Promise<string[]>( ( resolve, reject ) => {\n\t\t\t\t\t\tio.in( roomId ).clients( ( err, clients ) => {\n\t\t\t\t\t\t\tif( err ) reject( err );\n\t\t\t\t\t\t\telse resolve( clients );\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t\tconst sessions = await manager.findByIds( SessionEntity, clients );\n\t\t\t\t\tconst nicks = sessions.map( s => s.nick ).sort();\n\t\t\t\t\tawait statusMessage( `Users in room:\\n${nicks.join('\\n')}`, roomId, sessionId );\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tasync function command( roomId: string, raw: string ) {\n\t\t\t\tconst [ cmd, ...params ] = raw.trim().split( /\\s+/g );\n\t\t\t\ttry {\n\t\t\t\t\tif( !commands.hasOwnProperty( cmd ) ) throw new Error( 'Unknown command.' );\n\t\t\t\t\tconst joinedRoomIds = await getJoinedRoomIds( manager, sessionId );\n\t\t\t\t\tif( !joinedRoomIds.includes( roomId ) ) throw new Error( 'Not in room.' );\n\t\t\t\t\tawait commands[ cmd ]( roomId, ...params );\n\t\t\t\t} catch( ex ) {\n\t\t\t\t\tif( ex && ex.message ) {\n\t\t\t\t\t\tawait statusMessage( ex.message, roomId, sessionId );\n\t\t\t\t\t}\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thandleCallbackEvent<{ roomId: string; position: Point; }>( 'makeMove', async ( { roomId, position } ) => {\n\t\t\t\tif( !await makeMove( manager, roomId, position ) ) throw new Error( 'Failed to make move.' );\n\t\t\t} );\n\n\t\t\thandleCallbackEvent<{ roomId: string; ruleSet: RuleSet }>( 'newGame', async ( { roomId, ruleSet } ) => {\n\t\t\t\tconst game = await newGame( manager, roomId, ruleSet );\n\t\t\t\tif( !game ) throw new Error( 'Failed to create game.' );\n\t\t\t\treturn { game };\n\t\t\t} );\n\n\t\t\thandleCallbackEvent<{ roomId: string; message: string; }>( 'sendMessage', async ( { roomId, message } ) => {\n\t\t\t\tif( message.startsWith( '/' ) ) {\n\t\t\t\t\tawait command( roomId, message.slice( 1 ) );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst { nick } = await manager.findOne( SessionEntity, sessionId, { select: [ 'nick' ] } );\n\t\t\t\tif( !await chatMessage( nick, message, roomId ) ) throw new Error( 'Failed to send message.' );\n\t\t\t} );\n\n\t\t\thandleCallbackEvent<{ name: string; password: string; }>( 'createRoom', async ( { manager, name, password } ) => {\n\t\t\t\tconst roomEntity = await createRoom( manager, sessionId, name, password );\n\t\t\t\treturn RoomEntity.toRoom( roomEntity );\n\t\t\t} );\n\n\t\t\thandleCallbackEvent<{ roomId: string; password: string; }>( 'joinRoom', async ( { manager, roomId, password } ) => {\n\t\t\t\tconst roomEntity = await manager.findOne( RoomEntity, roomId );\n\t\t\t\tif( !roomEntity ) throw new Error( 'Failed to join room.' );\n\t\t\t\tif( roomEntity.passwordHash ) {\n\t\t\t\t\tif( !password ) throw new Error( 'Room requires a password.' );\n\t\t\t\t\tif( !await checkPassword( password, roomEntity.passwordHash ) ) throw new Error( 'Incorrect password.' );\n\t\t\t\t}\n\t\t\t\tmanager.update( RoomEntity, roomId, { expires: null } );\n\t\t\t\tawait joinRoom( manager, roomId, sessionId );\n\t\t\t\treturn RoomEntity.toRoom( roomEntity );\n\t\t\t} );\n\n\t\t\thandleCallbackEvent<{ roomId: string; }>( 'leaveRoom', async ( { manager, roomId } ) => {\n\t\t\t\tawait leaveRoom( manager, sessionId, roomId );\n\t\t\t} );\n\n\t\t\tflushRooms( manager, sessionId );\n\t\t} );\n\t} catch( ex ) {\n\t\tconsole.error( ex );\n\t}\n} )();\n\nserver.listen( app.get( 'port' ), app.get( 'host' ), err => {\n\tif( err ) {\n\t\tconsole.error( err );\n\t\treturn;\n\t}\n\tconst { address, port } = server.address();\n\tconsole.log( `Process ${process.pid} listening at ${address}:${port}...` );\n} );\n","import { CreateDateColumn, UpdateDateColumn } from 'typeorm';\n\nexport class MetadataField {\n\t@CreateDateColumn( { select: false } )\n\tpublic created: Date;\n\n\t@UpdateDateColumn( { select: false } )\n\tpublic updated: Date;\n}\n","import { Entity, PrimaryGeneratedColumn, OneToOne, OneToMany, Column, CreateDateColumn, UpdateDateColumn } from 'typeorm';\nimport { GameStateEntity } from './game-state.entity';\nimport { RoomEntity } from './room.entity';\nimport { MetadataField } from './metadata.field';\nimport { sortBy } from 'lodash';\nimport { SizeField } from 'server/size.field';\n\n@Entity( 'Game' )\nexport class GameEntity {\n\t@PrimaryGeneratedColumn( 'uuid' )\n\tpublic id: string;\n\n\t@Column( () => MetadataField )\n\tpublic meta: MetadataField;\n\n\t@Column( 'simple-array' )\n\tpublic colors: string[];\n\n\t@OneToMany( () => GameStateEntity, gameState => gameState.game, {\n\t\tcascade: true\n\t} )\n\tpublic gameStates: GameStateEntity[];\n\n\t@Column( () => SizeField )\n\tpublic size: SizeField;\n\n\t@Column()\n\tpublic mask: string;\n\n\t@OneToOne( () => RoomEntity, { nullable: true } )\n\tpublic room: RoomEntity;\n\n\t@Column()\n\tpublic ruleSet: RuleSet;\n\n\tstatic toGame( gameEntity: GameEntity ): Game {\n\t\tconst gameStates = sortBy( gameEntity.gameStates, gs => gs.index );\n\t\treturn {\n\t\t\tgameId: gameEntity.id,\n\t\t\tsize: { ...gameEntity.size },\n\t\t\tcolors: [ ...gameEntity.colors ],\n\t\t\tmask: gameEntity.mask.split( '' ).map( m => m === '1' ),\n\t\t\truleSet: gameEntity.ruleSet,\n\t\t\tgameStates: gameStates.map( gs => ( {\n\t\t\t\tindex: gs.index,\n\t\t\t\tturn: gs.turn,\n\t\t\t\tdata: gs.data.map( v => ( v === 'x' ) ? null : parseInt( v, 10 ) ),\n\t\t\t\tlastMove: ( gs.lastMove.x == null || gs.lastMove.y == null ) ? null : { ...gs.lastMove }\n\t\t\t} ) )\n\t\t};\n\t}\n}\n","import { Entity, Column, PrimaryGeneratedColumn, OneToMany, OneToOne, JoinColumn, CreateDateColumn } from 'typeorm';\nimport { LoginEntity } from './login.entity';\nimport { SessionEntity } from './session.entity';\nimport { MetadataField } from 'server/metadata.field';\n\n@Entity( 'User' )\nexport class UserEntity {\n\t@PrimaryGeneratedColumn( 'uuid' )\n\tpublic id: string;\n\n\t@Column( () => MetadataField )\n\tpublic meta: MetadataField;\n\n\t@Column( { unique: true } )\n\tpublic nick: string;\n\n\t@OneToMany( () => SessionEntity, session => session.user )\n\tpublic sessions: SessionEntity[];\n\n\t@OneToOne( () => LoginEntity, login => login.user, {\n\t\tcascade: true\n\t} )\n\t@JoinColumn()\n\tpublic login: LoginEntity;\n}\n","import { Entity, Column, PrimaryColumn, ManyToOne, CreateDateColumn } from 'typeorm';\nimport { GameEntity } from './game.entity';\nimport { PointFieldNull } from './point.field';\nimport { MetadataField } from './metadata.field';\n\n@Entity( 'GameState' )\nexport class GameStateEntity {\n\t@PrimaryColumn( 'uuid' )\n\tpublic gameId: string;\n\n\t@PrimaryColumn( { type: 'integer' } )\n\tpublic index: number;\n\n\t@Column( () => MetadataField )\n\tpublic meta: MetadataField;\n\n\t@ManyToOne( () => GameEntity, game => game.gameStates )\n\tpublic game: GameEntity;\n\n\t@Column( { type: 'integer', nullable: true } )\n\tpublic turn: number|null;\n\n\t@Column( () => PointFieldNull )\n\tpublic lastMove: PointFieldNull;\n\n\t@Column( { type: 'simple-array' } )\n\tpublic data: string[];\n}\n","import { Entity, Column, PrimaryGeneratedColumn, OneToOne, JoinColumn, JoinTable, CreateDateColumn } from 'typeorm';\nimport { GameEntity } from './game.entity';\nimport { MetadataField } from 'server/metadata.field';\n\n@Entity( 'Room' )\nexport class RoomEntity {\n\t@PrimaryGeneratedColumn( 'uuid' )\n\tpublic id: string;\n\n\t@Column( () => MetadataField )\n\tpublic meta: MetadataField;\n\n\t@Column()\n\tpublic name: string;\n\n\t@Column( { nullable: true } )\n\tpublic expires: Date;\n\n\t@Column()\n\tpublic passwordHash: string;\n\n\t@Column( 'uuid', { nullable: true} )\n\tpublic gameId: string;\n\n\t@OneToOne( () => GameEntity, { nullable: true } )\n\t@JoinColumn()\n\tpublic game: GameEntity;\n\n\tpublic static toRoom( roomEntity: RoomEntity ) {\n\t\treturn { roomId: roomEntity.id, gameId: roomEntity.gameId, name: roomEntity.name, hasPassword: !!roomEntity.passwordHash };\n\t}\n}\n","import { Entity, Index, Column, PrimaryGeneratedColumn, OneToOne, CreateDateColumn } from 'typeorm';\nimport { UserEntity } from './user.entity';\nimport { MetadataField } from 'server/metadata.field';\n\n@Entity( 'Login' )\nexport class LoginEntity {\n\t@PrimaryGeneratedColumn( 'uuid' )\n\tpublic id: string;\n\n\t@Column( () => MetadataField )\n\tpublic meta: MetadataField;\n\n\t@Column()\n\t@Index( { unique: true } )\n\tpublic username: string;\n\n\t@Column()\n\tpublic passwordHash: string;\n\n\t@OneToOne( () => UserEntity, user => user.login )\n\tpublic user: UserEntity;\n\n\t@Column( 'uuid', { nullable: true } )\n\tpublic userId: string;\n}\n","import { Entity, Column, PrimaryColumn, ManyToMany, ManyToOne, CreateDateColumn } from 'typeorm';\nimport { UserEntity } from './user.entity';\nimport { MetadataField } from 'server/metadata.field';\n\n@Entity( 'Session' )\nexport class SessionEntity {\n\t@PrimaryColumn( 'uuid' )\n\tpublic id: string;\n\n\t@Column( () => MetadataField )\n\tpublic meta: MetadataField;\n\n\t@Column()\n\tpublic nick: string;\n\n\t@ManyToOne( () => UserEntity, userEntity => userEntity.sessions )\n\tpublic user: UserEntity;\n\n\t@Column( 'uuid', { nullable: true } )\n\tpublic userId: string;\n}\n","import { validation as config } from 'data/config.yaml';\n\nexport function isValidNick( nick: string ) {\n\tif( !nick ) return false;\n\tif( nick.length > config.maxNickLength ) return false;\n\treturn /^[_a-z][-_a-z0-9]+[_a-z0-9]+/i.test( nick );\n}\n\nexport function isValidRoomName( roomName: string ) {\n\tif( !roomName ) return false;\n\tif( roomName.length > config.maxRoomNameLength ) return false;\n\treturn true;\n}\n","import { Column } from 'typeorm';\n\nexport class PointField {\n\t@Column( { type: 'integer' } )\n\tpublic x: number;\n\n\t@Column( { type: 'integer' } )\n\tpublic y: number;\n}\n\nexport class PointFieldNull {\n\t@Column( { type: 'integer', nullable: true } )\n\tpublic x: number;\n\n\t@Column( { type: 'integer', nullable: true } )\n\tpublic y: number;\n}\n","import { Column } from 'typeorm';\n\nexport class SizeField {\n\t@Column( { type: 'integer' } )\n\tpublic width: number;\n\n\t@Column( { type: 'integer' } )\n\tpublic height: number;\n}\n\nexport class SizeFieldNull {\n\t@Column( { type: 'integer', nullable: true } )\n\tpublic width: number;\n\n\t@Column( { type: 'integer', nullable: true } )\n\tpublic height: number;\n}\n","import { Board } from './board';\nimport { Square } from './square';\n\nconst directions: ReadonlyArray<Point> = [\n\t{ x:  0, y: -1 },\n\t{ x:  1, y: -1 },\n\t{ x:  1, y:  0 },\n\t{ x:  1, y:  1 },\n\t{ x:  0, y:  1 },\n\t{ x: -1, y:  1 },\n\t{ x: -1, y:  0 },\n\t{ x: -1, y: -1 }\n];\n\nfunction getAffectedSquares( board: Board, position: Point, color: number ): Square[] {\n\tif( !board.boundsCheck( position ) ) { return []; }\n\tconst square = board.get( position );\n\tif( !square || !square.empty || !square.enabled ) { return []; }\n\tfunction direction( { x, y }: Point, delta: Point ): Square[] {\n\t\tconst squares = [] as Square[];\n\t\tfor( ; ; ) {\n\t\t\tx += delta.x;\n\t\t\ty += delta.y;\n\t\t\tif( !board.boundsCheck( { x, y } ) ) { return []; }\n\t\t\tconst square = board.get( { x, y } );\n\t\t\tif( !square || square.empty || !square.enabled ) { return []; }\n\t\t\tif( square.color === color ) { return squares; }\n\t\t\tsquares.push( square );\n\t\t}\n\t}\n\tlet squares = [ square ];\n\tfor( const delta of directions ) {\n\t\tsquares = [ ...squares, ...direction( position, delta ) ];\n\t}\n\tif( squares.length <= 1 ) { return []; }\n\treturn squares;\n}\n\nclass RulesStandard implements Rules {\n\tpublic readonly name: string = 'Standard';\n\tpublic readonly ruleSet: RuleSet = RuleSet.standard;\n\tpublic readonly colors: number = 2;\n\tpublic readonly boardSize: Readonly<Size> = Object.freeze( { width: 8, height: 8 } );\n\n\tpublic isValid( game: Game, gameState: GameState, position: Point, color: number ) {\n\t\treturn getAffectedSquares( Board.fromGame( game, gameState ), position, color ).length > 0;\n\t}\n\n\tpublic compareScores( score1: number, score2: number ) {\n\t\treturn score1 - score2;\n\t}\n\n\tpublic getValidMoves( game: Game, gameState: GameState, color: number ) {\n\t\tconst points = [] as Point[];\n\t\tconst { size: { width, height } } = game;\n\t\tfor( let x = 0; x < width; ++x ) {\n\t\tfor( let y = 0; y < height; ++y ) {\n\t\t\tconst point = { x, y };\n\t\t\tif( this.isValid( game, gameState, point, color ) ) points.push( point );\n\t\t}\n\t\t}\n\t\treturn points;\n\t}\n\n\tpublic isGameOver( game: Game, gameState: GameState ) {\n\t\tconst { colors } = this;\n\t\tfor( let color = 0; color < colors; ++color ) {\n\t\t\tif( this.getValidMoves( game, gameState, color ).length > 0 ) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic makeMove( game: Game, gameState: GameState, position: Readonly<Point> ) {\n\t\tconst { turn: prevTurn, index: prevIndex } = gameState;\n\t\tconst board = Board.fromGame( game, gameState );\n\t\tconst squares = getAffectedSquares( board, position, prevTurn );\n\t\tif( squares.length === 0 ) return null;\n\t\tfor( const square of squares ) {\n\t\t\tsquare.color = prevTurn;\n\t\t}\n\t\tconst index = prevIndex + 1;\n\t\tconst lastMove = Object.freeze( { ...position } );\n\t\tconst data = board.getData();\n\t\tconst { colors } = this;\n\t\tlet turn: number|null = null;\n\t\tfor( let i = 0; i < colors; ++i ) {\n\t\t\tconst t = ( prevTurn + 1 + i ) % colors;\n\t\t\tif( this.getValidMoves( game, { turn: t, index, data, lastMove }, t ).length > 0 ) {\n\t\t\t\tturn = t;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn { turn, index, data, lastMove };\n\t}\n\n\tpublic getScore( game: Game, gameState: GameState, color: number ) {\n\t\tconst board = Board.fromGame( game, gameState );\n\t\tlet score = 0;\n\t\tfor( const square of board ) {\n\t\t\tif( square && square.enabled && square.color === color ) {\n\t\t\t\t++score;\n\t\t\t}\n\t\t}\n\t\treturn score;\n\t}\n\n\tpublic newGame( gameId: string ) {\n\t\tconst { boardSize } = this;\n\n\t\tconst board = new Board;\n\t\tboard.reset( boardSize );\n\t\t// TODO: center? gets ugly with an odd dimension\n\t\tboard.get( { x: 3, y: 3 } ).color = 0;\n\t\tboard.get( { x: 4, y: 3 } ).color = 1;\n\t\tboard.get( { x: 3, y: 4 } ).color = 1;\n\t\tboard.get( { x: 4, y: 4 } ).color = 0;\n\t\tconst gameStates = [ {\n\t\t\tturn: 0,\n\t\t\tindex: 0,\n\t\t\tdata: board.getData(),\n\t\t\tlastMove: null\n\t\t} as GameState ];\n\t\treturn {\n\t\t\tgameId,\n\t\t\truleSet: this.ruleSet,\n\t\t\tmask: board.getMask(),\n\t\t\tcolors: Object.freeze( [ 'black', 'white' ] ),\n\t\t\tsize: Object.freeze( { ...boardSize } ),\n\t\t\tgameStates: Object.freeze( gameStates )\n\t\t};\n\t}\n}\n\nclass RulesReversed extends RulesStandard {\n\tpublic readonly name: string = 'Reversed';\n\tpublic readonly ruleSet: RuleSet = RuleSet.reversed;\n\n\tpublic compareScores( score1: number, score2: number ) {\n\t\treturn score2 - score1;\n\t}\n}\n\nexport const rulesStandard = new RulesStandard;\nexport const rulesReversed = new RulesReversed;\nexport const ruleSets = [ rulesStandard, rulesReversed ] as Rules[];\nexport const ruleSetMap = new Map<RuleSet, Rules>();\nfor( const ruleSet of ruleSets ) {\n\truleSetMap.set( ruleSet.ruleSet, ruleSet );\n}\n","import { Grid } from 'src/grid';\nimport { Bounds } from 'src/bounds';\nimport { Square } from 'src/square';\nimport { zip } from 'lodash';\n\nexport class Board {\n\tpublic reset( { width, height }: Readonly<Size> ) {\n\t\tconst grid = new Grid<Square>( width, height ),\n\t\t\tsquareSize: Size = { width: 64, height: 64 },\n\t\t\tgutterSize: Size = { width: 6, height: 6 },\n\t\t\tbounds = new Bounds(\n\t\t\t\t0.5,\n\t\t\t\t0.5,\n\t\t\t\t1 + width * ( squareSize.width + gutterSize.width ) + gutterSize.width,\n\t\t\t\t1 + height * ( squareSize.height + gutterSize.height ) + gutterSize.height\n\t\t\t);\n\t\tfor( let x = 0; x < width; ++x ) {\n\t\tfor( let y = 0; y < height; ++y ) {\n\t\t\tconst position = { x, y },\n\t\t\t\tbounds = new Bounds(\n\t\t\t\t\t0.5 + x * ( squareSize.width + gutterSize.width ) + gutterSize.width,\n\t\t\t\t\t0.5 + y * ( squareSize.height + gutterSize.height ) + gutterSize.height,\n\t\t\t\t\t0.5 + squareSize.width,\n\t\t\t\t\t0.5 + squareSize.height\n\t\t\t\t);\n\t\t\tgrid.set( { x, y }, new Square( position, bounds ) );\n\t\t} }\n\t\tObject.assign( this, { grid, bounds } );\n\t}\n\n\tpublic get width() {\n\t\tconst { grid: { width } } = this;\n\t\treturn width;\n\t}\n\n\tpublic get height() {\n\t\tconst { grid: { height } } = this;\n\t\treturn height;\n\t}\n\n\tpublic get( { x, y }: Point ) {\n\t\tconst { grid } = this;\n\t\treturn grid.get( { x, y } )!;\n\t}\n\n\tpublic boundsCheck( { x, y }: Point ) {\n\t\tconst { grid } = this;\n\t\treturn grid.boundsCheck( { x, y } )!;\n\t}\n\n\tpublic getData() {\n\t\treturn Object.freeze( Array.from( this.grid ).map( sq => sq.empty ? null : sq.color ) );\n\t}\n\n\tpublic setData( data: ReadonlyArray<number> ) {\n\t\tfor( const [ color, square ] of zip( data, Array.from( this.grid ) ) ) {\n\t\t\tsquare.color = color;\n\t\t}\n\t}\n\n\tpublic getGameState( index: number ) {\n\t\treturn {\n\t\t\tindex,\n\n\t\t\tdata: this.getData()\n\t\t} as GameState;\n\t}\n\n\tpublic getMask() {\n\t\treturn Object.freeze( Array.from( this.grid ).map( sq => sq.enabled ) );\n\t}\n\n\tpublic setMask( mask: ReadonlyArray<boolean> ) {\n\t\tfor( const [ enabled, square ] of zip( mask, Array.from( this.grid ) ) ) {\n\t\t\tsquare.enabled = enabled;\n\t\t}\n\t}\n\n\tpublic static fromGame( game: Game, gameState: GameState ) {\n\t\tconst board = new Board;\n\t\tboard.reset( game.size );\n\t\tboard.setData( gameState.data );\n\t\tboard.setMask( game.mask );\n\t\treturn board;\n\t}\n\n\tpublic [Symbol.iterator]() {\n\t\tconst { grid } = this;\n\t\treturn grid[ Symbol.iterator ]() as IterableIterator<Square>;\n\t}\n\n\tpublic hitTest( pt: Point ): Square|null {\n\t\tfor( const square of this ) {\n\t\t\tif( square.bounds.hitTest( pt ) ) {\n\t\t\t\treturn square;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic bounds = new Bounds( 0, 0, 0, 0 );\n\tprivate grid = new Grid<Square>( 0, 0 );\n}\n","function validate<T>( grid: Grid<T>, { x, y }: Point ) {\n\tif( !Number.isSafeInteger( x ) || !Number.isSafeInteger( y ) ) {\n\t\tthrow new Error( `(${x}, ${y}) is not valid` );\n\t}\n\tif( !grid.boundsCheck( { x, y } ) ) {\n\t\tthrow new Error( `(${x}, ${y}) is out of bounds` );\n\t}\n}\n\nexport class Grid<T> {\n\tpublic constructor( public readonly width: number, public readonly height: number ) {}\n\n\tpublic boundsCheck( { x, y }: Point ) {\n\t\tconst { width, height } = this;\n\t\treturn x >= 0 && x < width && y >= 0 && y < height;\n\t}\n\n\tpublic get( { x, y }: Point ) {\n\t\tvalidate( this, { x, y } );\n\t\tconst key = JSON.stringify( { x, y } );\n\t\treturn this.data.get( key );\n\t}\n\n\tpublic set( { x, y }: Point, value: T ) {\n\t\tvalidate( this, { x, y } );\n\t\tconst key = JSON.stringify( { x, y } );\n\t\tthis.data.set( key, value );\n\t}\n\n\tpublic [Symbol.iterator]() {\n\t\tfunction *iterator( this: Grid<T> ) {\n\t\t\tconst { width, height } = this;\n\t\t\tfor( let x = 0; x < width; ++x ) {\n\t\t\tfor( let y = 0; y < height; ++ y ) {\n\t\t\t\tyield this.get( { x, y } );\n\t\t\t} }\n\t\t}\n\t\treturn iterator.call( this ) as IterableIterator<T|undefined>;\n\t}\n\n\tprivate data = new Map<string, T>();\n}\n","export class Bounds {\n\tpublic constructor(\n\t\tpublic readonly left: number,\n\t\tpublic readonly top: number,\n\t\tpublic readonly width: number,\n\t\tpublic readonly height: number\n\t) {}\n\n\tpublic get bottom() {\n\t\tconst { top, height } = this;\n\t\treturn top + height;\n\t}\n\n\tpublic get right() {\n\t\tconst { left, width } = this;\n\t\treturn left + width;\n\t}\n\n\tpublic get center() {\n\t\tconst { left, top, width, height } = this,\n\t\t\tx = left + width * .5,\n\t\t\ty = top + height * .5;\n\t\treturn { x, y };\n\t}\n\n\tpublic get n() {\n\t\tconst { left, top, width } = this,\n\t\t\tx = left + width * .5,\n\t\t\ty = top;\n\t\treturn { x, y };\n\t}\n\n\tpublic get ne() {\n\t\tconst { left, top, width } = this,\n\t\t\tx = left + width,\n\t\t\ty = top;\n\t\treturn { x, y };\n\t}\n\n\tpublic get e() {\n\t\tconst { left, top, width, height } = this,\n\t\t\tx = left + width,\n\t\t\ty = top + height * .5;\n\t\treturn { x, y };\n\t}\n\n\tpublic get se() {\n\t\tconst { left, top, width, height } = this,\n\t\t\tx = left + width,\n\t\t\ty = top + height;\n\t\treturn { x, y };\n\t}\n\n\tpublic get s() {\n\t\tconst { left, top, width, height } = this,\n\t\t\tx = left + width * .5,\n\t\t\ty = top + height;\n\t\treturn { x, y };\n\t}\n\n\tpublic get sw() {\n\t\tconst { left, top, height } = this,\n\t\t\tx = left,\n\t\t\ty = top + height;\n\t\treturn { x, y };\n\t}\n\n\tpublic get w() {\n\t\tconst { left, top, height } = this,\n\t\t\tx = left,\n\t\t\ty = top + height * .5;\n\t\treturn { x, y };\n\t}\n\n\tpublic get nw() {\n\t\tconst { left, top } = this,\n\t\t\tx = left,\n\t\t\ty = top;\n\t\treturn { x, y };\n\t}\n\n\tpublic hitTest( { x, y }: Point ) {\n\t\tconst { top, right, bottom, left } = this;\n\t\treturn x >= left && x <= right\n\t\t\t&& y >= top && y <= bottom;\n\t}\n}\n","import { Bounds } from 'src/bounds';\n\nexport class Square {\n\tpublic constructor(\n\t\tpublic readonly position: Point,\n\t\tpublic readonly bounds: Bounds\n\t) {}\n\n\tpublic enabled = true;\n\tpublic color: number|null = null;\n\n\tpublic get empty() { return this.color === null; }\n}\n","import express from 'express';\nimport csp from 'express-csp';\nimport path from 'path';\nimport compression from 'compression';\nimport { appSettings, cspPolicy } from 'data/config.yaml';\n\nexport const app = express();\nfor( const [ key, value ] of Object.entries( appSettings ) ) {\n\tapp.set( key, value );\n}\napp.use( compression(), express.static( path.join( __dirname, 'www' ) ) );\ncsp.extend( app, cspPolicy );\napp.use( require( 'body-parser' ).json() );\napp.get( '/health', ( req, res ) => {\n\tres.writeHead( 200 );\n\tres.end();\n} );\n","import { compare, genSalt, hash } from 'bcrypt-nodejs';\nimport { promisify } from 'util';\n\nexport async function hashPassword( password: string ) {\n\tif( !password ) return '';\n\tconst salt = await promisify( genSalt )( null );\n\tconst passwordHash = await promisify( hash )( password, salt, null );\n\treturn passwordHash;\n}\n\nexport async function checkPassword( password: string, passwordHash: string ) {\n\t// if a password is specified but hash is empty, go ahead and compare anyway to prevent timing attacks\n\tif( !password && !passwordHash ) return true;\n\tconst result = await promisify( compare )( password, passwordHash );\n\treturn result;\n}\n"],"sourceRoot":""}