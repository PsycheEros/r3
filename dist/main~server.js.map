{"version":3,"sources":["webpack:///./src/board.ts","webpack:///./src/bounds.ts","webpack:///./src/grid.ts","webpack:///./src/rule-sets.ts","webpack:///./src/server/app.ts","webpack:///./src/server/game-state.entity.ts","webpack:///./src/server/game.entity.ts","webpack:///./src/server/health.endpoint.ts","webpack:///./src/server/login.entity.ts","webpack:///./src/server/main.ts","webpack:///./src/server/metadata.field.ts","webpack:///./src/server/point.field.ts","webpack:///./src/server/room.entity.ts","webpack:///./src/server/security.ts","webpack:///./src/server/session.entity.ts","webpack:///./src/server/size.field.ts","webpack:///./src/server/socket.ts","webpack:///./src/server/user.entity.ts","webpack:///./src/square.ts","webpack:///./src/validation.ts"],"names":[],"mappings":"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","file":"main~server.js","sourcesContent":["import { Grid } from 'src/grid';\r\nimport { Bounds } from 'src/bounds';\r\nimport { Square } from 'src/square';\r\nimport { zip } from 'lodash';\r\n\r\nexport class Board {\r\n\tpublic reset( { width, height }: Readonly<Size> ) {\r\n\t\tconst grid = new Grid<Square>( width, height ),\r\n\t\t\tsquareSize: Size = { width: 64, height: 64 },\r\n\t\t\tgutterSize: Size = { width: 6, height: 6 },\r\n\t\t\tbounds = new Bounds(\r\n\t\t\t\t0.5,\r\n\t\t\t\t0.5,\r\n\t\t\t\t1 + width * ( squareSize.width + gutterSize.width ) + gutterSize.width,\r\n\t\t\t\t1 + height * ( squareSize.height + gutterSize.height ) + gutterSize.height\r\n\t\t\t);\r\n\t\tfor( let x = 0; x < width; ++x ) {\r\n\t\tfor( let y = 0; y < height; ++y ) {\r\n\t\t\tconst position = { x, y },\r\n\t\t\t\tbounds = new Bounds(\r\n\t\t\t\t\t0.5 + x * ( squareSize.width + gutterSize.width ) + gutterSize.width,\r\n\t\t\t\t\t0.5 + y * ( squareSize.height + gutterSize.height ) + gutterSize.height,\r\n\t\t\t\t\t0.5 + squareSize.width,\r\n\t\t\t\t\t0.5 + squareSize.height\r\n\t\t\t\t);\r\n\t\t\tgrid.set( { x, y }, new Square( position, bounds ) );\r\n\t\t} }\r\n\t\tObject.assign( this, { grid, bounds } );\r\n\t}\r\n\r\n\tpublic get width() {\r\n\t\tconst { grid: { width } } = this;\r\n\t\treturn width;\r\n\t}\r\n\r\n\tpublic get height() {\r\n\t\tconst { grid: { height } } = this;\r\n\t\treturn height;\r\n\t}\r\n\r\n\tpublic get( { x, y }: Point ) {\r\n\t\tconst { grid } = this;\r\n\t\treturn grid.get( { x, y } )!;\r\n\t}\r\n\r\n\tpublic boundsCheck( { x, y }: Point ) {\r\n\t\tconst { grid } = this;\r\n\t\treturn grid.boundsCheck( { x, y } )!;\r\n\t}\r\n\r\n\tpublic getData() {\r\n\t\treturn Object.freeze( Array.from( this.grid ).map( sq => sq.empty ? null : sq.color ) );\r\n\t}\r\n\r\n\tpublic setData( data: ReadonlyArray<number> ) {\r\n\t\tfor( const [ color, square ] of zip( data, Array.from( this.grid ) ) ) {\r\n\t\t\tsquare.color = color;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getGameState( index: number ) {\r\n\t\treturn {\r\n\t\t\tindex,\r\n\r\n\t\t\tdata: this.getData()\r\n\t\t} as GameState;\r\n\t}\r\n\r\n\tpublic getMask() {\r\n\t\treturn Object.freeze( Array.from( this.grid ).map( sq => sq.enabled ) );\r\n\t}\r\n\r\n\tpublic setMask( mask: ReadonlyArray<boolean> ) {\r\n\t\tfor( const [ enabled, square ] of zip( mask, Array.from( this.grid ) ) ) {\r\n\t\t\tsquare.enabled = enabled;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static fromGame( game: Game, gameState: GameState ) {\r\n\t\tconst board = new Board;\r\n\t\tboard.reset( game.size );\r\n\t\tboard.setData( gameState.data );\r\n\t\tboard.setMask( game.mask );\r\n\t\treturn board;\r\n\t}\r\n\r\n\tpublic [Symbol.iterator]() {\r\n\t\tconst { grid } = this;\r\n\t\treturn grid[ Symbol.iterator ]() as IterableIterator<Square>;\r\n\t}\r\n\r\n\tpublic hitTest( pt: Point ): Square|null {\r\n\t\tfor( const square of this ) {\r\n\t\t\tif( square.bounds.hitTest( pt ) ) {\r\n\t\t\t\treturn square;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic bounds = new Bounds( 0, 0, 0, 0 );\r\n\tprivate grid = new Grid<Square>( 0, 0 );\r\n}\r\n","export class Bounds {\r\n\tpublic constructor(\r\n\t\tpublic readonly left: number,\r\n\t\tpublic readonly top: number,\r\n\t\tpublic readonly width: number,\r\n\t\tpublic readonly height: number\r\n\t) {}\r\n\r\n\tpublic get bottom() {\r\n\t\tconst { top, height } = this;\r\n\t\treturn top + height;\r\n\t}\r\n\r\n\tpublic get right() {\r\n\t\tconst { left, width } = this;\r\n\t\treturn left + width;\r\n\t}\r\n\r\n\tpublic get center() {\r\n\t\tconst { left, top, width, height } = this,\r\n\t\t\tx = left + width * .5,\r\n\t\t\ty = top + height * .5;\r\n\t\treturn { x, y };\r\n\t}\r\n\r\n\tpublic get n() {\r\n\t\tconst { left, top, width } = this,\r\n\t\t\tx = left + width * .5,\r\n\t\t\ty = top;\r\n\t\treturn { x, y };\r\n\t}\r\n\r\n\tpublic get ne() {\r\n\t\tconst { left, top, width } = this,\r\n\t\t\tx = left + width,\r\n\t\t\ty = top;\r\n\t\treturn { x, y };\r\n\t}\r\n\r\n\tpublic get e() {\r\n\t\tconst { left, top, width, height } = this,\r\n\t\t\tx = left + width,\r\n\t\t\ty = top + height * .5;\r\n\t\treturn { x, y };\r\n\t}\r\n\r\n\tpublic get se() {\r\n\t\tconst { left, top, width, height } = this,\r\n\t\t\tx = left + width,\r\n\t\t\ty = top + height;\r\n\t\treturn { x, y };\r\n\t}\r\n\r\n\tpublic get s() {\r\n\t\tconst { left, top, width, height } = this,\r\n\t\t\tx = left + width * .5,\r\n\t\t\ty = top + height;\r\n\t\treturn { x, y };\r\n\t}\r\n\r\n\tpublic get sw() {\r\n\t\tconst { left, top, height } = this,\r\n\t\t\tx = left,\r\n\t\t\ty = top + height;\r\n\t\treturn { x, y };\r\n\t}\r\n\r\n\tpublic get w() {\r\n\t\tconst { left, top, height } = this,\r\n\t\t\tx = left,\r\n\t\t\ty = top + height * .5;\r\n\t\treturn { x, y };\r\n\t}\r\n\r\n\tpublic get nw() {\r\n\t\tconst { left, top } = this,\r\n\t\t\tx = left,\r\n\t\t\ty = top;\r\n\t\treturn { x, y };\r\n\t}\r\n\r\n\tpublic hitTest( { x, y }: Point ) {\r\n\t\tconst { top, right, bottom, left } = this;\r\n\t\treturn x >= left && x <= right\r\n\t\t\t&& y >= top && y <= bottom;\r\n\t}\r\n}\r\n","function validate<T>( grid: Grid<T>, { x, y }: Point ) {\r\n\tif( !Number.isSafeInteger( x ) || !Number.isSafeInteger( y ) ) {\r\n\t\tthrow new Error( `(${x}, ${y}) is not valid` );\r\n\t}\r\n\tif( !grid.boundsCheck( { x, y } ) ) {\r\n\t\tthrow new Error( `(${x}, ${y}) is out of bounds` );\r\n\t}\r\n}\r\n\r\nexport class Grid<T> {\r\n\tpublic constructor( public readonly width: number, public readonly height: number ) {}\r\n\r\n\tpublic boundsCheck( { x, y }: Point ) {\r\n\t\tconst { width, height } = this;\r\n\t\treturn x >= 0 && x < width && y >= 0 && y < height;\r\n\t}\r\n\r\n\tpublic get( { x, y }: Point ) {\r\n\t\tvalidate( this, { x, y } );\r\n\t\tconst key = JSON.stringify( { x, y } );\r\n\t\treturn this.data.get( key );\r\n\t}\r\n\r\n\tpublic set( { x, y }: Point, value: T ) {\r\n\t\tvalidate( this, { x, y } );\r\n\t\tconst key = JSON.stringify( { x, y } );\r\n\t\tthis.data.set( key, value );\r\n\t}\r\n\r\n\tpublic [Symbol.iterator]() {\r\n\t\tfunction *iterator( this: Grid<T> ) {\r\n\t\t\tconst { width, height } = this;\r\n\t\t\tfor( let x = 0; x < width; ++x ) {\r\n\t\t\tfor( let y = 0; y < height; ++ y ) {\r\n\t\t\t\tyield this.get( { x, y } );\r\n\t\t\t} }\r\n\t\t}\r\n\t\treturn iterator.call( this ) as IterableIterator<T|undefined>;\r\n\t}\r\n\r\n\tprivate data = new Map<string, T>();\r\n}\r\n","import { Board } from './board';\r\nimport { Square } from './square';\r\n\r\nconst directions: ReadonlyArray<Point> = [\r\n\t{ x:  0, y: -1 },\r\n\t{ x:  1, y: -1 },\r\n\t{ x:  1, y:  0 },\r\n\t{ x:  1, y:  1 },\r\n\t{ x:  0, y:  1 },\r\n\t{ x: -1, y:  1 },\r\n\t{ x: -1, y:  0 },\r\n\t{ x: -1, y: -1 }\r\n];\r\n\r\nfunction getAffectedSquares( board: Board, position: Point, color: number ): Square[] {\r\n\tif( !board.boundsCheck( position ) ) { return []; }\r\n\tconst square = board.get( position );\r\n\tif( !square || !square.empty || !square.enabled ) { return []; }\r\n\tfunction direction( { x, y }: Point, delta: Point ): Square[] {\r\n\t\tconst squares = [] as Square[];\r\n\t\tfor( ; ; ) {\r\n\t\t\tx += delta.x;\r\n\t\t\ty += delta.y;\r\n\t\t\tif( !board.boundsCheck( { x, y } ) ) { return []; }\r\n\t\t\tconst square = board.get( { x, y } );\r\n\t\t\tif( !square || square.empty || !square.enabled ) { return []; }\r\n\t\t\tif( square.color === color ) { return squares; }\r\n\t\t\tsquares.push( square );\r\n\t\t}\r\n\t}\r\n\tlet squares = [ square ];\r\n\tfor( const delta of directions ) {\r\n\t\tsquares = [ ...squares, ...direction( position, delta ) ];\r\n\t}\r\n\tif( squares.length <= 1 ) { return []; }\r\n\treturn squares;\r\n}\r\n\r\nclass RulesStandard implements Rules {\r\n\tpublic readonly name: string = 'Standard';\r\n\tpublic readonly ruleSet: RuleSet = RuleSet.standard;\r\n\tpublic readonly colors: number = 2;\r\n\tpublic readonly boardSize: Readonly<Size> = Object.freeze( { width: 8, height: 8 } );\r\n\r\n\tpublic isValid( game: Game, gameState: GameState, position: Point, color: number ) {\r\n\t\treturn getAffectedSquares( Board.fromGame( game, gameState ), position, color ).length > 0;\r\n\t}\r\n\r\n\tpublic compareScores( score1: number, score2: number ) {\r\n\t\treturn score1 - score2;\r\n\t}\r\n\r\n\tpublic getValidMoves( game: Game, gameState: GameState, color: number ) {\r\n\t\tconst points = [] as Point[];\r\n\t\tconst { size: { width, height } } = game;\r\n\t\tfor( let x = 0; x < width; ++x ) {\r\n\t\tfor( let y = 0; y < height; ++y ) {\r\n\t\t\tconst point = { x, y };\r\n\t\t\tif( this.isValid( game, gameState, point, color ) ) points.push( point );\r\n\t\t}\r\n\t\t}\r\n\t\treturn points;\r\n\t}\r\n\r\n\tpublic isGameOver( game: Game, gameState: GameState ) {\r\n\t\tconst { colors } = this;\r\n\t\tfor( let color = 0; color < colors; ++color ) {\r\n\t\t\tif( this.getValidMoves( game, gameState, color ).length > 0 ) return false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic makeMove( game: Game, gameState: GameState, position: Readonly<Point> ) {\r\n\t\tconst { turn: prevTurn, index: prevIndex } = gameState;\r\n\t\tconst board = Board.fromGame( game, gameState );\r\n\t\tconst squares = getAffectedSquares( board, position, prevTurn );\r\n\t\tif( squares.length === 0 ) return null;\r\n\t\tfor( const square of squares ) {\r\n\t\t\tsquare.color = prevTurn;\r\n\t\t}\r\n\t\tconst index = prevIndex + 1;\r\n\t\tconst lastMove = Object.freeze( { ...position } );\r\n\t\tconst data = board.getData();\r\n\t\tconst { colors } = this;\r\n\t\tlet turn: number|null = null;\r\n\t\tfor( let i = 0; i < colors; ++i ) {\r\n\t\t\tconst t = ( prevTurn + 1 + i ) % colors;\r\n\t\t\tif( this.getValidMoves( game, { turn: t, index, data, lastMove }, t ).length > 0 ) {\r\n\t\t\t\tturn = t;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn { turn, index, data, lastMove };\r\n\t}\r\n\r\n\tpublic getScore( game: Game, gameState: GameState, color: number ) {\r\n\t\tconst board = Board.fromGame( game, gameState );\r\n\t\tlet score = 0;\r\n\t\tfor( const square of board ) {\r\n\t\t\tif( square && square.enabled && square.color === color ) {\r\n\t\t\t\t++score;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn score;\r\n\t}\r\n\r\n\tpublic newGame( gameId: string ) {\r\n\t\tconst { boardSize } = this;\r\n\r\n\t\tconst board = new Board;\r\n\t\tboard.reset( boardSize );\r\n\t\t// TODO: center? gets ugly with an odd dimension\r\n\t\tboard.get( { x: 3, y: 3 } ).color = 0;\r\n\t\tboard.get( { x: 4, y: 3 } ).color = 1;\r\n\t\tboard.get( { x: 3, y: 4 } ).color = 1;\r\n\t\tboard.get( { x: 4, y: 4 } ).color = 0;\r\n\t\tconst gameStates = [ {\r\n\t\t\tturn: 0,\r\n\t\t\tindex: 0,\r\n\t\t\tdata: board.getData(),\r\n\t\t\tlastMove: null\r\n\t\t} as GameState ];\r\n\t\treturn {\r\n\t\t\tgameId,\r\n\t\t\truleSet: this.ruleSet,\r\n\t\t\tmask: board.getMask(),\r\n\t\t\tcolors: Object.freeze( [ 'black', 'white' ] ),\r\n\t\t\tsize: Object.freeze( { ...boardSize } ),\r\n\t\t\tgameStates: Object.freeze( gameStates )\r\n\t\t};\r\n\t}\r\n}\r\n\r\nclass RulesReversed extends RulesStandard {\r\n\tpublic readonly name: string = 'Reversed';\r\n\tpublic readonly ruleSet: RuleSet = RuleSet.reversed;\r\n\r\n\tpublic compareScores( score1: number, score2: number ) {\r\n\t\treturn score2 - score1;\r\n\t}\r\n}\r\n\r\nexport const rulesStandard = new RulesStandard;\r\nexport const rulesReversed = new RulesReversed;\r\nexport const ruleSets = [ rulesStandard, rulesReversed ] as Rules[];\r\nexport const ruleSetMap = new Map<RuleSet, Rules>();\r\nfor( const ruleSet of ruleSets ) {\r\n\truleSetMap.set( ruleSet.ruleSet, ruleSet );\r\n}\r\n","import express from 'express';\r\nimport csp from 'express-csp';\r\nimport path from 'path';\r\nimport compression from 'compression';\r\nimport { Server } from 'http';\r\nimport { AddressInfo } from 'net';\r\nimport { appSettings, cspPolicy } from 'data/config.yaml';\r\nimport { shutDown, shuttingDown } from './shut-down';\r\n\r\nexport const app = express();\r\nfor( const [ key, value ] of Object.entries( appSettings ) ) {\r\n\tapp.set( key, value );\r\n}\r\napp.use( compression(), express.static( path.join( __dirname, 'www' ) ) );\r\ncsp.extend( app, cspPolicy );\r\napp.use( require( 'body-parser' ).json() );\r\n\r\nexport const server = new Server( app );\r\n\r\nserver.listen( app.get( 'port' ), app.get( 'host' ), err => {\r\n\tif( err ) {\r\n\t\tconsole.error( err );\r\n\t\tshutDown();\r\n\t\treturn;\r\n\t}\r\n\tconst { address, port } = server.address() as AddressInfo;\r\n\tconsole.log( `Process ${process.pid} listening at ${address}:${port}...` );\r\n} );\r\n\r\nshuttingDown.subscribe( () => {\r\n\tserver.close( () => {} );\r\n} );\r\n\r\nrequire( './health.endpoint' ).register( app );\r\n","import { Entity, Column, PrimaryColumn, ManyToOne, CreateDateColumn } from 'typeorm';\r\nimport { GameEntity } from './game.entity';\r\nimport { PointFieldNull } from './point.field';\r\nimport { MetadataField } from './metadata.field';\r\n\r\n@Entity( 'GameState' )\r\nexport class GameStateEntity {\r\n\t@PrimaryColumn( 'uuid' )\r\n\tpublic gameId: string;\r\n\r\n\t@PrimaryColumn( { type: 'integer' } )\r\n\tpublic index: number;\r\n\r\n\t@Column( () => MetadataField )\r\n\tpublic meta: MetadataField;\r\n\r\n\t@ManyToOne( () => GameEntity, game => game.gameStates )\r\n\tpublic game: GameEntity;\r\n\r\n\t@Column( { type: 'integer', nullable: true } )\r\n\tpublic turn: number|null;\r\n\r\n\t@Column( () => PointFieldNull )\r\n\tpublic lastMove: PointFieldNull;\r\n\r\n\t@Column( { type: 'simple-array' } )\r\n\tpublic data: string[];\r\n}\r\n","import { Entity, PrimaryGeneratedColumn, OneToOne, OneToMany, Column, CreateDateColumn, UpdateDateColumn } from 'typeorm';\r\nimport { GameStateEntity } from './game-state.entity';\r\nimport { RoomEntity } from './room.entity';\r\nimport { MetadataField } from './metadata.field';\r\nimport { sortBy } from 'lodash';\r\nimport { SizeField } from 'server/size.field';\r\n\r\n@Entity( 'Game' )\r\nexport class GameEntity {\r\n\t@PrimaryGeneratedColumn( 'uuid' )\r\n\tpublic id: string;\r\n\r\n\t@Column( () => MetadataField )\r\n\tpublic meta: MetadataField;\r\n\r\n\t@Column( 'simple-array' )\r\n\tpublic colors: string[];\r\n\r\n\t@OneToMany( () => GameStateEntity, gameState => gameState.game, {\r\n\t\tcascade: true\r\n\t} )\r\n\tpublic gameStates: GameStateEntity[];\r\n\r\n\t@Column( () => SizeField )\r\n\tpublic size: SizeField;\r\n\r\n\t@Column()\r\n\tpublic mask: string;\r\n\r\n\t@OneToOne( () => RoomEntity, { nullable: true } )\r\n\tpublic room: RoomEntity;\r\n\r\n\t@Column()\r\n\tpublic ruleSet: RuleSet;\r\n\r\n\tstatic toGame( gameEntity: GameEntity ): Game {\r\n\t\tconst gameStates = sortBy( gameEntity.gameStates, gs => gs.index );\r\n\t\treturn {\r\n\t\t\tgameId: gameEntity.id,\r\n\t\t\tsize: { ...gameEntity.size },\r\n\t\t\tcolors: [ ...gameEntity.colors ],\r\n\t\t\tmask: gameEntity.mask.split( '' ).map( m => m === '1' ),\r\n\t\t\truleSet: gameEntity.ruleSet,\r\n\t\t\tgameStates: gameStates.map( gs => ( {\r\n\t\t\t\tindex: gs.index,\r\n\t\t\t\tturn: gs.turn,\r\n\t\t\t\tdata: gs.data.map( v => ( v === 'x' ) ? null : parseInt( v, 10 ) ),\r\n\t\t\t\tlastMove: ( gs.lastMove.x == null || gs.lastMove.y == null ) ? null : { ...gs.lastMove }\r\n\t\t\t} ) )\r\n\t\t};\r\n\t}\r\n}\r\n","import { Express } from 'express';\r\n\r\nexport function register( app: Express ) {\r\n\tapp.get( '/health', ( req, res ) => {\r\n\t\tres.writeHead( 200 );\r\n\t\tres.end();\r\n\t} );\r\n}\r\n","import { Entity, Index, Column, PrimaryGeneratedColumn, OneToOne, CreateDateColumn } from 'typeorm';\r\nimport { UserEntity } from './user.entity';\r\nimport { MetadataField } from 'server/metadata.field';\r\n\r\n@Entity( 'Login' )\r\nexport class LoginEntity {\r\n\t@PrimaryGeneratedColumn( 'uuid' )\r\n\tpublic id: string;\r\n\r\n\t@Column( () => MetadataField )\r\n\tpublic meta: MetadataField;\r\n\r\n\t@Column()\r\n\t@Index( { unique: true } )\r\n\tpublic username: string;\r\n\r\n\t@Column()\r\n\tpublic passwordHash: string;\r\n\r\n\t@OneToOne( () => UserEntity, user => user.login )\r\n\tpublic user: UserEntity;\r\n\r\n\t@Column( 'uuid', { nullable: true } )\r\n\tpublic userId: string;\r\n}\r\n","import './error-handler';\r\nimport './polyfills';\r\n\r\nimport { createConnection, EntityManager } from 'typeorm';\r\nimport { Subject, interval, of } from 'rxjs';\r\nimport { onErrorResumeNext, mergeMap, take, tap, takeUntil } from 'rxjs/operators';\r\nimport { fromNodeEvent } from './rxjs';\r\nimport { isValidNick, isValidRoomName } from 'src/validation';\r\nimport { GameEntity } from './game.entity';\r\nimport { GameStateEntity } from './game-state.entity';\r\nimport { LoginEntity } from './login.entity';\r\nimport { RoomEntity } from './room.entity';\r\nimport { SessionEntity } from './session.entity';\r\nimport { UserEntity } from './user.entity';\r\nimport { ruleSetMap } from 'src/rule-sets';\r\nimport { io } from './socket';\r\nimport { connectionOptions, cleanup as cleanupConfig } from 'data/config.yaml';\r\nimport { colors } from 'data/colors.yaml';\r\nimport { hashPassword, checkPassword } from './security';\r\nimport sleep from 'sleep-promise';\r\n\r\nimport uuid from 'uuid/v4';\r\nimport moment from 'moment';\r\nimport assert from 'assert';\r\n\r\ntype CallbackEvent<T = {}, U = {}> = [ T, ( error: Error|null, value: U|null ) => void ];\r\n\r\n\r\n\r\nfunction getSocket( sessionId: string ) {\r\n\treturn Object.entries( io.of( '/' ).connected )\r\n\t.filter( ( [ id, socket ] ) => id === sessionId )\r\n\t.map( ( [ id, socket ] ) => socket )[ 0 ]\r\n\t|| null;\r\n}\r\n\r\nasync function getJoinedRoomIds( manager: EntityManager, sessionId: string ) {\r\n\tconst socket = getSocket( sessionId );\r\n\tif( !socket ) return [];\r\n\tconst rooms = await manager.findByIds( RoomEntity, Object.keys( socket.rooms ) );\r\n\treturn rooms.map( room => room.id );\r\n}\r\n\r\nasync function joinRoom( manager: EntityManager, roomId: string, sessionId: string ) {\r\n\tconst socket = getSocket( sessionId );\r\n\tawait new Promise( ( resolve, reject ) => {\r\n\t\tsocket.join( roomId, err => {\r\n\t\t\tif( err ) { reject( err ); }\r\n\t\t\telse { resolve(); }\r\n\t\t} );\r\n\t} );\r\n\tawait flushJoinedRooms( manager, sessionId );\r\n\tawait flushUpdate( manager, roomId, sessionId );\r\n\tconst { nick } = await manager.findOne( SessionEntity, sessionId, { select: [ 'nick' ] } );\r\n\tawait statusMessage( roomId, `${nick} has joined the room.` );\r\n\r\n\t// HACK\r\n\tawait sleep( 100 );\r\n\tawait flushUpdate( manager, roomId, sessionId );\r\n}\r\n\r\nasync function flushJoinedRooms( manager: EntityManager, sessionId: string ) {\r\n\tconst roomIds = await getJoinedRoomIds( manager, sessionId );\r\n\tio.to( sessionId ).emit( 'joinedRooms', roomIds );\r\n}\r\n\r\nasync function flushRooms( manager: EntityManager, sessionId?: string ) {\r\n\tconst rooms = ( await manager.find( RoomEntity ) ).map( RoomEntity.toRoom );\r\n\tconst emitter = sessionId ? io.to( sessionId ) : io;\r\n\temitter.emit( 'rooms', rooms );\r\n}\r\n\r\nasync function leaveRoom( manager: EntityManager, sessionId: string, roomId: string ) {\r\n\tconst socket = getSocket( sessionId );\r\n\tawait new Promise( ( resolve, reject ) => {\r\n\t\tsocket.leave( roomId, err => {\r\n\t\t\tif( err ) {\r\n\t\t\t\treject( err );\r\n\t\t\t} else {\r\n\t\t\t\tresolve();\r\n\t\t\t}\r\n\t\t} );\r\n\t} );\r\n\tawait flushJoinedRooms( manager, sessionId );\r\n\tconst { nick } = await manager.findOne( SessionEntity, sessionId, { select: [ 'nick' ] } );\r\n\tawait statusMessage( roomId, `${nick} has left the room.` );\r\n}\r\n\r\nfunction statusMessage( message: string, roomId: string, sessionId?: string ) {\r\n\tio.to( sessionId || roomId ).emit( 'message', { roomId, message } );\r\n\treturn true;\r\n}\r\n\r\nfunction chatMessage( user: string, message: string, roomId: string ) {\r\n\tio.to( roomId ).emit( 'message', { roomId, user, message } );\r\n\treturn true;\r\n}\r\n\r\nasync function flushUpdate( manager: EntityManager, roomId: string, sessionId?: string ) {\r\n\tawait transaction( manager, async manager => {\r\n\t\tconst room = await manager.findOne( RoomEntity, roomId);\r\n\t\tif( !room ) return;\r\n\t\tconst game = await manager.findOne( GameEntity, room.gameId, { relations: [ 'gameStates' ] } );\r\n\t\tif( !game ) return;\r\n\t\tio.to( sessionId || room.id ).emit( 'update', GameEntity.toGame( game ) );\r\n\t} );\r\n}\r\n\r\nasync function cleanupRooms( manager: EntityManager ) {\r\n\tawait transaction( manager, async manager => {\r\n\t\tlet removed = 0;\r\n\t\tawait Promise.all(\r\n\t\t\t( await manager.find( RoomEntity, { select: [ 'id', 'expires' ] } ) )\r\n\t\t\t.map( async room => {\r\n\t\t\t\tconst clients = await new Promise<string[]>( ( resolve, reject ) => {\r\n\t\t\t\t\tio.in( room.id ).clients( ( err, clients ) => {\r\n\t\t\t\t\t\tif( err ) reject( err );\r\n\t\t\t\t\t\telse resolve( clients );\r\n\t\t\t\t\t} );\r\n\t\t\t\t} );\r\n\t\t\t\tif( clients.length === 0 ) {\r\n\t\t\t\t\tif( room.expires ) {\r\n\t\t\t\t\t\tif( moment( room.expires ).isSameOrBefore() ) {\r\n\t\t\t\t\t\t\tconsole.log( `Deleting room ${room.id}...` );\r\n\t\t\t\t\t\t\tawait manager.remove( room );\r\n\t\t\t\t\t\t\t++removed;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconst expires = moment().add( cleanupConfig.rooms.expireSeconds, 's' );\r\n\t\t\t\t\t\tconsole.log( `Queuing room ${room.id} for deletion ${expires.fromNow()}...` );\r\n\t\t\t\t\t\troom.expires = expires.toDate();\r\n\t\t\t\t\t\tawait manager.save( room );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} )\r\n\t\t);\r\n\t\tif( removed ) await flushRooms( manager );\r\n\t} );\r\n}\r\n\r\nasync function newGame( manager: EntityManager, roomId: string, ruleSet: RuleSet ) {\r\n\tstatusMessage( 'New game', roomId );\r\n\tconst rules = ruleSetMap.get( ruleSet );\r\n\treturn await transaction( manager, async manager => {\r\n\t\tconst game = rules.newGame( uuid() );\r\n\t\tconst gameEntity = await manager.create( GameEntity, {\r\n\t\t\tid: game.gameId,\r\n\t\t\tcolors: [ ...game.colors ],\r\n\t\t\tmask: game.mask.map( v => v ? '1' : '0' ).join( '' ),\r\n\t\t\tsize: { ...game.size },\r\n\t\t\truleSet: game.ruleSet\r\n\t\t} );\r\n\t\tawait manager.save( gameEntity );\r\n\t\tawait saveGameStates( manager, game );\r\n\t\tawait manager.update( RoomEntity, roomId, { gameId: gameEntity.id } );\r\n\t\tflushRooms( manager );\r\n\t\tflushUpdate( manager, roomId );\r\n\t\treturn game;\r\n\t} );\r\n}\r\n\r\nasync function saveGameStates( manager: EntityManager, game: Game ) {\r\n\treturn await transaction( manager, async manager => {\r\n\t\tawait Promise.all(\r\n\t\t\tgame.gameStates.map( async ( gs, index ) => {\r\n\t\t\t\tlet gameState = await manager.findOne( GameStateEntity, { gameId: game.gameId, index } );\r\n\t\t\t\tif( !gameState ) gameState = await manager.create( GameStateEntity, { gameId: game.gameId, index } );\r\n\t\t\t\tgameState.turn = gs.turn;\r\n\t\t\t\tgameState.data = gs.data.map( v => ( v == null ) ? 'x' : String(v) );\r\n\t\t\t\tgameState.lastMove = { ...gs.lastMove };\r\n\t\t\t\tawait manager.save( gameState );\r\n\t\t\t} )\r\n\t\t);\r\n\t} );\r\n}\r\n\r\nconst transaction = ( () => {\r\n\tlet m: EntityManager = null;\r\n\treturn ( <T>( manager: EntityManager, fn: ( manager: EntityManager ) => Promise<T> ) => {\r\n\t\tassert( manager );\r\n\t\tif( m ) {\r\n\t\t\treturn fn( m );\r\n\t\t} else {\r\n\t\t\treturn manager.transaction<T>( async manager => {\r\n\t\t\t\tm = manager;\r\n\t\t\t\ttry {\r\n\t\t\t\t\treturn await fn( m );\r\n\t\t\t\t} finally {\r\n\t\t\t\t\tm = null;\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t}\r\n\t} );\r\n} )();\r\n\r\nasync function createRoom( manager: EntityManager, sessionId: string, name: string, password: string ) {\r\n\tif( !isValidRoomName( name ) ) throw new Error( 'Invalid room name.' );\r\n\treturn await transaction( manager, async manager => {\r\n\t\tconst roomEntity =\r\n\t\t\tawait manager.create( RoomEntity, {\r\n\t\t\t\tname,\r\n\t\t\t\tpasswordHash: await hashPassword( password )\r\n\t\t\t} );\r\n\t\tawait manager.save( roomEntity );\r\n\t\tawait joinRoom( manager, roomEntity.id, sessionId );\r\n\t\tawait newGame( manager, roomEntity.id, RuleSet.standard );\r\n\t\treturn roomEntity;\r\n\t} );\r\n}\r\n\r\nasync function makeMove( manager: EntityManager, roomId: string, position: Point ) {\r\n\treturn await transaction( manager, async manager => {\r\n\t\tconst roomEntity = await manager.findOne( RoomEntity, roomId );\r\n\t\tconst gameEntity = await manager.findOne( GameEntity, roomEntity.gameId, { relations: [ 'gameStates' ] } );\r\n\t\tconst rules = ruleSetMap.get( gameEntity.ruleSet );\r\n\t\tlet game = GameEntity.toGame( gameEntity );\r\n\t\tconst prevGameState = game.gameStates.slice( -1 )[ 0 ];\r\n\t\tconst nextGameState = rules.makeMove( game, prevGameState, position );\r\n\t\tif( !nextGameState ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tgame = {\r\n\t\t\t...game,\r\n\t\t\tgameStates: [ ...game.gameStates, nextGameState ]\r\n\t\t};\r\n\t\tawait saveGameStates( manager, game );\r\n\t\tif( rules.isGameOver( game, nextGameState ) ) {\r\n\t\t\tconst scores =\r\n\t\t\tArray.from( { length: rules.colors } )\r\n\t\t\t.map( ( _, color ) => ( {\r\n\t\t\t\tcolor: colors[ game.colors[ color ] ].displayName,\r\n\t\t\t\tscore: rules.getScore( game, nextGameState, color )\r\n\t\t\t} ) );\r\n\t\t\tscores.sort( ( c1, c2 ) => {\r\n\t\t\t\tconst r1 = rules.compareScores( c1.score, c2.score );\r\n\t\t\t\treturn ( r1 === 0 ) ? c1.color.localeCompare( c2.color ) : r1;\r\n\t\t\t} );\r\n\t\t\tconst bestScore = scores[ 0 ].score;\r\n\t\t\tconst winners = scores.filter( ( { score } ) => rules.compareScores( score, bestScore ) );\r\n\t\t\tlet message: string;\r\n\t\t\tif( winners.length !== 1 ) {\r\n\t\t\t\tmessage = 'Draw game.';\r\n\t\t\t} else {\r\n\t\t\t\tmessage = `${winners[ 0 ].color} wins.`;\r\n\t\t\t}\r\n\t\t\tawait statusMessage( `${message}:\\n${scores.map(({color, score})=>`${color}: ${score}`).join('\\n')}`, roomId );\r\n\t\t}\r\n\t\tawait flushUpdate( manager, roomId );\r\n\t\treturn true;\r\n\t} );\r\n}\r\n\r\n( async () => {\r\n\ttry {\r\n\t\tconst { manager } = await createConnection( {\r\n\t\t\t...connectionOptions,\r\n\t\t\tentities: [ GameEntity, GameStateEntity, LoginEntity, RoomEntity, SessionEntity, UserEntity ]\r\n\t\t} );\r\n\r\n\t\tinterval( moment.duration( cleanupConfig.rooms.checkSeconds, 's' ).asMilliseconds() )\r\n\t\t.subscribe( async () => {\r\n\t\t\tcleanupRooms( manager );\r\n\t\t} );\r\n\r\n\t\tlet connections = 0;\r\n\r\n\t\tfromNodeEvent<SocketIO.Socket>( io, 'connection' )\r\n\t\t.subscribe( async socket => {\r\n\t\t\tconsole.log( `User connected, ${++connections} connected, ${socket.id}` );\r\n\r\n\t\t\tconst disconnecting = fromNodeEvent( socket, 'disconnecting' ).pipe( take( 1 ) );\r\n\t\t\tconst disconnected = fromNodeEvent( socket, 'disconnect' ).pipe( take( 1 ) );\r\n\r\n\t\t\tfunction handleCallbackEvent<T extends object = {}, U = {}>( eventName: string, fn: ( value: T & { manager: EntityManager } ) => PromiseLike<U|void> ) {\r\n\t\t\t\tconst result = new Subject<U>();\r\n\t\t\t\tfromNodeEvent<CallbackEvent<T, U>>( socket, eventName )\r\n\t\t\t\t.pipe(\r\n\t\t\t\t\ttakeUntil( disconnected ),\r\n\t\t\t\t\tmergeMap<CallbackEvent<T, U>, {}>( ( [ value, callback ] ) =>\r\n\t\t\t\t\t\tof( value )\r\n\t\t\t\t\t\t.pipe(\r\n\t\t\t\t\t\t\tmergeMap( value => transaction( manager, async manager => fn( { manager, ...( value as any ) } ) ) ),\r\n\t\t\t\t\t\t\ttap( {\r\n\t\t\t\t\t\t\t\tnext( value ) {\r\n\t\t\t\t\t\t\t\t\tcallback( null, ( value == null ) ? {} as any : value );\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\terror( err ) {\r\n\t\t\t\t\t\t\t\t\tconsole.error( err );\r\n\t\t\t\t\t\t\t\t\tcallback( ( err == null ) ? {} : err.message, null );\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} ),\r\n\t\t\t\t\t\t\tonErrorResumeNext()\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t),\r\n\t\t\t\t)\r\n\t\t\t\t.subscribe( result );\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\r\n\t\t\tconst sessionId = socket.id;\r\n\t\t\tawait manager.save(\r\n\t\t\t\tawait manager.create( SessionEntity, { id: sessionId, nick: 'Guest' } )\r\n\t\t\t);\r\n\r\n\t\t\tdisconnecting.subscribe( async () => {\r\n\t\t\t\tawait transaction( manager, async manager => {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tconst roomIds = await getJoinedRoomIds( manager, sessionId );\r\n\t\t\t\t\t\tif( roomIds.length > 0 ) {\r\n\t\t\t\t\t\t\tconst { nick } = await manager.findOne( SessionEntity, sessionId, { select: [ 'nick' ] } );\r\n\t\t\t\t\t\t\tawait Promise.all(\r\n\t\t\t\t\t\t\t\troomIds.map( roomId => statusMessage( `${nick} has disconnected.`, roomId ) )\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} finally {\r\n\t\t\t\t\t\tmanager.delete( SessionEntity, sessionId );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t} );\r\n\r\n\t\t\tdisconnected.subscribe( async () => {\r\n\t\t\t\tconsole.log( `User disconnected, ${--connections} connected` );\r\n\t\t\t} );\r\n\r\n\r\n\t\t\tconst commands = {\r\n\t\t\t\tasync help( roomId: string ) {\r\n\t\t\t\t\tawait statusMessage( `Available commands:\r\n/?\r\n/help\r\n/nick <name>\r\n/quit\r\n/who\r\n`, roomId, sessionId );\r\n\t\t\t\t},\r\n\t\t\t\tasync '?'( roomId: string ) {\r\n\t\t\t\t\tawait commands.help( roomId );\r\n\t\t\t\t},\r\n\t\t\t\tasync nick( roomId: string, nick: string ) {\r\n\t\t\t\t\tif( !isValidNick( nick ) ) throw new Error( 'Invalid nick.' );\r\n\r\n\t\t\t\t\tlet previousNick: string;\r\n\t\t\t\t\tawait transaction( manager, async manager => {\r\n\t\t\t\t\t\tconst session = await manager.findOne( SessionEntity, sessionId );\r\n\t\t\t\t\t\tconst existingSession = ( await manager.count( SessionEntity, { nick } ) ) > 0;\r\n\t\t\t\t\t\tconst existingUser = ( await manager.count( UserEntity, { nick } ) ) > 0;\r\n\t\t\t\t\t\tif( existingSession || existingUser ) {\r\n\t\t\t\t\t\t\tthrow new Error( 'Nick is already in use.' );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tpreviousNick = session.nick;\r\n\t\t\t\t\t\tsession.nick = nick;\r\n\t\t\t\t\t\tif( session.userId ) {\r\n\t\t\t\t\t\t\tawait manager.update( UserEntity, session.userId, { nick } );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tawait manager.save( session );\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\tawait statusMessage( `${previousNick} is now known as ${nick}.`, roomId );\r\n\t\t\t\t},\r\n\t\t\t\tasync quit( roomId: string ) {\r\n\t\t\t\t\tawait leaveRoom( manager, sessionId, roomId );\r\n\t\t\t\t},\r\n\t\t\t\tasync who( roomId: string ) {\r\n\t\t\t\t\tconst clients = await new Promise<string[]>( ( resolve, reject ) => {\r\n\t\t\t\t\t\tio.in( roomId ).clients( ( err, clients ) => {\r\n\t\t\t\t\t\t\tif( err ) reject( err );\r\n\t\t\t\t\t\t\telse resolve( clients );\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t\t} );\r\n\t\t\t\t\tconst sessions = await manager.findByIds( SessionEntity, clients );\r\n\t\t\t\t\tconst nicks = sessions.map( s => s.nick ).sort();\r\n\t\t\t\t\tawait statusMessage( `Users in room:\\n${nicks.join('\\n')}`, roomId, sessionId );\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tasync function command( roomId: string, raw: string ) {\r\n\t\t\t\tconst [ cmd, ...params ] = raw.trim().split( /\\s+/g );\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif( !commands.hasOwnProperty( cmd ) ) throw new Error( 'Unknown command.' );\r\n\t\t\t\t\tconst joinedRoomIds = await getJoinedRoomIds( manager, sessionId );\r\n\t\t\t\t\tif( !joinedRoomIds.includes( roomId ) ) throw new Error( 'Not in room.' );\r\n\t\t\t\t\tawait commands[ cmd ]( roomId, ...params );\r\n\t\t\t\t} catch( ex ) {\r\n\t\t\t\t\tif( ex && ex.message ) {\r\n\t\t\t\t\t\tawait statusMessage( ex.message, roomId, sessionId );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthrow ex;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\thandleCallbackEvent<{ roomId: string; position: Point; }>( 'makeMove', async ( { roomId, position } ) => {\r\n\t\t\t\tif( !await makeMove( manager, roomId, position ) ) throw new Error( 'Failed to make move.' );\r\n\t\t\t} );\r\n\r\n\t\t\thandleCallbackEvent<{ roomId: string; ruleSet: RuleSet }>( 'newGame', async ( { roomId, ruleSet } ) => {\r\n\t\t\t\tconst game = await newGame( manager, roomId, ruleSet );\r\n\t\t\t\tif( !game ) throw new Error( 'Failed to create game.' );\r\n\t\t\t\treturn { game };\r\n\t\t\t} );\r\n\r\n\t\t\thandleCallbackEvent<{ roomId: string; message: string; }>( 'sendMessage', async ( { roomId, message } ) => {\r\n\t\t\t\tif( message.startsWith( '/' ) ) {\r\n\t\t\t\t\tawait command( roomId, message.slice( 1 ) );\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tconst { nick } = await manager.findOne( SessionEntity, sessionId, { select: [ 'nick' ] } );\r\n\t\t\t\tif( !await chatMessage( nick, message, roomId ) ) throw new Error( 'Failed to send message.' );\r\n\t\t\t} );\r\n\r\n\t\t\thandleCallbackEvent<{ name: string; password: string; }>( 'createRoom', async ( { manager, name, password } ) => {\r\n\t\t\t\tconst roomEntity = await createRoom( manager, sessionId, name, password );\r\n\t\t\t\treturn RoomEntity.toRoom( roomEntity );\r\n\t\t\t} );\r\n\r\n\t\t\thandleCallbackEvent<{ roomId: string; password: string; }>( 'joinRoom', async ( { manager, roomId, password } ) => {\r\n\t\t\t\tconst roomEntity = await manager.findOne( RoomEntity, roomId );\r\n\t\t\t\tif( !roomEntity ) throw new Error( 'Failed to join room.' );\r\n\t\t\t\tif( roomEntity.passwordHash ) {\r\n\t\t\t\t\tif( !password ) throw new Error( 'Room requires a password.' );\r\n\t\t\t\t\tif( !await checkPassword( password, roomEntity.passwordHash ) ) throw new Error( 'Incorrect password.' );\r\n\t\t\t\t}\r\n\t\t\t\tmanager.update( RoomEntity, roomId, { expires: null } );\r\n\t\t\t\tawait joinRoom( manager, roomId, sessionId );\r\n\t\t\t\treturn RoomEntity.toRoom( roomEntity );\r\n\t\t\t} );\r\n\r\n\t\t\thandleCallbackEvent<{ roomId: string; }>( 'leaveRoom', async ( { manager, roomId } ) => {\r\n\t\t\t\tawait leaveRoom( manager, sessionId, roomId );\r\n\t\t\t} );\r\n\r\n\t\t\tflushRooms( manager, sessionId );\r\n\t\t} );\r\n\t} catch( ex ) {\r\n\t\tconsole.error( ex );\r\n\t}\r\n} )();\r\n","import { CreateDateColumn, UpdateDateColumn } from 'typeorm';\r\n\r\nexport class MetadataField {\r\n\t@CreateDateColumn( { select: false } )\r\n\tpublic created: Date;\r\n\r\n\t@UpdateDateColumn( { select: false } )\r\n\tpublic updated: Date;\r\n}\r\n","import { Column } from 'typeorm';\r\n\r\nexport class PointField {\r\n\t@Column( { type: 'integer' } )\r\n\tpublic x: number;\r\n\r\n\t@Column( { type: 'integer' } )\r\n\tpublic y: number;\r\n}\r\n\r\nexport class PointFieldNull {\r\n\t@Column( { type: 'integer', nullable: true } )\r\n\tpublic x: number;\r\n\r\n\t@Column( { type: 'integer', nullable: true } )\r\n\tpublic y: number;\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn, OneToOne, JoinColumn, JoinTable, CreateDateColumn } from 'typeorm';\r\nimport { GameEntity } from './game.entity';\r\nimport { MetadataField } from 'server/metadata.field';\r\n\r\n@Entity( 'Room' )\r\nexport class RoomEntity {\r\n\t@PrimaryGeneratedColumn( 'uuid' )\r\n\tpublic id: string;\r\n\r\n\t@Column( () => MetadataField )\r\n\tpublic meta: MetadataField;\r\n\r\n\t@Column()\r\n\tpublic name: string;\r\n\r\n\t@Column( { nullable: true } )\r\n\tpublic expires: Date;\r\n\r\n\t@Column()\r\n\tpublic passwordHash: string;\r\n\r\n\t@Column( 'uuid', { nullable: true} )\r\n\tpublic gameId: string;\r\n\r\n\t@OneToOne( () => GameEntity, { nullable: true } )\r\n\t@JoinColumn()\r\n\tpublic game: GameEntity;\r\n\r\n\tpublic static toRoom( roomEntity: RoomEntity ) {\r\n\t\treturn { roomId: roomEntity.id, gameId: roomEntity.gameId, name: roomEntity.name, hasPassword: !!roomEntity.passwordHash };\r\n\t}\r\n}\r\n","import { compare, genSalt, hash } from 'bcrypt-nodejs';\r\nimport { promisify } from 'util';\r\n\r\nexport async function hashPassword( password: string ) {\r\n\tif( !password ) return '';\r\n\tconst salt = await promisify( genSalt )( null );\r\n\tconst passwordHash = await promisify( hash )( password, salt, null );\r\n\treturn passwordHash;\r\n}\r\n\r\nexport async function checkPassword( password: string, passwordHash: string ) {\r\n\t// if a password is specified but hash is empty, go ahead and compare anyway to prevent timing attacks\r\n\tif( !password && !passwordHash ) return true;\r\n\tconst result = await promisify( compare )( password, passwordHash );\r\n\treturn result;\r\n}\r\n","import { Entity, Column, PrimaryColumn, ManyToMany, ManyToOne, CreateDateColumn } from 'typeorm';\r\nimport { UserEntity } from './user.entity';\r\nimport { MetadataField } from 'server/metadata.field';\r\n\r\n@Entity( 'Session' )\r\nexport class SessionEntity {\r\n\t@PrimaryColumn( 'uuid' )\r\n\tpublic id: string;\r\n\r\n\t@Column( () => MetadataField )\r\n\tpublic meta: MetadataField;\r\n\r\n\t@Column()\r\n\tpublic nick: string;\r\n\r\n\t@ManyToOne( () => UserEntity, userEntity => userEntity.sessions )\r\n\tpublic user: UserEntity;\r\n\r\n\t@Column( 'uuid', { nullable: true } )\r\n\tpublic userId: string;\r\n}\r\n","import { Column } from 'typeorm';\r\n\r\nexport class SizeField {\r\n\t@Column( { type: 'integer' } )\r\n\tpublic width: number;\r\n\r\n\t@Column( { type: 'integer' } )\r\n\tpublic height: number;\r\n}\r\n\r\nexport class SizeFieldNull {\r\n\t@Column( { type: 'integer', nullable: true } )\r\n\tpublic width: number;\r\n\r\n\t@Column( { type: 'integer', nullable: true } )\r\n\tpublic height: number;\r\n}\r\n","import { redis as redisSettings } from 'data/config.yaml';\r\nimport Redis from 'ioredis';\r\nimport adapter from 'socket.io-redis';\r\nimport uuid from 'uuid/v4';\r\nimport { shuttingDown } from './shut-down';\r\nimport { server } from './app';\r\n\r\nconst pub = new Redis( redisSettings.url, { ...redisSettings.config, db: 0, dropBufferSupport: true } );\r\nconst redis = new Redis( redisSettings.url, { ...redisSettings.config, db: 0 } );\r\n\r\nshuttingDown.subscribe( async () => {\r\n\tawait Promise.all( [\r\n\t\tpub.quit(),\r\n\t\tredis.quit()\r\n\t] );\r\n} );\r\n\r\nexport const io = require( 'socket.io' )( server ) as SocketIO.Server & NodeJS.EventEmitter;\r\n\r\nio.engine[ 'generateId' ] = uuid;\r\n\r\nio.adapter( adapter( { pubClient: pub, subClient: redis } ) );\r\n","import { Entity, Column, PrimaryGeneratedColumn, OneToMany, OneToOne, JoinColumn, CreateDateColumn } from 'typeorm';\r\nimport { LoginEntity } from './login.entity';\r\nimport { SessionEntity } from './session.entity';\r\nimport { MetadataField } from 'server/metadata.field';\r\n\r\n@Entity( 'User' )\r\nexport class UserEntity {\r\n\t@PrimaryGeneratedColumn( 'uuid' )\r\n\tpublic id: string;\r\n\r\n\t@Column( () => MetadataField )\r\n\tpublic meta: MetadataField;\r\n\r\n\t@Column( { unique: true } )\r\n\tpublic nick: string;\r\n\r\n\t@OneToMany( () => SessionEntity, session => session.user )\r\n\tpublic sessions: SessionEntity[];\r\n\r\n\t@OneToOne( () => LoginEntity, login => login.user, {\r\n\t\tcascade: true\r\n\t} )\r\n\t@JoinColumn()\r\n\tpublic login: LoginEntity;\r\n}\r\n","import { Bounds } from 'src/bounds';\r\n\r\nexport class Square {\r\n\tpublic constructor(\r\n\t\tpublic readonly position: Point,\r\n\t\tpublic readonly bounds: Bounds\r\n\t) {}\r\n\r\n\tpublic enabled = true;\r\n\tpublic color: number|null = null;\r\n\r\n\tpublic get empty() { return this.color === null; }\r\n}\r\n","import { validation as config } from 'data/config.yaml';\r\n\r\nexport function isValidNick( nick: string ) {\r\n\tif( !nick ) return false;\r\n\tif( nick.length > config.maxNickLength ) return false;\r\n\treturn /^[_a-z][-_a-z0-9]+[_a-z0-9]+/i.test( nick );\r\n}\r\n\r\nexport function isValidRoomName( roomName: string ) {\r\n\tif( !roomName ) return false;\r\n\tif( roomName.length > config.maxRoomNameLength ) return false;\r\n\treturn true;\r\n}\r\n"],"sourceRoot":""}