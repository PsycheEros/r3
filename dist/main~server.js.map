{"version":3,"sources":["webpack:///./src/server/main.ts","webpack:///./src/server/metadata.field.ts","webpack:///./src/server/user.entity.ts","webpack:///./src/server/game.entity.ts","webpack:///./src/server/session.entity.ts","webpack:///./src/server/login.entity.ts","webpack:///./src/server/room.entity.ts","webpack:///./src/server/game-state.entity.ts","webpack:///./src/server/app.ts","webpack:///./src/square.ts","webpack:///./src/bounds.ts","webpack:///./src/grid.ts","webpack:///./src/board.ts","webpack:///./src/rule-sets.ts","webpack:///./src/server/size.field.ts","webpack:///./src/server/point.field.ts","webpack:///./src/validation.ts","webpack:///./src/server/rxjs.ts"],"names":["__webpack_require__","_typeorm","_rxjs","_operators","_rxjs2","_validation","_game","_gameState","_login","_room","_session","_user","_ruleSets","_app","_config","_colors","_v","_interopRequireDefault","_moment","_assert","OPENSHIFT_REDIS_HOST","OPENSHIFT_REDIS_PASSWORD","OPENSHIFT_REDIS_PORT","process","env","server","Server","app","io","engine","default","redis","createClient","adapter","pub","auth_pass","sub","return_buffers","pubClient","subClient","getSocket","sessionId","Object","entries","of","connected","filter","id","socket","map","async","getJoinedRoomIds","manager","findByIds","RoomEntity","keys","rooms","room","joinRoom","roomId","Promise","resolve","reject","join","err","flushJoinedRooms","flushUpdate","nick","findOne","SessionEntity","select","statusMessage","roomIds","to","emit","flushRooms","find","toRoom","leaveRoom","leave","message","transaction","game","GameEntity","gameId","relations","toGame","newGame","ruleSet","rules","ruleSetMap","get","gameEntity","create","colors","mask","v","size","_objectSpread","save","saveGameStates","update","all","gameStates","gs","index","gameState","GameStateEntity","turn","data","String","lastMove","m","fn","createConnection","connectionOptions","entities","LoginEntity","UserEntity","interval","duration","cleanup","checkSeconds","asMilliseconds","subscribe","removed","in","clients","length","expires","isSameOrBefore","console","log","remove","add","expireSeconds","fromNow","toDate","cleanupRooms","connections","fromNodeEvent","disconnecting","pipe","take","disconnected","handleCallbackEvent","eventName","result","Subject","takeUntil","mergeMap","value","callback","tap","[object Object]","error","onErrorResumeNext","delete","commands","help","isValidNick","Error","previousNick","session","existingSession","count","existingUser","userId","nicks","s","sort","position","roomEntity","prevGameState","slice","nextGameState","makeMove","isGameOver","scores","Array","from","_","color","displayName","score","getScore","c1","c2","r1","compareScores","localeCompare","bestScore","winners","startsWith","raw","cmd","params","trim","split","hasOwnProperty","includes","ex","command","user","chatMessage","name","password","isValidRoomName","createRoom","listen","address","port","pid","MetadataField","__decorate","CreateDateColumn","Date","UpdateDateColumn","_metadata","PrimaryGeneratedColumn","Column","unique","OneToMany","OneToOne","login","cascade","JoinColumn","exports","Entity","_lodash","_size","sortBy","parseInt","x","y","SizeField","nullable","PrimaryColumn","ManyToOne","userEntity","sessions","Index","hasPassword","_point","type","PointFieldNull","_expressCsp","_path","_compression","_express","key","appSettings","set","use","static","__dirname","extend","cspPolicy","json","req","res","writeHead","end","bounds","this","enabled","empty","left","top","width","height","bottom","right","center","n","ne","e","se","sw","w","nw","validate","grid","Number","isSafeInteger","boundsCheck","Map","JSON","stringify","Symbol","iterator","call","_bounds","_square","Board","Bounds","_grid","Grid","squareSize","gutterSize","Square","assign","freeze","sq","square","zip","getData","board","reset","setData","setMask","pt","hitTest","directions","getAffectedSquares","direction","delta","squares","push","RulesStandard","boardSize","_board","fromGame","score1","score2","points","point","isValid","getValidMoves","prevTurn","prevIndex","i","t","getMask","rulesStandard","rulesReversed","ruleSets","SizeFieldNull","PointField","validation","maxNickLength","test","roomName","maxRoomNameLength","target","event","fromEventPattern","addListener","removeListener"],"mappings":"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","file":"main~server.js","sourcesContent":["import './error-handler';\r\nimport './polyfills';\r\n\r\nimport { createConnection, EntityManager, DeepPartial } from 'typeorm';\r\nimport { Subject, interval, of } from 'rxjs';\r\nimport { onErrorResumeNext, mergeMap, take, tap, takeUntil } from 'rxjs/operators';\r\nimport { fromNodeEvent } from './rxjs';\r\nimport { isValidNick, isValidRoomName } from 'src/validation';\r\nimport { GameEntity } from './game.entity';\r\nimport { GameStateEntity } from './game-state.entity';\r\nimport { LoginEntity } from './login.entity';\r\nimport { RoomEntity } from './room.entity';\r\nimport { SessionEntity } from './session.entity';\r\nimport { UserEntity } from './user.entity';\r\nimport { ruleSetMap } from 'src/rule-sets';\r\nimport { app } from './app';\r\nimport { connectionOptions, cleanup as cleanupConfig } from 'data/config.yaml';\r\nimport { colors } from 'data/colors.yaml';\r\nimport uuid from 'uuid/v4';\r\nimport moment from 'moment';\r\nimport assert from 'assert';\r\n\r\nconst { OPENSHIFT_REDIS_HOST,\r\n\t\tOPENSHIFT_REDIS_PASSWORD,\r\n\t\tOPENSHIFT_REDIS_PORT\r\n} = process.env;\r\n\r\ntype CallbackEvent<T = {}, U = {}> = [ T, ( error: Error|null, value: U|null ) => void ];\r\n\r\nconst server = require( 'http' ).Server( app ),\r\n\tio = require( 'socket.io' )( server ) as SocketIO.Server & NodeJS.EventEmitter;\r\n\r\nio.engine[ 'generateId' ] = uuid;\r\n\r\nif( OPENSHIFT_REDIS_HOST ) {\r\n\tconst redis = require( 'redis' ).createClient,\r\n\t\tadapter = require( 'socket.io-redis' ),\r\n\t\tpub = redis( OPENSHIFT_REDIS_PORT, OPENSHIFT_REDIS_HOST, { auth_pass: OPENSHIFT_REDIS_PASSWORD } ),\r\n\t\tsub = redis( OPENSHIFT_REDIS_PORT, OPENSHIFT_REDIS_HOST, { return_buffers: true, auth_pass: OPENSHIFT_REDIS_PASSWORD } );\r\n\r\n\tio.adapter( adapter( { pubClient: pub, subClient: sub } ) );\r\n}\r\n\r\nfunction getSocket( sessionId: string ) {\r\n\treturn Object.entries( io.of( '/' ).connected )\r\n\t.filter( ( [ id, socket ] ) => id === sessionId )\r\n\t.map( ( [ id, socket ] ) => socket )[ 0 ]\r\n\t|| null;\r\n}\r\n\r\nasync function getJoinedRoomIds( manager: EntityManager, sessionId: string ) {\r\n\tconst socket = getSocket( sessionId );\r\n\tif( !socket ) return [];\r\n\tconst rooms = await manager.findByIds( RoomEntity, Object.keys( socket.rooms ) );\r\n\treturn rooms.map( room => room.id );\r\n}\r\n\r\nasync function joinRoom( manager: EntityManager, roomId: string, sessionId: string ) {\r\n\tconst socket = getSocket( sessionId );\r\n\tawait new Promise( ( resolve, reject ) => {\r\n\t\tsocket.join( roomId, err => {\r\n\t\t\tif( err ) { reject( err ); }\r\n\t\t\telse { resolve(); }\r\n\t\t} );\r\n\t} );\r\n\tawait flushJoinedRooms( manager, sessionId );\r\n\tawait flushUpdate( manager, roomId, sessionId );\r\n\tconst { nick } = await manager.findOne( SessionEntity, sessionId, { select: [ 'nick' ] } );\r\n\tawait statusMessage( roomId, `${nick} has joined the room.` );\r\n}\r\n\r\nasync function flushJoinedRooms( manager: EntityManager, sessionId: string ) {\r\n\tconst roomIds = await getJoinedRoomIds( manager, sessionId );\r\n\tio.to( sessionId ).emit( 'joinedRooms', roomIds );\r\n}\r\n\r\nasync function flushRooms( manager: EntityManager, sessionId?: string ) {\r\n\tconst rooms = ( await manager.find( RoomEntity ) ).map( RoomEntity.toRoom );\r\n\tconst emitter = sessionId ? io.to( sessionId ) : io;\r\n\temitter.emit( 'rooms', rooms );\r\n}\r\n\r\nasync function leaveRoom( manager: EntityManager, sessionId: string, roomId: string ) {\r\n\tconst socket = getSocket( sessionId );\r\n\tawait new Promise( ( resolve, reject ) => {\r\n\t\tsocket.leave( roomId, err => {\r\n\t\t\tif( err ) {\r\n\t\t\t\treject( err );\r\n\t\t\t} else {\r\n\t\t\t\tresolve();\r\n\t\t\t}\r\n\t\t} );\r\n\t} );\r\n\tawait flushJoinedRooms( manager, sessionId );\r\n\tconst { nick } = await manager.findOne( SessionEntity, sessionId, { select: [ 'nick' ] } );\r\n\tawait statusMessage( roomId, `${nick} has left the room.` );\r\n}\r\n\r\nfunction statusMessage( message: string, roomId: string, sessionId?: string ) {\r\n\tio.to( sessionId || roomId ).emit( 'message', { roomId, message } );\r\n\treturn true;\r\n}\r\n\r\nfunction chatMessage( user: string, message: string, roomId: string ) {\r\n\tio.to( roomId ).emit( 'message', { roomId, user, message } );\r\n\treturn true;\r\n}\r\n\r\nasync function flushUpdate( manager: EntityManager, roomId: string, sessionId?: string ) {\r\n\tawait transaction( manager, async manager => {\r\n\t\tconst room = await manager.findOne( RoomEntity, roomId);\r\n\t\tif( !room ) return;\r\n\t\tconst game = await manager.findOne( GameEntity, room.gameId, { relations: [ 'gameStates' ] } );\r\n\t\tif( !game ) return;\r\n\t\tio.to( sessionId || room.id ).emit( 'update', GameEntity.toGame( game ) );\r\n\t} );\r\n}\r\n\r\nasync function cleanupRooms( manager: EntityManager ) {\r\n\tawait transaction( manager, async manager => {\r\n\t\tlet removed = 0;\r\n\t\tawait Promise.all(\r\n\t\t\t( await manager.find( RoomEntity, { select: [ 'id', 'expires' ] } ) )\r\n\t\t\t.map( async room => {\r\n\t\t\t\tconst clients = await new Promise<string[]>( ( resolve, reject ) => {\r\n\t\t\t\t\tio.in( room.id ).clients( ( err, clients ) => {\r\n\t\t\t\t\t\tif( err ) reject( err );\r\n\t\t\t\t\t\telse resolve( clients );\r\n\t\t\t\t\t} );\r\n\t\t\t\t} );\r\n\t\t\t\tif( clients.length === 0 ) {\r\n\t\t\t\t\tif( room.expires ) {\r\n\t\t\t\t\t\tif( moment( room.expires ).isSameOrBefore() ) {\r\n\t\t\t\t\t\t\tconsole.log( `Deleting room ${room.id}...` );\r\n\t\t\t\t\t\t\tawait manager.remove( room );\r\n\t\t\t\t\t\t\t++removed;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconst expires = moment().add( cleanupConfig.rooms.expireSeconds, 's' );\r\n\t\t\t\t\t\tconsole.log( `Queuing room ${room.id} for deletion ${expires.fromNow()}...` );\r\n\t\t\t\t\t\troom.expires = expires.toDate();\r\n\t\t\t\t\t\tawait manager.save( room );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} )\r\n\t\t);\r\n\t\tif( removed ) await flushRooms( manager );\r\n\t} );\r\n}\r\n\r\nasync function newGame( manager: EntityManager, roomId: string, ruleSet: RuleSet ) {\r\n\tstatusMessage( 'New game', roomId );\r\n\tconst rules = ruleSetMap.get( ruleSet );\r\n\treturn await transaction( manager, async manager => {\r\n\t\tconst game = rules.newGame( uuid() );\r\n\t\tconst gameEntity = await manager.create( GameEntity, {\r\n\t\t\tid: game.gameId,\r\n\t\t\tcolors: [ ...game.colors ],\r\n\t\t\tmask: game.mask.map( v => v ? '1' : '0' ).join( '' ),\r\n\t\t\tsize: { ...game.size },\r\n\t\t\truleSet: game.ruleSet\r\n\t\t} );\r\n\t\tawait manager.save( gameEntity );\r\n\t\tawait saveGameStates( manager, game );\r\n\t\tawait manager.update( RoomEntity, roomId, { gameId: gameEntity.id } );\r\n\t\tflushRooms( manager );\r\n\t\tflushUpdate( manager, roomId );\r\n\t\treturn game;\r\n\t} );\r\n}\r\n\r\nasync function saveGameStates( manager: EntityManager, game: Game ) {\r\n\treturn await transaction( manager, async manager => {\r\n\t\tawait Promise.all(\r\n\t\t\tgame.gameStates.map( async ( gs, index ) => {\r\n\t\t\t\tlet gameState = await manager.findOne( GameStateEntity, { gameId: game.gameId, index } );\r\n\t\t\t\tif( !gameState ) gameState = await manager.create( GameStateEntity, { gameId: game.gameId, index } );\r\n\t\t\t\tgameState.turn = gs.turn;\r\n\t\t\t\tgameState.data = gs.data.map( v => ( v == null ) ? 'x' : String(v) );\r\n\t\t\t\tgameState.lastMove = { ...gs.lastMove };\r\n\t\t\t\tawait manager.save( gameState );\r\n\t\t\t} )\r\n\t\t);\r\n\t} );\r\n}\r\n\r\nconst transaction = ( () => {\r\n\tlet m: EntityManager = null;\r\n\treturn ( <T>( manager: EntityManager, fn: ( manager: EntityManager ) => Promise<T> ) => {\r\n\t\tassert( manager );\r\n\t\tif( m ) {\r\n\t\t\treturn fn( m );\r\n\t\t} else {\r\n\t\t\treturn manager.transaction<T>( async manager => {\r\n\t\t\t\tm = manager;\r\n\t\t\t\ttry {\r\n\t\t\t\t\treturn await fn( m );\r\n\t\t\t\t} finally {\r\n\t\t\t\t\tm = null;\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t}\r\n\t} );\r\n} )();\r\n\r\nasync function createRoom( manager: EntityManager, sessionId: string, name: string, password: string ) {\r\n\tif( !isValidRoomName( name ) ) throw new Error( 'Invalid room name.' );\r\n\treturn await transaction( manager, async manager => {\r\n\t\tconst roomEntity =\r\n\t\t\tawait manager.create( RoomEntity, {\r\n\t\t\t\tname,\r\n\t\t\t\tpassword\r\n\t\t\t} );\r\n\t\tawait manager.save( roomEntity );\r\n\t\tawait joinRoom( manager, roomEntity.id, sessionId );\r\n\t\tawait newGame( manager, roomEntity.id, RuleSet.standard );\r\n\t\treturn roomEntity;\r\n\t} );\r\n}\r\n\r\nasync function makeMove( manager: EntityManager, roomId: string, position: Point ) {\r\n\treturn await transaction( manager, async manager => {\r\n\t\tconst roomEntity = await manager.findOne( RoomEntity, roomId );\r\n\t\tconst gameEntity = await manager.findOne( GameEntity, roomEntity.gameId, { relations: [ 'gameStates' ] } );\r\n\t\tconst rules = ruleSetMap.get( gameEntity.ruleSet );\r\n\t\tlet game = GameEntity.toGame( gameEntity );\r\n\t\tconst prevGameState = game.gameStates.slice( -1 )[ 0 ];\r\n\t\tconst nextGameState = rules.makeMove( game, prevGameState, position );\r\n\t\tif( !nextGameState ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tgame = {\r\n\t\t\t...game,\r\n\t\t\tgameStates: [ ...game.gameStates, nextGameState ]\r\n\t\t};\r\n\t\tawait saveGameStates( manager, game );\r\n\t\tif( rules.isGameOver( game, nextGameState ) ) {\r\n\t\t\tconst scores =\r\n\t\t\tArray.from( { length: rules.colors } )\r\n\t\t\t.map( ( _, color ) => ( {\r\n\t\t\t\tcolor: colors[ game.colors[ color ] ].displayName,\r\n\t\t\t\tscore: rules.getScore( game, nextGameState, color )\r\n\t\t\t} ) );\r\n\t\t\tscores.sort( ( c1, c2 ) => {\r\n\t\t\t\tconst r1 = rules.compareScores( c1.score, c2.score );\r\n\t\t\t\treturn r1 === 0 ? c1.color.localeCompare( c2.color ) : r1;\r\n\t\t\t} );\r\n\t\t\tconst bestScore = scores[ 0 ].score;\r\n\t\t\tconst winners = scores.filter( ( { score } ) => rules.compareScores( score, bestScore ) );\r\n\t\t\tlet message: string;\r\n\t\t\tif( winners.length !== 1 ) {\r\n\t\t\t\tmessage = 'Draw game.';\r\n\t\t\t} else {\r\n\t\t\t\tmessage = `${winners[ 0 ].color} wins.`;\r\n\t\t\t}\r\n\t\t\tawait statusMessage( `${message}:\\n${scores.map(({color, score})=>`${color}: ${score}`).join('\\n')}`, roomId );\r\n\t\t}\r\n\t\tawait flushUpdate( manager, roomId );\r\n\t\treturn true;\r\n\t} );\r\n}\r\n\r\n( async () => {\r\n\ttry {\r\n\t\tconst { manager } = await createConnection( {\r\n\t\t\t...connectionOptions,\r\n\t\t\tentities: [ GameEntity, GameStateEntity, LoginEntity, RoomEntity, SessionEntity, UserEntity ]\r\n\t\t} );\r\n\r\n\t\tinterval( moment.duration( cleanupConfig.rooms.checkSeconds, 's' ).asMilliseconds() )\r\n\t\t.subscribe( async () => {\r\n\t\t\tcleanupRooms( manager );\r\n\t\t} );\r\n\r\n\t\tlet connections = 0;\r\n\r\n\t\tfromNodeEvent<SocketIO.Socket>( io, 'connection' )\r\n\t\t.subscribe( async socket => {\r\n\t\t\tconsole.log( `User connected, ${++connections} connected, ${socket.id}` );\r\n\r\n\t\t\tconst disconnecting = fromNodeEvent( socket, 'disconnecting' ).pipe( take( 1 ) );\r\n\t\t\tconst disconnected = fromNodeEvent( socket, 'disconnect' ).pipe( take( 1 ) );\r\n\r\n\t\t\tfunction handleCallbackEvent<T extends object = {}, U = {}>( eventName: string, fn: ( value: T & { manager: EntityManager } ) => PromiseLike<U|void> ) {\r\n\t\t\t\tconst result = new Subject<U>();\r\n\t\t\t\tfromNodeEvent<CallbackEvent<T, U>>( socket, eventName )\r\n\t\t\t\t.pipe(\r\n\t\t\t\t\ttakeUntil( disconnected ),\r\n\t\t\t\t\tmergeMap<CallbackEvent<T, U>, {}>( ( [ value, callback ] ) =>\r\n\t\t\t\t\t\tof( value )\r\n\t\t\t\t\t\t.pipe(\r\n\t\t\t\t\t\t\tmergeMap( value => transaction( manager, async manager => fn( { manager, ...( value as any ) } ) ) ),\r\n\t\t\t\t\t\t\ttap( {\r\n\t\t\t\t\t\t\t\tnext( value ) {\r\n\t\t\t\t\t\t\t\t\tcallback( null, ( value == null ) ? {} as any : value );\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\terror( err ) {\r\n\t\t\t\t\t\t\t\t\tconsole.error( err );\r\n\t\t\t\t\t\t\t\t\tcallback( ( err == null ) ? {} : err.message, null );\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} ),\r\n\t\t\t\t\t\t\tonErrorResumeNext()\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t),\r\n\t\t\t\t)\r\n\t\t\t\t.subscribe( result );\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\r\n\t\t\tconst sessionId = socket.id;\r\n\t\t\tawait manager.save(\r\n\t\t\t\tawait manager.create( SessionEntity, { id: sessionId, nick: 'Guest' } )\r\n\t\t\t);\r\n\r\n\t\t\tdisconnecting.subscribe( async () => {\r\n\t\t\t\tawait transaction( manager, async manager => {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tconst roomIds = await getJoinedRoomIds( manager, sessionId );\r\n\t\t\t\t\t\tif( roomIds.length > 0 ) {\r\n\t\t\t\t\t\t\tconst { nick } = await manager.findOne( SessionEntity, sessionId, { select: [ 'nick' ] } );\r\n\t\t\t\t\t\t\tawait Promise.all(\r\n\t\t\t\t\t\t\t\troomIds.map( roomId => statusMessage( `${nick} has disconnected.`, roomId ) )\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} finally {\r\n\t\t\t\t\t\tmanager.delete( SessionEntity, sessionId );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t} );\r\n\r\n\t\t\tdisconnected.subscribe( async () => {\r\n\t\t\t\tconsole.log( `User disconnected, ${--connections} connected` );\r\n\t\t\t} );\r\n\r\n\r\n\t\t\tconst commands = {\r\n\t\t\t\tasync help( roomId: string ) {\r\n\t\t\t\t\tawait statusMessage( `Available commands:\r\n/?\r\n/help\r\n/nick <name>\r\n/quit\r\n/who\r\n`, roomId, sessionId );\r\n\t\t\t\t},\r\n\t\t\t\tasync '?'( roomId: string ) {\r\n\t\t\t\t\tawait commands.help( roomId );\r\n\t\t\t\t},\r\n\t\t\t\tasync nick( roomId: string, nick: string ) {\r\n\t\t\t\t\tif( !isValidNick( nick ) ) throw new Error( 'Invalid nick.' );\r\n\r\n\t\t\t\t\tlet previousNick: string;\r\n\t\t\t\t\tawait transaction( manager, async manager => {\r\n\t\t\t\t\t\tconst session = await manager.findOne( SessionEntity, sessionId );\r\n\t\t\t\t\t\tconst existingSession = ( await manager.count( SessionEntity, { nick } ) ) > 0;\r\n\t\t\t\t\t\tconst existingUser = ( await manager.count( UserEntity, { nick } ) ) > 0;\r\n\t\t\t\t\t\tif( existingSession || existingUser ) {\r\n\t\t\t\t\t\t\tthrow new Error( 'Nick is already in use.' );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tpreviousNick = session.nick;\r\n\t\t\t\t\t\tsession.nick = nick;\r\n\t\t\t\t\t\tif( session.userId ) {\r\n\t\t\t\t\t\t\tawait manager.update( UserEntity, session.userId, { nick } );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tawait manager.save( session );\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\tawait statusMessage( `${previousNick} is now known as ${nick}.`, roomId );\r\n\t\t\t\t},\r\n\t\t\t\tasync quit( roomId: string ) {\r\n\t\t\t\t\tawait leaveRoom( manager, sessionId, roomId );\r\n\t\t\t\t},\r\n\t\t\t\tasync who( roomId: string ) {\r\n\t\t\t\t\tconst clients = await new Promise<string[]>( ( resolve, reject ) => {\r\n\t\t\t\t\t\tio.in( roomId ).clients( ( err, clients ) => {\r\n\t\t\t\t\t\t\tif( err ) reject( err );\r\n\t\t\t\t\t\t\telse resolve( clients );\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t\t} );\r\n\t\t\t\t\tconst sessions = await manager.findByIds( SessionEntity, clients );\r\n\t\t\t\t\tconst nicks = sessions.map( s => s.nick ).sort();\r\n\t\t\t\t\tawait statusMessage( `Users in room:\\n${nicks.join('\\n')}`, roomId, sessionId );\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tasync function command( roomId: string, raw: string ) {\r\n\t\t\t\tconst [ cmd, ...params ] = raw.trim().split( /\\s+/g );\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif( !commands.hasOwnProperty( cmd ) ) throw new Error( 'Unknown command.' );\r\n\t\t\t\t\tconst joinedRoomIds = await getJoinedRoomIds( manager, sessionId );\r\n\t\t\t\t\tif( !joinedRoomIds.includes( roomId ) ) throw new Error( 'Not in room.' );\r\n\t\t\t\t\tawait commands[ cmd ]( roomId, ...params );\r\n\t\t\t\t} catch( ex ) {\r\n\t\t\t\t\tif( ex && ex.message ) {\r\n\t\t\t\t\t\tawait statusMessage( ex.message, roomId, sessionId );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthrow ex;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\thandleCallbackEvent<{ roomId: string; position: Point; }>( 'makeMove', async ( { roomId, position } ) => {\r\n\t\t\t\tif( !await makeMove( manager, roomId, position ) ) throw new Error( 'Failed to make move.' );\r\n\t\t\t} );\r\n\r\n\t\t\thandleCallbackEvent<{ roomId: string; ruleSet: RuleSet }>( 'newGame', async ( { roomId, ruleSet } ) => {\r\n\t\t\t\tconst game = await newGame( manager, roomId, ruleSet );\r\n\t\t\t\tif( !game ) throw new Error( 'Failed to create game.' );\r\n\t\t\t\treturn { game };\r\n\t\t\t} );\r\n\r\n\t\t\thandleCallbackEvent<{ roomId: string; message: string; }>( 'sendMessage', async ( { roomId, message } ) => {\r\n\t\t\t\tif( message.startsWith( '/' ) ) {\r\n\t\t\t\t\tawait command( roomId, message.slice( 1 ) );\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tconst { nick } = await manager.findOne( SessionEntity, sessionId, { select: [ 'nick' ] } );\r\n\t\t\t\tif( !await chatMessage( nick, message, roomId ) ) throw new Error( 'Failed to send message.' );\r\n\t\t\t} );\r\n\r\n\t\t\thandleCallbackEvent<{ name: string; password: string; }>( 'createRoom', async ( { manager, name, password } ) => {\r\n\t\t\t\tconst roomEntity = await createRoom( manager, sessionId, name, password );\r\n\t\t\t\treturn RoomEntity.toRoom( roomEntity );\r\n\t\t\t} );\r\n\r\n\t\t\thandleCallbackEvent<{ roomId: string; password: string; }>( 'joinRoom', async ( { manager, roomId, password } ) => {\r\n\t\t\t\tconst roomEntity = await manager.findOne( RoomEntity, roomId );\r\n\t\t\t\tif( !roomEntity ) throw new Error( 'Failed to join room.' );\r\n\t\t\t\tif( roomEntity.password ) {\r\n\t\t\t\t\tif( !password ) throw new Error( 'Room requires a password.' );\r\n\t\t\t\t\t// TODO: hash\r\n\t\t\t\t\tif( roomEntity.password !== password ) throw new Error( 'Incorrect password.' );\r\n\t\t\t\t}\r\n\t\t\t\tmanager.update( RoomEntity, roomId, { expires: null } );\r\n\t\t\t\tawait joinRoom( manager, roomId, sessionId );\r\n\t\t\t\treturn RoomEntity.toRoom( roomEntity );\r\n\t\t\t} );\r\n\r\n\t\t\thandleCallbackEvent<{ roomId: string; }>( 'leaveRoom', async ( { manager, roomId } ) => {\r\n\t\t\t\tawait leaveRoom( manager, sessionId, roomId );\r\n\t\t\t} );\r\n\r\n\t\t\tflushRooms( manager, sessionId );\r\n\t\t} );\r\n\t} catch( ex ) {\r\n\t\tconsole.error( ex );\r\n\t}\r\n} )();\r\n\r\nserver.listen( app.get( 'port' ), app.get( 'host' ), err => {\r\n\tif( err ) {\r\n\t\tconsole.error( err );\r\n\t\treturn;\r\n\t}\r\n\tconst { address, port } = server.address();\r\n\tconsole.log( `Process ${process.pid} listening at ${address}:${port}...` );\r\n} );\r\n","import { CreateDateColumn, UpdateDateColumn } from 'typeorm';\r\n\r\nexport class MetadataField {\r\n\t@CreateDateColumn( { select: false } )\r\n\tpublic created: Date;\r\n\r\n\t@UpdateDateColumn( { select: false } )\r\n\tpublic updated: Date;\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn, OneToMany, OneToOne, JoinColumn, CreateDateColumn } from 'typeorm';\r\nimport { LoginEntity } from './login.entity';\r\nimport { SessionEntity } from './session.entity';\r\nimport { MetadataField } from 'server/metadata.field';\r\n\r\n@Entity( 'User' )\r\nexport class UserEntity {\r\n\t@PrimaryGeneratedColumn( 'uuid' )\r\n\tpublic id: string;\r\n\r\n\t@Column( () => MetadataField )\r\n\tpublic meta: MetadataField;\r\n\r\n\t@Column( { unique: true } )\r\n\tpublic nick: string;\r\n\r\n\t@OneToMany( () => SessionEntity, session => session.user )\r\n\tpublic sessions: SessionEntity[];\r\n\r\n\t@OneToOne( () => LoginEntity, login => login.user, {\r\n\t\tcascade: true\r\n\t} )\r\n\t@JoinColumn()\r\n\tpublic login: LoginEntity;\r\n}\r\n","import { Entity, PrimaryGeneratedColumn, OneToOne, OneToMany, Column, CreateDateColumn, UpdateDateColumn } from 'typeorm';\r\nimport { GameStateEntity } from './game-state.entity';\r\nimport { RoomEntity } from './room.entity';\r\nimport { MetadataField } from './metadata.field';\r\nimport { sortBy } from 'lodash';\r\nimport { SizeField } from 'server/size.field';\r\n\r\n@Entity( 'Game' )\r\nexport class GameEntity {\r\n\t@PrimaryGeneratedColumn( 'uuid' )\r\n\tpublic id: string;\r\n\r\n\t@Column( () => MetadataField )\r\n\tpublic meta: MetadataField;\r\n\r\n\t@Column( 'simple-array' )\r\n\tpublic colors: string[];\r\n\r\n\t@OneToMany( () => GameStateEntity, gameState => gameState.game, {\r\n\t\tcascade: true\r\n\t} )\r\n\tpublic gameStates: GameStateEntity[];\r\n\r\n\t@Column( () => SizeField )\r\n\tpublic size: SizeField;\r\n\r\n\t@Column()\r\n\tpublic mask: string;\r\n\r\n\t@OneToOne( () => RoomEntity, { nullable: true } )\r\n\tpublic room: RoomEntity;\r\n\r\n\t@Column()\r\n\tpublic ruleSet: RuleSet;\r\n\r\n\tstatic toGame( gameEntity: GameEntity ): Game {\r\n\t\tconst gameStates = sortBy( gameEntity.gameStates, gs => gs.index );\r\n\t\treturn {\r\n\t\t\tgameId: gameEntity.id,\r\n\t\t\tsize: { ...gameEntity.size },\r\n\t\t\tcolors: [ ...gameEntity.colors ],\r\n\t\t\tmask: gameEntity.mask.split( '' ).map( m => m === '1' ),\r\n\t\t\truleSet: gameEntity.ruleSet,\r\n\t\t\tgameStates: gameStates.map( gs => ( {\r\n\t\t\t\tindex: gs.index,\r\n\t\t\t\tturn: gs.turn,\r\n\t\t\t\tdata: gs.data.map( v => ( v === 'x' ) ? null : parseInt( v, 10 ) ),\r\n\t\t\t\tlastMove: ( gs.lastMove.x == null || gs.lastMove.y == null ) ? null : { ...gs.lastMove }\r\n\t\t\t} ) )\r\n\t\t};\r\n\t}\r\n}\r\n","import { Entity, Column, PrimaryColumn, ManyToMany, ManyToOne, CreateDateColumn } from 'typeorm';\r\nimport { UserEntity } from './user.entity';\r\nimport { MetadataField } from 'server/metadata.field';\r\n\r\n@Entity( 'Session' )\r\nexport class SessionEntity {\r\n\t@PrimaryColumn( 'uuid' )\r\n\tpublic id: string;\r\n\r\n\t@Column( () => MetadataField )\r\n\tpublic meta: MetadataField;\r\n\r\n\t@Column()\r\n\tpublic nick: string;\r\n\r\n\t@ManyToOne( () => UserEntity, userEntity => userEntity.sessions )\r\n\tpublic user: UserEntity;\r\n\r\n\t@Column( 'uuid', { nullable: true } )\r\n\tpublic userId: string;\r\n}\r\n","import { Entity, Index, Column, PrimaryGeneratedColumn, OneToOne, CreateDateColumn } from 'typeorm';\r\nimport { UserEntity } from './user.entity';\r\nimport { MetadataField } from 'server/metadata.field';\r\n\r\n@Entity( 'Login' )\r\nexport class LoginEntity {\r\n\t@PrimaryGeneratedColumn( 'uuid' )\r\n\tpublic id: string;\r\n\r\n\t@Column( () => MetadataField )\r\n\tpublic meta: MetadataField;\r\n\r\n\t@Column()\r\n\t@Index( { unique: true } )\r\n\tpublic username: string;\r\n\r\n\t@Column()\r\n\tpublic passwordHash: string;\r\n\r\n\t@OneToOne( () => UserEntity, user => user.login )\r\n\tpublic user: UserEntity;\r\n\r\n\t@Column( 'uuid', { nullable: true } )\r\n\tpublic userId: string;\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn, OneToOne, JoinColumn, JoinTable, CreateDateColumn } from 'typeorm';\r\nimport { GameEntity } from './game.entity';\r\nimport { MetadataField } from 'server/metadata.field';\r\n\r\n@Entity( 'Room' )\r\nexport class RoomEntity {\r\n\t@PrimaryGeneratedColumn( 'uuid' )\r\n\tpublic id: string;\r\n\r\n\t@Column( () => MetadataField )\r\n\tpublic meta: MetadataField;\r\n\r\n\t@Column()\r\n\tpublic name: string;\r\n\r\n\t@Column( { nullable: true } )\r\n\tpublic expires: Date;\r\n\r\n\t@Column()\r\n\tpublic password: string;\r\n\r\n\t@Column( 'uuid', { nullable: true} )\r\n\tpublic gameId: string;\r\n\r\n\t@OneToOne( () => GameEntity, { nullable: true } )\r\n\t@JoinColumn()\r\n\tpublic game: GameEntity;\r\n\r\n\tpublic static toRoom( roomEntity: RoomEntity ) {\r\n\t\treturn { roomId: roomEntity.id, gameId: roomEntity.gameId, name: roomEntity.name, hasPassword: !!roomEntity.password };\r\n\t}\r\n}\r\n","import { Entity, Column, PrimaryColumn, ManyToOne, CreateDateColumn } from 'typeorm';\r\nimport { GameEntity } from './game.entity';\r\nimport { PointFieldNull } from './point.field';\r\nimport { MetadataField } from './metadata.field';\r\n\r\n@Entity( 'GameState' )\r\nexport class GameStateEntity {\r\n\t@PrimaryColumn( 'uuid' )\r\n\tpublic gameId: string;\r\n\r\n\t@PrimaryColumn( { type: 'integer' } )\r\n\tpublic index: number;\r\n\r\n\t@Column( () => MetadataField )\r\n\tpublic meta: MetadataField;\r\n\r\n\t@ManyToOne( () => GameEntity, game => game.gameStates )\r\n\tpublic game: GameEntity;\r\n\r\n\t@Column( { type: 'integer', nullable: true } )\r\n\tpublic turn: number|null;\r\n\r\n\t@Column( () => PointFieldNull )\r\n\tpublic lastMove: PointFieldNull;\r\n\r\n\t@Column( { type: 'simple-array' } )\r\n\tpublic data: string[];\r\n}\r\n","import express from 'express';\r\nimport csp from 'express-csp';\r\nimport path from 'path';\r\nimport compression from 'compression';\r\nimport { appSettings, cspPolicy } from 'data/config.yaml';\r\n\r\nexport const app = express();\r\nfor( const [ key, value ] of Object.entries( appSettings ) ) {\r\n\tapp.set( key, value );\r\n}\r\napp.use( compression(), express.static( path.join( __dirname, 'www' ) ) );\r\ncsp.extend( app, cspPolicy );\r\napp.use( require( 'body-parser' ).json() );\r\napp.get( '/health', ( req, res ) => {\r\n\tres.writeHead( 200 );\r\n\tres.end();\r\n} );\r\n","import { Bounds } from 'src/bounds';\n\nexport class Square {\n\tpublic constructor(\n\t\tpublic readonly position: Point,\n\t\tpublic readonly bounds: Bounds\n\t) {}\n\n\tpublic enabled = true;\n\tpublic color: number|null = null;\n\n\tpublic get empty() { return this.color === null; }\n}\n","export class Bounds {\n\tpublic constructor(\n\t\tpublic readonly left: number,\n\t\tpublic readonly top: number,\n\t\tpublic readonly width: number,\n\t\tpublic readonly height: number\n\t) {}\n\n\tpublic get bottom() {\n\t\tconst { top, height } = this;\n\t\treturn top + height;\n\t}\n\n\tpublic get right() {\n\t\tconst { left, width } = this;\n\t\treturn left + width;\n\t}\n\n\tpublic get center() {\n\t\tconst { left, top, width, height } = this,\n\t\t\tx = left + width * .5,\n\t\t\ty = top + height * .5;\n\t\treturn { x, y };\n\t}\n\n\tpublic get n() {\n\t\tconst { left, top, width } = this,\n\t\t\tx = left + width * .5,\n\t\t\ty = top;\n\t\treturn { x, y };\n\t}\n\n\tpublic get ne() {\n\t\tconst { left, top, width } = this,\n\t\t\tx = left + width,\n\t\t\ty = top;\n\t\treturn { x, y };\n\t}\n\n\tpublic get e() {\n\t\tconst { left, top, width, height } = this,\n\t\t\tx = left + width,\n\t\t\ty = top + height * .5;\n\t\treturn { x, y };\n\t}\n\n\tpublic get se() {\n\t\tconst { left, top, width, height } = this,\n\t\t\tx = left + width,\n\t\t\ty = top + height;\n\t\treturn { x, y };\n\t}\n\n\tpublic get s() {\n\t\tconst { left, top, width, height } = this,\n\t\t\tx = left + width * .5,\n\t\t\ty = top + height;\n\t\treturn { x, y };\n\t}\n\n\tpublic get sw() {\n\t\tconst { left, top, height } = this,\n\t\t\tx = left,\n\t\t\ty = top + height;\n\t\treturn { x, y };\n\t}\n\n\tpublic get w() {\n\t\tconst { left, top, height } = this,\n\t\t\tx = left,\n\t\t\ty = top + height * .5;\n\t\treturn { x, y };\n\t}\n\n\tpublic get nw() {\n\t\tconst { left, top } = this,\n\t\t\tx = left,\n\t\t\ty = top;\n\t\treturn { x, y };\n\t}\n\n\tpublic hitTest( { x, y }: Point ) {\n\t\tconst { top, right, bottom, left } = this;\n\t\treturn x >= left && x <= right\n\t\t\t&& y >= top && y <= bottom;\n\t}\n}\n","function validate<T>( grid: Grid<T>, { x, y }: Point ) {\n\tif( !Number.isSafeInteger( x ) || !Number.isSafeInteger( y ) ) {\n\t\tthrow new Error( `(${x}, ${y}) is not valid` );\n\t}\n\tif( !grid.boundsCheck( { x, y } ) ) {\n\t\tthrow new Error( `(${x}, ${y}) is out of bounds` );\n\t}\n}\n\nexport class Grid<T> {\n\tpublic constructor( public readonly width: number, public readonly height: number ) {}\n\n\tpublic boundsCheck( { x, y }: Point ) {\n\t\tconst { width, height } = this;\n\t\treturn x >= 0 && x < width && y >= 0 && y < height;\n\t}\n\n\tpublic get( { x, y }: Point ) {\n\t\tvalidate( this, { x, y } );\n\t\tconst key = JSON.stringify( { x, y } );\n\t\treturn this.data.get( key );\n\t}\n\n\tpublic set( { x, y }: Point, value: T ) {\n\t\tvalidate( this, { x, y } );\n\t\tconst key = JSON.stringify( { x, y } );\n\t\tthis.data.set( key, value );\n\t}\n\n\tpublic [Symbol.iterator]() {\n\t\tfunction *iterator( this: Grid<T> ) {\n\t\t\tconst { width, height } = this;\n\t\t\tfor( let x = 0; x < width; ++x ) {\n\t\t\tfor( let y = 0; y < height; ++ y ) {\n\t\t\t\tyield this.get( { x, y } );\n\t\t\t} }\n\t\t}\n\t\treturn iterator.call( this ) as IterableIterator<T|undefined>;\n\t}\n\n\tprivate data = new Map<string, T>();\n}\n","import { Grid } from 'src/grid';\nimport { Bounds } from 'src/bounds';\nimport { Square } from 'src/square';\nimport { zip } from 'lodash';\n\nexport class Board {\n\tpublic reset( { width, height }: Readonly<Size> ) {\n\t\tconst grid = new Grid<Square>( width, height ),\n\t\t\tsquareSize: Size = { width: 64, height: 64 },\n\t\t\tgutterSize: Size = { width: 6, height: 6 },\n\t\t\tbounds = new Bounds(\n\t\t\t\t0.5,\n\t\t\t\t0.5,\n\t\t\t\t1 + width * ( squareSize.width + gutterSize.width ) + gutterSize.width,\n\t\t\t\t1 + height * ( squareSize.height + gutterSize.height ) + gutterSize.height\n\t\t\t);\n\t\tfor( let x = 0; x < width; ++x ) {\n\t\tfor( let y = 0; y < height; ++y ) {\n\t\t\tconst position = { x, y },\n\t\t\t\tbounds = new Bounds(\n\t\t\t\t\t0.5 + x * ( squareSize.width + gutterSize.width ) + gutterSize.width,\n\t\t\t\t\t0.5 + y * ( squareSize.height + gutterSize.height ) + gutterSize.height,\n\t\t\t\t\t0.5 + squareSize.width,\n\t\t\t\t\t0.5 + squareSize.height\n\t\t\t\t);\n\t\t\tgrid.set( { x, y }, new Square( position, bounds ) );\n\t\t} }\n\t\tObject.assign( this, { grid, bounds } );\n\t}\n\n\tpublic get width() {\n\t\tconst { grid: { width } } = this;\n\t\treturn width;\n\t}\n\n\tpublic get height() {\n\t\tconst { grid: { height } } = this;\n\t\treturn height;\n\t}\n\n\tpublic get( { x, y }: Point ) {\n\t\tconst { grid } = this;\n\t\treturn grid.get( { x, y } )!;\n\t}\n\n\tpublic boundsCheck( { x, y }: Point ) {\n\t\tconst { grid } = this;\n\t\treturn grid.boundsCheck( { x, y } )!;\n\t}\n\n\tpublic getData() {\n\t\treturn Object.freeze( Array.from( this.grid ).map( sq => sq.empty ? null : sq.color ) );\n\t}\n\n\tpublic setData( data: ReadonlyArray<number> ) {\n\t\tfor( const [ color, square ] of zip( data, Array.from( this.grid ) ) ) {\n\t\t\tsquare.color = color;\n\t\t}\n\t}\n\n\tpublic getGameState( index: number ) {\n\t\treturn {\n\t\t\tindex,\n\n\t\t\tdata: this.getData()\n\t\t} as GameState;\n\t}\n\n\tpublic getMask() {\n\t\treturn Object.freeze( Array.from( this.grid ).map( sq => sq.enabled ) );\n\t}\n\n\tpublic setMask( mask: ReadonlyArray<boolean> ) {\n\t\tfor( const [ enabled, square ] of zip( mask, Array.from( this.grid ) ) ) {\n\t\t\tsquare.enabled = enabled;\n\t\t}\n\t}\n\n\tpublic static fromGame( game: Game, gameState: GameState ) {\n\t\tconst board = new Board;\n\t\tboard.reset( game.size );\n\t\tboard.setData( gameState.data );\n\t\tboard.setMask( game.mask );\n\t\treturn board;\n\t}\n\n\tpublic [Symbol.iterator]() {\n\t\tconst { grid } = this;\n\t\treturn grid[ Symbol.iterator ]() as IterableIterator<Square>;\n\t}\n\n\tpublic hitTest( pt: Point ): Square|null {\n\t\tfor( const square of this ) {\n\t\t\tif( square.bounds.hitTest( pt ) ) {\n\t\t\t\treturn square;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic bounds = new Bounds( 0, 0, 0, 0 );\n\tprivate grid = new Grid<Square>( 0, 0 );\n}\n","import { Board } from './board';\nimport { Square } from './square';\n\nconst directions: ReadonlyArray<Point> = [\n\t{ x:  0, y: -1 },\n\t{ x:  1, y: -1 },\n\t{ x:  1, y:  0 },\n\t{ x:  1, y:  1 },\n\t{ x:  0, y:  1 },\n\t{ x: -1, y:  1 },\n\t{ x: -1, y:  0 },\n\t{ x: -1, y: -1 }\n];\n\nfunction getAffectedSquares( board: Board, position: Point, color: number ): Square[] {\n\tif( !board.boundsCheck( position ) ) { return []; }\n\tconst square = board.get( position );\n\tif( !square || !square.empty || !square.enabled ) { return []; }\n\tfunction direction( { x, y }: Point, delta: Point ): Square[] {\n\t\tconst squares = [] as Square[];\n\t\tfor( ; ; ) {\n\t\t\tx += delta.x;\n\t\t\ty += delta.y;\n\t\t\tif( !board.boundsCheck( { x, y } ) ) { return []; }\n\t\t\tconst square = board.get( { x, y } );\n\t\t\tif( !square || square.empty || !square.enabled ) { return []; }\n\t\t\tif( square.color === color ) { return squares; }\n\t\t\tsquares.push( square );\n\t\t}\n\t}\n\tlet squares = [ square ];\n\tfor( const delta of directions ) {\n\t\tsquares = [ ...squares, ...direction( position, delta ) ];\n\t}\n\tif( squares.length <= 1 ) { return []; }\n\treturn squares;\n}\n\nclass RulesStandard implements Rules {\n\tpublic readonly name: string = 'Standard';\n\tpublic readonly ruleSet: RuleSet = RuleSet.standard;\n\tpublic readonly colors: number = 2;\n\tpublic readonly boardSize: Readonly<Size> = Object.freeze( { width: 8, height: 8 } );\n\n\tpublic isValid( game: Game, gameState: GameState, position: Point, color: number ) {\n\t\treturn getAffectedSquares( Board.fromGame( game, gameState ), position, color ).length > 0;\n\t}\n\n\tpublic compareScores( score1: number, score2: number ) {\n\t\treturn score1 - score2;\n\t}\n\n\tpublic getValidMoves( game: Game, gameState: GameState, color: number ) {\n\t\tconst points = [] as Point[];\n\t\tconst { size: { width, height } } = game;\n\t\tfor( let x = 0; x < width; ++x ) {\n\t\tfor( let y = 0; y < height; ++y ) {\n\t\t\tconst point = { x, y };\n\t\t\tif( this.isValid( game, gameState, point, color ) ) points.push( point );\n\t\t}\n\t\t}\n\t\treturn points;\n\t}\n\n\tpublic isGameOver( game: Game, gameState: GameState ) {\n\t\tconst { colors } = this;\n\t\tfor( let color = 0; color < colors; ++color ) {\n\t\t\tif( this.getValidMoves( game, gameState, color ).length > 0 ) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic makeMove( game: Game, gameState: GameState, position: Readonly<Point> ) {\n\t\tconst { turn: prevTurn, index: prevIndex } = gameState;\n\t\tconst board = Board.fromGame( game, gameState );\n\t\tconst squares = getAffectedSquares( board, position, prevTurn );\n\t\tif( squares.length === 0 ) return null;\n\t\tfor( const square of squares ) {\n\t\t\tsquare.color = prevTurn;\n\t\t}\n\t\tconst index = prevIndex + 1;\n\t\tconst lastMove = Object.freeze( { ...position } );\n\t\tconst data = board.getData();\n\t\tconst { colors } = this;\n\t\tlet turn: number|null = null;\n\t\tfor( let i = 0; i < colors; ++i ) {\n\t\t\tconst t = ( prevTurn + 1 + i ) % colors;\n\t\t\tif( this.getValidMoves( game, { turn: t, index, data, lastMove }, t ).length > 0 ) {\n\t\t\t\tturn = t;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn { turn, index, data, lastMove };\n\t}\n\n\tpublic getScore( game: Game, gameState: GameState, color: number ) {\n\t\tconst board = Board.fromGame( game, gameState );\n\t\tlet score = 0;\n\t\tfor( const square of board ) {\n\t\t\tif( square && square.enabled && square.color === color ) {\n\t\t\t\t++score;\n\t\t\t}\n\t\t}\n\t\treturn score;\n\t}\n\n\tpublic newGame( gameId: string ) {\n\t\tconst { boardSize } = this;\n\n\t\tconst board = new Board;\n\t\tboard.reset( boardSize );\n\t\t// TODO: center? gets ugly with an odd dimension\n\t\tboard.get( { x: 3, y: 3 } ).color = 0;\n\t\tboard.get( { x: 4, y: 3 } ).color = 1;\n\t\tboard.get( { x: 3, y: 4 } ).color = 1;\n\t\tboard.get( { x: 4, y: 4 } ).color = 0;\n\t\tconst gameStates = [ {\n\t\t\tturn: 0,\n\t\t\tindex: 0,\n\t\t\tdata: board.getData(),\n\t\t\tlastMove: null\n\t\t} as GameState ];\n\t\treturn {\n\t\t\tgameId,\n\t\t\truleSet: this.ruleSet,\n\t\t\tmask: board.getMask(),\n\t\t\tcolors: Object.freeze( [ 'black', 'white' ] ),\n\t\t\tsize: Object.freeze( { ...boardSize } ),\n\t\t\tgameStates: Object.freeze( gameStates )\n\t\t};\n\t}\n}\n\nclass RulesReversed extends RulesStandard {\n\tpublic readonly name: string = 'Reversed';\n\tpublic readonly ruleSet: RuleSet = RuleSet.reversed;\n\n\tpublic compareScores( score1: number, score2: number ) {\n\t\treturn score2 - score1;\n\t}\n}\n\nexport const rulesStandard = new RulesStandard;\nexport const rulesReversed = new RulesReversed;\nexport const ruleSets = [ rulesStandard, rulesReversed ] as Rules[];\nexport const ruleSetMap = new Map<RuleSet, Rules>();\nfor( const ruleSet of ruleSets ) {\n\truleSetMap.set( ruleSet.ruleSet, ruleSet );\n}\n","import { Column } from 'typeorm';\r\n\r\nexport class SizeField {\r\n\t@Column( { type: 'integer' } )\r\n\tpublic width: number;\r\n\r\n\t@Column( { type: 'integer' } )\r\n\tpublic height: number;\r\n}\r\n\r\nexport class SizeFieldNull {\r\n\t@Column( { type: 'integer', nullable: true } )\r\n\tpublic width: number;\r\n\r\n\t@Column( { type: 'integer', nullable: true } )\r\n\tpublic height: number;\r\n}\r\n","import { Column } from 'typeorm';\r\n\r\nexport class PointField {\r\n\t@Column( { type: 'integer' } )\r\n\tpublic x: number;\r\n\r\n\t@Column( { type: 'integer' } )\r\n\tpublic y: number;\r\n}\r\n\r\nexport class PointFieldNull {\r\n\t@Column( { type: 'integer', nullable: true } )\r\n\tpublic x: number;\r\n\r\n\t@Column( { type: 'integer', nullable: true } )\r\n\tpublic y: number;\r\n}\r\n","import { validation as config } from 'data/config.yaml';\r\n\r\nexport function isValidNick( nick: string ) {\r\n\tif( !nick ) return false;\r\n\tif( nick.length > config.maxNickLength ) return false;\r\n\treturn /^[_a-z][-_a-z0-9]+[_a-z0-9]+/i.test( nick );\r\n}\r\n\r\nexport function isValidRoomName( roomName: string ) {\r\n\tif( !roomName ) return false;\r\n\tif( roomName.length > config.maxRoomNameLength ) return false;\r\n\treturn true;\r\n}\r\n","import { fromEventPattern } from 'rxjs';\n\ntype EventTarget = NodeJS.EventEmitter;\n\nexport const fromNodeEvent = <T>( target: EventTarget, event: string ) =>\n\tfromEventPattern<T>(\n\t\te => { target.addListener( event, e as any ); },\n\t\te => { target.removeListener( event, e as any ); }\n\t);\n"],"sourceRoot":""}