{"version":3,"sources":["../../../ts/app.ts"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["const { NODE_PORT = 3000, NODE_IP = 'localhost',\n\t\tOPENSHIFT_REDIS_HOST,\n\t\tOPENSHIFT_REDIS_PASSWORD,\n\t\tOPENSHIFT_REDIS_PORT\n\t} = process.env;\nimport GameState from './game-state';\nimport Board from './board';\nimport Rules from './rules';\nimport express = require( 'express' );\nconst app = express();\nimport index = require( 'serve-index' );\nconst server = require( 'http' ).Server( app ),\n\tio = require( 'socket.io' )( server ),\n\trules = new Rules,\n\tgameState = new GameState;\n\nif( OPENSHIFT_REDIS_HOST ) {\n\tconst redis = require( 'redis' ).createClient,\n\t\tadapter = require( 'socket.io-redis' ),\n\t\tpub = redis( OPENSHIFT_REDIS_PORT, OPENSHIFT_REDIS_HOST, { auth_pass: OPENSHIFT_REDIS_PASSWORD } ),\n\t\tsub = redis( OPENSHIFT_REDIS_PORT, OPENSHIFT_REDIS_HOST, { return_buffers: true, auth_pass: OPENSHIFT_REDIS_PASSWORD } );\n\n\tio.adapter( adapter( { pubClient: pub, subClient: sub } ) );\n}\n\napp.use( require( 'body-parser' ).json() );\n\napp.get( '/health', ( req, res ) => {\n\tres.writeHead( 200 );\n\tres.end();\n} );\n\nfunction flushUpdate( target = io ) {\n\ttarget.emit( 'update', gameState.serialize() );\n}\n\nfunction newGame() {\n\tconst { board } = gameState;\n\tif( !rules.isGameOver( board ) ) return false;\n\tstatusMessage( 'New game' );\n\trules.reset( gameState );\n\tflushUpdate();\n\treturn true;\n}\nnewGame();\n\nfunction makeMove( position, color ) {\n\tconst { board, turn } = gameState;\n\tif( color !== turn ) return false;\n\tif( !rules.makeMove( gameState, position ) ) return false;\n\tif( rules.isGameOver( board ) ) {\n\t\tconst black = rules.getScore( board, 0 ),\n\t\t\twhite = rules.getScore( board, 1 );\n\t\tif( black > white ) {\n\t\t\tstatusMessage( `Black wins ${black}:${white}` );\n\t\t} else if( white > black ) {\n\t\t\tstatusMessage( `White wins ${white}:${black}` );\n\t\t} else {\n\t\t\tstatusMessage( 'Draw game' );\n\t\t}\n\t}\n\tflushUpdate();\n\treturn true;\n}\n\nfunction statusMessage( message ) {\n\tconsole.log( message );\n\tio.emit( 'message', { message } );\n\treturn true;\n}\n\nfunction chatMessage( user, message ) {\n\tio.emit( 'message', { user, message } );\n\treturn true;\n}\n\nlet connections = 0;\nio.on( 'connection', socket => {\n\tstatusMessage( `User connected, ${++connections} connected` );\n\n\tsocket.on( 'disconnect', () => {\n\t\tstatusMessage( `User disconnected, ${--connections} connected` );\n\t} );\n\n\tsocket.on( 'move', ( { position } ) => {\n\t\tmakeMove( position, gameState.turn );\n\t} );\n\n\tsocket.on( 'newgame', () => {\n\t\tnewGame();\n\t} );\n\n\tsocket.on( 'message', ( { user, message } ) => {\n\t\tchatMessage( user, message );\n\t} );\n\n\tflushUpdate( socket );\n} );\n\n/*\napp.use( ( req, res, next ) => {\n\tconsole.log( req.method, req.url );\n\tnext();\n} );\n*/\n\napp.use( express.static( 'client' ) );\napp.use( index( 'client' ) );\n\napp.use( '/lib', express.static( 'node_modules' ) );\napp.use( '/lib', index( 'node_modules' ) );\n\nserver.listen( NODE_PORT, NODE_IP, () => {\n\tconsole.log( `Application worker ${process.pid} started...` );\n} );\n"]}