{"version":3,"sources":["../../../ts/board.ts"],"names":[],"mappings":"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","file":"board.js","sourcesContent":["import Grid from './grid';\r\nimport Bounds from './bounds';\r\nimport Square from './square';\r\n\r\nexport default class Board {\r\n\tpublic reset( width: number, height: number ) {\r\n\t\tconst grid = new Grid<Square>( width, height ),\r\n\t\t\tsquareSize: Size = { width: 64, height: 64 },\r\n\t\t\tgutterSize: Size = { width: 4, height: 4 },\r\n\t\t\tbounds = new Bounds(\r\n\t\t\t\t0,\r\n\t\t\t\t0,\r\n\t\t\t\twidth * ( squareSize.width + gutterSize.width ) + gutterSize.width,\r\n\t\t\t\theight * ( squareSize.height + gutterSize.height ) + gutterSize.height\r\n\t\t\t);\r\n\t\tfor( let x = 0; x < width; ++x )\r\n\t\tfor( let y = 0; y < height; ++y ) {\r\n\t\t\tconst position = { x, y },\r\n\t\t\t\tbounds = new Bounds(\r\n\t\t\t\t\tx * ( squareSize.width + gutterSize.width ) + gutterSize.width,\r\n\t\t\t\t\ty * ( squareSize.height + gutterSize.height ) + gutterSize.height,\r\n\t\t\t\t\tsquareSize.width,\r\n\t\t\t\t\tsquareSize.height\r\n\t\t\t\t);\r\n\t\t\tgrid.set( { x, y }, new Square( position, bounds ) );\r\n\t\t}\r\n\t\tObject.assign( this, { grid, bounds } );\r\n\t}\r\n\r\n\tpublic get width() {\r\n\t\tconst { grid: { width } } = this;\r\n\t\treturn width;\r\n\t}\r\n\r\n\tpublic get height() {\r\n\t\tconst { grid: { height } } = this;\r\n\t\treturn height;\r\n\t}\r\n\r\n\tpublic get( { x, y }: Point ) {\r\n\t\tconst { grid } = this;\r\n\t\treturn grid.get( { x, y } )!;\r\n\t}\r\n\r\n\tpublic boundsCheck( { x, y }: Point ) {\r\n\t\tconst { grid } = this;\r\n\t\treturn grid.boundsCheck( { x, y } )!;\r\n\t}\r\n\r\n\tpublic [Symbol.iterator]() {\r\n\t\tconst { grid } = this;\r\n\t\treturn grid[ Symbol.iterator ]() as IterableIterator<Square>;\r\n\t}\r\n\r\n\tpublic hitTest( pt: Point ): Square|null {\r\n\t\tfor( const square of this ) {\r\n\t\t\tif( square.bounds.hitTest( pt ) ) {\r\n\t\t\t\treturn square;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic bounds = new Bounds( 0, 0, 0, 0 );\r\n\tprivate grid = new Grid<Square>( 0, 0 );\r\n\r\n\tpublic serialize(): SerializedBoard {\r\n\t\tconst { width, height } = this;\r\n\t\tlet data = '';\r\n\t\tfor( const { enabled, empty, color } of this ) {\r\n\t\t\tdata +=\r\n\t\t\t\t!enabled ? 'x'\r\n\t\t\t:\tempty ? ' '\r\n\t\t\t:\tcolor;\r\n\t\t}\r\n\t\treturn { width, height, data };\r\n\t}\r\n\r\n\tpublic static deserialize( data: SerializedBoard ) {\r\n\t\treturn ( new Board ).deserialize( data );\r\n\t}\r\n\r\n\tpublic deserialize( { width, height, data }: SerializedBoard ) {\r\n\t\tthis.reset( width, height ); \r\n\t\tlet i = 0;\r\n\t\tfor( const square of this ) {\r\n\t\t\tconst char = data[ i++ ];\r\n\t\t\tswitch( char ) {\r\n\t\t\tcase 'x':\r\n\t\t\t\tsquare.enabled = false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ' ':\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tsquare.color = parseInt( char, 10 );\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic clone() {\r\n\t\treturn Board.deserialize( this.serialize() );\r\n\t}\r\n}\r\n"]}