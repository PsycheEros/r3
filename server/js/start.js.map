{"version":3,"sources":["../../../ts/start.ts"],"names":[],"mappings":";AAAA,mCAAsC;AACtC,MAAM,WAAW,GAAG,CAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAE,EACpJ,EAAE,QAAQ,EAAE,oBAAoB,GAAG,CAAC,EAAE,GAAG,OAAO,CAAC,GAAG,EACpD,UAAU,GAAG,QAAQ,KAAK,YAAY,CAAC;AAExC,IAAI,QAAQ,GAAG,KAAK,CAAC;AAErB,OAAO,CAAC,EAAE,CAAE,YAAY,EAAE;IACzB,EAAE,CAAA,CAAE,UAAW,CAAC,CAAC,CAAC;QACjB,EAAE,CAAA,CAAE,CAAC,QAAS,CAAC,CAAC,CAAC;YAChB,OAAO,CAAC,IAAI,EAAE,CAAC;QAChB,CAAC;IACF,CAAC;IAAC,IAAI,CAAC,CAAC;QACP,OAAO,CAAC,IAAI,CAAE,CAAC,CAAE,CAAC;IACnB,CAAC;AACF,CAAC,CAAE,CAAC;AAEJ,EAAE,CAAA,CAAE,OAAO,CAAC,QAAS,CAAC,CAAC,CAAC;IACvB,OAAO,CAAC,GAAG,CAAE,YAAY,oBAAoB,aAAa,CAAE,CAAC;IAC7D,GAAG,CAAA,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,oBAAoB,EAAE,EAAE,CAAC,EAAG,CAAC;QAChD,OAAO,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IACD,EAAE,CAAA,CAAE,UAAW,CAAC,CAAC,CAAC;QACjB,WAAW,CAAC,OAAO,CAAE,MAAM;YAC1B,OAAO,CAAC,EAAE,CAAE,MAAM,EAAE;gBACnB,OAAO,CAAC,GAAG,CAAE,OAAO,MAAM,uBAAuB,CAAE,CAAC;gBACpD,QAAQ,GAAG,IAAI,CAAC;gBAChB,OAAO,CAAC,UAAU,CAAE;oBACnB,OAAO,CAAC,GAAG,CAAE,+BAA+B,CAAE,CAAC;oBAC/C,OAAO,CAAC,IAAI,CAAE,CAAC,CAAE,CAAC;gBACnB,CAAC,CAAE,CAAC;YACL,CAAC,CAAE,CAAC;QACL,CAAC,CAAE,CAAC;IACL,CAAC;AACF,CAAC;AAAC,IAAI,CAAC,CAAC;IACP,OAAO,CAAE,UAAU,CAAE,CAAC;AACvB,CAAC","file":"start.js","sourcesContent":["import cluster = require( 'cluster' );\r\nconst stopSignals = [ 'SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT', 'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM' ],\r\n\t{ NODE_ENV, NODE_CLUSTER_WORKERS = 4 } = process.env,\r\n\tproduction = NODE_ENV === 'production';\r\n\r\nlet stopping = false;\r\n\r\ncluster.on( 'disconnect', () => {\r\n\tif( production ) {\r\n\t\tif( !stopping ) {\r\n\t\t\tcluster.fork();\r\n\t\t}\r\n\t} else {\r\n\t\tprocess.exit( 1 );\r\n\t}\r\n} );\r\n\r\nif( cluster.isMaster ) {\r\n\tconsole.log( `Starting ${NODE_CLUSTER_WORKERS} workers...` );\r\n\tfor( let i = 0; i < NODE_CLUSTER_WORKERS; ++i ) {\r\n\t\tcluster.fork();\r\n\t}\r\n\tif( production ) {\r\n\t\tstopSignals.forEach( signal => {\r\n\t\t\tprocess.on( signal, () => {\r\n\t\t\t\tconsole.log( `Got ${signal}, stopping workers...` );\r\n\t\t\t\tstopping = true;\r\n\t\t\t\tcluster.disconnect( () => {\r\n\t\t\t\t\tconsole.log( 'All workers stopped, exiting.' );\r\n\t\t\t\t\tprocess.exit( 0 );\r\n\t\t\t\t} );\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n} else {\r\n\trequire( './app.js' );\r\n}\r\n"]}